#include <string>

#pragma GCC optimize("O0")

#include <rocRoller/CodeGen/ArgumentLoader.hpp>
#include <rocRoller/CodeGen/Arithmetic/MatrixMultiply.hpp>
#include <rocRoller/CodeGen/BranchGenerator.hpp>
#include <rocRoller/CodeGen/Instruction.hpp>
#include <rocRoller/Context.hpp>
#include <rocRoller/InstructionValues/LabelAllocator.hpp>
#include <rocRoller/InstructionValues/Register.hpp>

#include "GemmGuidePostKernels.hpp"

using namespace rocRoller;

namespace rocRollerTest
{
    struct HGemmGuidePostOptimized
    {
        ContextPtr m_context;
        //Register::ValuePtr label_0;
        Register::ValuePtr label_1;
        Register::ValuePtr label_2;
        Register::ValuePtr label_3;
        Register::ValuePtr label_4;
        Register::ValuePtr label_5;
        Register::ValuePtr label_6;
        Register::ValuePtr label_7;
        Register::ValuePtr label_8;
        Register::ValuePtr label_9;
        Register::ValuePtr label_10;
        Register::ValuePtr label_11;
        Register::ValuePtr label_12;
        Register::ValuePtr label_13;
        Register::ValuePtr label_14;
        Register::ValuePtr label_15;
        Register::ValuePtr label_16;
        Register::ValuePtr label_17;
        Register::ValuePtr label_18;
        Register::ValuePtr label_19;
        Register::ValuePtr label_20;

        HGemmGuidePostOptimized(ContextPtr context)
            : m_context(context)
        {
            //label_0 = m_context->labelAllocator()->label("Cijk_Ailk_Bjlk_HHS_H_MT128x256x16_MI32x32x8x1_SE_K1");
            label_6  = m_context->labelAllocator()->label("label_0015");
            label_8  = m_context->labelAllocator()->label("label_0014");
            label_13 = m_context->labelAllocator()->label("PrefetchGlobalLastIterEnd_5");
            label_3  = m_context->labelAllocator()->label("label_0012");
            label_1  = m_context->labelAllocator()->label("ShadowInitStart_10");
            label_14 = m_context->labelAllocator()->label("TailLoopBeginL_6");
            label_5  = m_context->labelAllocator()->label("LoopBeginL_1");
            label_17 = m_context->labelAllocator()->label("Summation_End_25");
            label_19 = m_context->labelAllocator()->label("label_GW_End_30");
            label_18 = m_context->labelAllocator()->label("GW_B0_E0_28");
            label_16 = m_context->labelAllocator()->label("SkipTailLoopL_8");
            label_11 = m_context->labelAllocator()->label("label_GW_End_22");
            label_10 = m_context->labelAllocator()->label("GW_B0_E0_20");
            label_7  = m_context->labelAllocator()->label("LoopEndL_2");
            label_4  = m_context->labelAllocator()->label("openLoopL_13");
            label_20 = m_context->labelAllocator()->label("label_0032");
            label_9  = m_context->labelAllocator()->label("Summation_End_OptNLL_17");
            label_2  = m_context->labelAllocator()->label("label_NoBranch_11");
            label_12 = m_context->labelAllocator()->label("OptNLL_End_16");
            label_15 = m_context->labelAllocator()->label("TailLoopEndL_7");
        }

        std::vector<Instruction> macros()
        {

            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Function Prefix                        "),
Instruction::Comment("****************************************"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Begin Kernel                           "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Component.Signature.SignatureCOV3"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Optimizations and Config:              "),
Instruction::Comment("****************************************"),
Instruction::Comment(" ThreadTile= 32 x 4 "),
Instruction::Comment(" SubGroup= 4 x 64 "),
Instruction::Comment(" VectorWidth=2 "),
Instruction::Comment(" GlobalLoadVectorWidthA=8, GlobalLoadVectorWidthB=8 "),
Instruction::Comment(" DirectToLdsA=False "),
Instruction::Comment(" DirectToLdsB=False "),
Instruction::Comment(" UseSgprForGRO=False "),
//Instruction::Label(label_0),
Instruction::Comment("****************************************"),
Instruction::Comment(" Asm syntax workarounds                 "),
Instruction::Comment("****************************************"),
Instruction(".macro _v_add_co_u32 dst:req, cc:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_add_co_u32 \\dst, \\cc, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_add_u32 dst:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_add_u32 \\dst, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_sub_u32 dst:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_sub_u32 \\dst, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_add_lshl_u32 dst:req, src0:req, src1:req, shiftCnt:req", {}, {}, {}, ""),
Instruction("v_add_lshl_u32 \\dst, \\src0, \\src1, \\shiftCnt", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" scale global load macros "),
Instruction(".macro _s_load_b32 dst base offset", {}, {}, {}, ""),
Instruction("s_load_dword \\dst \\base \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _s_load_b64 dst base offset", {}, {}, {}, ""),
Instruction("s_load_dwordx2 \\dst \\base \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _s_load_b512 dst base offset", {}, {}, {}, ""),
Instruction("s_load_dwordx16 \\dst \\base \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" ds operation macros "),
Instruction(".macro _ds_load_u16 dst src offset", {}, {}, {}, ""),
Instruction("ds_read_u16 \\dst \\src \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _ds_load_u16_d16_hi dst src offset", {}, {}, {}, ""),
Instruction("ds_read_u16_d16_hi \\dst \\src \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _ds_load_b64 dst src offset", {}, {}, {}, ""),
Instruction("ds_read_b64 \\dst \\src \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _ds_store_b64 dst src offset", {}, {}, {}, ""),
Instruction("ds_write_b64 \\dst \\src \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _ds_store_b128 dst src offset", {}, {}, {}, ""),
Instruction("ds_write_b128 \\dst \\src \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" buffer memory operation macros "),
Instruction(".macro _buffer_load_b128 dst voffset base soffset offen ioffset md0 md1 md2", {}, {}, {}, ""),
Instruction("buffer_load_dwordx4 \\dst \\voffset \\base \\soffset \\offen \\ioffset \\md0 \\md1 \\md2", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _buffer_load_d16_b16 dst voffset base soffset offen ioffset md0 md1 md2", {}, {}, {}, ""),
Instruction("buffer_load_short_d16 \\dst \\voffset \\base \\soffset \\offen \\ioffset \\md0 \\md1 \\md2", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _buffer_load_d16_hi_b16 dst voffset base soffset offen ioffset md0 md1 md2", {}, {}, {}, ""),
Instruction("buffer_load_short_d16_hi \\dst \\voffset \\base \\soffset \\offen \\ioffset \\md0 \\md1 \\md2", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _buffer_store_b64 src voffset base soffset offen ioffset md0 md1 md2", {}, {}, {}, ""),
Instruction("buffer_store_dwordx2 \\src \\voffset \\base \\soffset \\offen \\ioffset \\md0 \\md1 \\md2", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" VGPR Assignments                       "),
Instruction::Comment("****************************************"),
Instruction::Comment(" ValuC range: [0-0), serializedStore enabled "),
Instruction(".set vgprValuC, 0", {}, {}, {}, ""),
Instruction::Comment(" ValuA/B   Xn=PLR buffer idx,  In=InnerUnroll idx "),
Instruction(".set vgprValuA_X0_I0, 0", {}, {}, {}, ""),
Instruction(".set vgprValuA_X1_I0, 4", {}, {}, {}, ""),
Instruction(".set vgprG2LA, 30", {}, {}, {}, ""),
Instruction(".set vgprValuB_X0_I0, 8", {}, {}, {}, ""),
Instruction(".set vgprValuB_X1_I0, 16", {}, {}, {}, ""),
Instruction(".set vgprG2LB, 34", {}, {}, {}, ""),
Instruction(".set vgprLocalWriteAddrA, 24", {}, {}, {}, ""),
Instruction(".set vgprLocalWriteAddrB, 25", {}, {}, {}, ""),
Instruction(".set vgprGlobalReadOffsetA, 26", {}, {}, {}, ""),
Instruction(".set vgprGlobalReadOffsetB, 27", {}, {}, {}, ""),
Instruction(".set vgprLocalReadAddrA, 42", {}, {}, {}, ""),
Instruction(".set vgprLocalReadAddrB, 43", {}, {}, {}, ""),
Instruction(".set vgprSerial, 44", {}, {}, {}, ""),
Instruction::Comment(" Num VGPR=128 "),
Instruction::Comment(" Num AccVGPR=128 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" SGPR Assignments                       "),
Instruction::Comment("****************************************"),
Instruction(".set sgprKernArgAddress, 0", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup0, 2", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup1, 3", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup2, 4", {}, {}, {}, ""),
Instruction(".set sgprLoopCounterL, 5", {}, {}, {}, ""),
Instruction(".set sgprOrigLoopCounter, 6", {}, {}, {}, ""),
Instruction(".set sgprSrdA, 8", {}, {}, {}, ""),
Instruction(".set sgprSrdB, 12", {}, {}, {}, ""),
Instruction(".set sgprSrdD, 16", {}, {}, {}, ""),
Instruction(".set sgprSrdC, 20", {}, {}, {}, ""),
Instruction(".set sgprTensor2dSizeA, 24", {}, {}, {}, ""),
Instruction(".set sgprTensor2dSizeB, 26", {}, {}, {}, ""),
Instruction(".set sgprAddressD, 28", {}, {}, {}, ""),
Instruction(".set sgprAddressC, 30", {}, {}, {}, ""),
Instruction(".set sgprAddressA, 32", {}, {}, {}, ""),
Instruction(".set sgprAddressB, 34", {}, {}, {}, ""),
Instruction(".set sgprStridesD, 37", {}, {}, {}, ""),
Instruction(".set sgprStridesC, 39", {}, {}, {}, ""),
Instruction(".set sgprStridesA, 41", {}, {}, {}, ""),
Instruction(".set sgprStridesB, 43", {}, {}, {}, ""),
Instruction(".set sgprSizesFree, 45", {}, {}, {}, ""),
Instruction(".set sgprSizesSum, 48", {}, {}, {}, ""),
Instruction(".set sgprNumWorkGroups0, 50", {}, {}, {}, ""),
Instruction(".set sgprNumWorkGroups1, 51", {}, {}, {}, ""),
Instruction(".set sgprNumFullBlocks, 52", {}, {}, {}, ""),
Instruction(".set sgprWgmRemainder1, 53", {}, {}, {}, ""),
Instruction(".set sgprMagicNumberWgmRemainder1, 54", {}, {}, {}, ""),
Instruction(".set sgprOffsetD, 55", {}, {}, {}, ""),
Instruction(".set sgprOffsetC, 56", {}, {}, {}, ""),
Instruction(".set sgprOffsetA, 57", {}, {}, {}, ""),
Instruction(".set sgprOffsetB, 58", {}, {}, {}, ""),
Instruction(".set sgprShadowLimitA, 56", {}, {}, {}, ""),
Instruction(".set sgprShadowLimitB, 58", {}, {}, {}, ""),
Instruction(".set sgprGlobalReadIncsA, 7", {}, {}, {}, ""),
Instruction(".set sgprGlobalReadIncsB, 49", {}, {}, {}, ""),
Instruction::Comment(" max SGPR=65 "),
Instruction::Comment(" Size Assignments "),
Instruction(".set sgprSizeI, sgprSizesFree+0", {}, {}, {}, ""),
Instruction(".set sgprSizeJ, sgprSizesFree+1", {}, {}, {}, ""),
Instruction::Comment(" Stride Assignments "),
Instruction(".set sgprStrideD1J, sgprStridesD+0", {}, {}, {}, ""),
Instruction(".set sgprStrideDK, sgprStridesD+1", {}, {}, {}, ""),
Instruction(".set sgprStrideC1J, sgprStridesC+0", {}, {}, {}, ""),
Instruction(".set sgprStrideCK, sgprStridesC+1", {}, {}, {}, ""),
Instruction(".set sgprStrideAL, sgprStridesA+0", {}, {}, {}, ""),
Instruction(".set sgprStrideAK, sgprStridesA+1", {}, {}, {}, ""),
Instruction(".set sgprStrideBL, sgprStridesB+0", {}, {}, {}, ""),
Instruction(".set sgprStrideBK, sgprStridesB+1", {}, {}, {}, ""),
Instruction(".set MT1, 256", {}, {}, {}, ""),
Instruction(".set DepthU, 16", {}, {}, {}, ""),
Instruction(".set BpeA, 2", {}, {}, {}, ""),
Instruction(".set BpeB, 2", {}, {}, {}, ""),
Instruction::Comment(" Number of elements to shift-left SRD "),
Instruction::Comment(" 2GB limit - set offsets to -1 to exceed this and clamp "),
Instruction(".set BufferLimit, 0xffffffff", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" Bits 127:96 of SRD.                    "),
Instruction::Comment(" hex: 0x00020000                        "),
Instruction::Comment(" dst_sel_x (3b): 0                      "),
Instruction::Comment(" dst_sel_y (3b): 0                      "),
Instruction::Comment(" dst_sel_z (3b): 0                      "),
Instruction::Comment(" dst_sel_w (3b): 0                      "),
Instruction::Comment(" num_format (3b): 0                     "),
Instruction::Comment(" data_format (4b): 4                    "),
Instruction::Comment(" user_vm_enable (1b): 0                 "),
Instruction::Comment(" user_vm_mode (1b): 0                   "),
Instruction::Comment(" index_stride (2b): 0                   "),
Instruction::Comment(" add_tid_enable (1b): 0                 "),
Instruction::Comment(" _unusedA (3b): 0                       "),
Instruction::Comment(" nv (1b): 0                             "),
Instruction::Comment(" _unusedB (2b): 0                       "),
Instruction::Comment(" type (2b): 0                           "),
Instruction::Comment("****************************************"),
Instruction(".set Srd127_96, 0x00020000", {}, {}, {}, ""),
Instruction::Comment(" Global Offset A "),
Instruction(".macro GLOBAL_OFFSET_A vgprAddr:req vgprOffset0I:req vgprOffsetL:req vgprTmp:req", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vgprTmp+0], s[sgprStrideAL], v[\\vgprOffsetL] // mul d1 lower", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vgprAddr+0], vcc, v[\\vgprOffset0I], v[\\vgprTmp+0] // accumulate K lower", {}, {}, {}, ""),
Instruction("_v_add_u32 v[\\vgprAddr+0], 0x8, v[\\vgprAddr+0]     // add prepad for pointer shift", {}, {}, {}, ""),
Instruction("v_lshlrev_b32 v[\\vgprAddr+0], 0x1, v[\\vgprAddr+0]  // offset *= bytes/element", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" Global Offset B "),
Instruction(".macro GLOBAL_OFFSET_B vgprAddr:req vgprOffset1J:req vgprOffsetL:req vgprTmp:req", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vgprTmp+0], s[sgprStrideBL], v[\\vgprOffsetL] // mul d1 lower", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vgprAddr+0], vcc, v[\\vgprOffset1J], v[\\vgprTmp+0] // accumulate K lower", {}, {}, {}, ""),
Instruction("_v_add_u32 v[\\vgprAddr+0], 0x8, v[\\vgprAddr+0]     // add prepad for pointer shift", {}, {}, {}, ""),
Instruction("v_lshlrev_b32 v[\\vgprAddr+0], 0x1, v[\\vgprAddr+0]  // offset *= bytes/element", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
};
            // clang-format on
        }

        std::vector<Instruction> preamble()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Allocate Resources                     "),
Instruction::Comment("****************************************"),
Instruction("s_mov_b32", {Register::Value::Label("m0")}, {Register::Value::Label("0x7000")}, {}, " LDS clamp at 28672 bytes"),
Instruction("v_mov_b32", {Register::Value::Label("v[vgprSerial]")}, {Register::Value::Label("v0")}, {}, " thread serial id"),
Instruction::Comment(" Load Kernel Args "),
Instruction("_s_load_b512", {Register::Value::Label("s[24:39]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x8")}, {}, ""),
Instruction("_s_load_b512", {Register::Value::Label("s[40:55]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x48")}, {}, ""),
Instruction("_s_load_b64", {Register::Value::Label("s[56:57]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x88")}, {}, ""),
Instruction("_s_load_b32", {Register::Value::Label("s58")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x90")}, {}, ""),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for 148 bytes of kern args"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetD]")}, {Register::Value::Label("s[sgprOffsetD]"), Register::Value::Label("0x1")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressD+0]")}, {Register::Value::Label("s[sgprAddressD+0]"), Register::Value::Label("s[sgprOffsetD]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressD+1]")}, {Register::Value::Label("s[sgprAddressD+1]"), Register::Value::Label("0")}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetC]")}, {Register::Value::Label("s[sgprOffsetC]"), Register::Value::Label("0x1")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressC+0]")}, {Register::Value::Label("s[sgprAddressC+0]"), Register::Value::Label("s[sgprOffsetC]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressC+1]")}, {Register::Value::Label("s[sgprAddressC+1]"), Register::Value::Label("0")}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetA]")}, {Register::Value::Label("s[sgprOffsetA]"), Register::Value::Label("0x1")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Label("s[sgprOffsetA]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Label("0")}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetB]")}, {Register::Value::Label("s[sgprOffsetB]"), Register::Value::Label("0x1")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Label("s[sgprOffsetB]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Label("0")}, {}, " add offset to buffer address"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprAddressA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Label("16")}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprAddressA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Label("0")}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprAddressB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Label("16")}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprAddressB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Label("0")}, {}, " pre-pad to make room for possible pointer shift"),
Instruction(".set OffsetD, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetC, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetA, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetB, UNDEF", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" Local Read Addresses                   "),
Instruction::Comment("****************************************"),
Instruction::Comment(" local read addresses: tile assignments a/b "),
Instruction::Comment("lr0I"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " 0. thread id in wave: wtid = tid % wavelength(64)"),
Instruction("v_and_b32", {Register::Value::Label("v1")}, {Register::Value::Label("31"), Register::Value::Label("v2")}, {}, " 1. N offset: nIdx = wtid % MI_N(32)"),
Instruction::Comment(" 1. N offset: nOffset = nIdx * nStride(1) (multiplier is 1, do nothing)"),
Instruction::Comment(" 2. block offset: bnIdx = bnIdx % num1DBlocks(1) is 0. do nothing"),
Instruction::Comment(" 3. apply VectorWidth: bnOffset = bnOffset * vw(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v2")}, {Register::Value::Label("5"), Register::Value::Label("v2")}, {}, " 4. K offset: kIdx = wtid / (MIN(32) * MIBB(1))"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v2")}, {Register::Value::Label("0x9"), Register::Value::Label("v2")}, {}, " 4. K offset: lrKOffset = kIdx * mStride(512)"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v2"), Register::Value::Label("v1")}, {}, " 5. offset in wave: lrOffset = bnOffset + lrKOffset"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("6"), Register::Value::Label("v[vgprSerial]")}, {}, " 6. wave offset in N dimen: wtid = tid / dividedForWaveId(64)"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("1"), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wtid0 = wtid / num1DWaves(2)"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x5"), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wOffset = wtid0 * W0Stride(32)"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v0"), Register::Value::Label("v1")}, {}, " 7. final local read offset: flrOffset = lrOffset + WOffset"),
Instruction::Comment("lr1J"),
Instruction("v_and_b32", {Register::Value::Label("v3")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " 0. thread id in wave: wtid = tid % wavelength(64)"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Label("31"), Register::Value::Label("v3")}, {}, " 1. N offset: nIdx = wtid % MI_N(32)"),
Instruction::Comment(" 1. N offset: nOffset = nIdx * nStride(1) (multiplier is 1, do nothing)"),
Instruction::Comment(" 2. block offset: bnIdx = bnIdx % num1DBlocks(1) is 0. do nothing"),
Instruction::Comment(" 3. apply VectorWidth: bnOffset = bnOffset * vw(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v3")}, {Register::Value::Label("5"), Register::Value::Label("v3")}, {}, " 4. K offset: kIdx = wtid / (MIN(32) * MIBB(1))"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v3")}, {Register::Value::Label("0xa"), Register::Value::Label("v3")}, {}, " 4. K offset: lrKOffset = kIdx * mStride(1024)"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v3"), Register::Value::Label("v2")}, {}, " 5. offset in wave: lrOffset = bnOffset + lrKOffset"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("7"), Register::Value::Label("v[vgprSerial]")}, {}, " 6. wave offset in N dimen: wtid = tid / dividedForWaveId(128)"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("1"), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wtid0 = wtid / num1DWaves(2)"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x5"), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wOffset = wtid0 * W0Stride(32)"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v0"), Register::Value::Label("v2")}, {}, " 7. final local read offset: flrOffset = lrOffset + WOffset"),
Instruction::Comment(" local read addresses: final offsets a "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("8"), Register::Value::Label("v[vgprSerial]")}, {}, " LSU offset: sgid = Serial / subGroup(256)"),
Instruction("s_mov_b32", {Register::Value::Label("s55")}, {Register::Value::Label("128")}, {}, " LSU offset: stride = MT0(128) + PAD0(0)"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s55"), Register::Value::Label("v0")}, {}, " LSU offset: lsuoffset = sgid*(MT0+PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {Register::Value::Label("v0"), Register::Value::Label("v1"), Register::Value::Label("0x1")}, {}, " Final Offset: offset = (lro0*VW+lsuoffset)*bpe"),
Instruction::Comment(" local read addresses: final offsets b "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("8"), Register::Value::Label("v[vgprSerial]")}, {}, " LSU offset: sgid = Serial / subGroup(256)"),
Instruction("s_mov_b32", {Register::Value::Label("s55")}, {Register::Value::Label("256")}, {}, " LSU offset: stride = MT1(256) + PAD1(0)"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s55"), Register::Value::Label("v0")}, {}, " LSU offset: lsuoffset = sgid*(MT1+PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {Register::Value::Label("v0"), Register::Value::Label("v2"), Register::Value::Label("0x1")}, {}, " Final Offset: offset = (lro1*VW+lsuoffset)*bpe"),
Instruction::Comment(" local read addresses: declare addresses a "),
Instruction::Comment(" N/A "),
Instruction::Comment(" local read addresses: declare addresses b "),
Instruction("_v_add_co_u32", {Register::Value::Label("v[vgprLocalReadAddrB+0]")}, {m_context->getVCC(), Register::Value::Label("0x1000"), Register::Value::Label("v[vgprLocalReadAddrB+0]")}, {}, "  += LdsOffsetB (lower)"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Begin setupNewTile, isPap=False           "),
Instruction::Comment("****************************************"),
Instruction::Comment(" global read addresses: work-group "),
Instruction::Comment(" graWorkGroup mapping "),
Instruction("s_mov_b32", {Register::Value::Label("s63")}, {Register::Value::Label("0x8888889L")}, {}, " magic number for WGM==15"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("s63")}, {}, " s_magic mul"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("s63")}, {}, " s_magic mul"),
Instruction("s_lshr_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("31")}, {}, " sMagicDiv"),
Instruction("s_mul_i32", {Register::Value::Label("s61")}, {Register::Value::Label("s60"), Register::Value::Label("15")}, {}, " quotient * non-magic divisor"),
Instruction("s_sub_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("s61")}, {}, " WorkGroup1=remainder"),
Instruction("s_mul_i32", {Register::Value::Label("s61")}, {Register::Value::Label("s61"), Register::Value::Label("s[sgprNumWorkGroups0]")}, {}, " (wg1 % WGM)*nwg0"),
Instruction("s_add_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s61"), Register::Value::Label("s[sgprWorkGroup0]")}, {}, " wgSerial = wg0 + (wg1 % WGM)*nwg0"),
Instruction("s_cmp_ge_u32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprNumFullBlocks]")}, {}, " blockId >= numFullBlocks ?"),
Instruction("s_cmov_b32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprMagicNumberWgmRemainder1]")}, {}, ""),
Instruction("s_cselect_b32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprWgmRemainder1]"), Register::Value::Label("15")}, {}, ""),
Instruction("s_mul_hi_u32", {Register::Value::Label("s3")}, {Register::Value::Label("s61"), Register::Value::Label("s63")}, {}, " s_magic mul"),
Instruction("s_mul_i32", {Register::Value::Label("s2")}, {Register::Value::Label("s61"), Register::Value::Label("s63")}, {}, " s_magic mul"),
Instruction("s_lshr_b64", {Register::Value::Label("s[2:3]")}, {Register::Value::Label("s[2:3]"), Register::Value::Label("31")}, {}, " sMagicDiv"),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprWorkGroup1]")}, {Register::Value::Label("s[sgprWorkGroup0]"), Register::Value::Label("s62")}, {}, " quotient * non-magic divisor"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprWorkGroup1]")}, {Register::Value::Label("s61"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " WorkGroup1=remainder"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s60"), Register::Value::Label("15")}, {}, " blockId * WGM"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprWorkGroup1]")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("s60")}, {}, " wg1 += blockId * WGM"),
Instruction::Comment(" global read addresses: tile offset assignment a "),
Instruction::Comment(" LVCA = 16 "),
Instruction::Comment(" v0 = (local)groA-tile = serial%LVCA (note (wgA*MTA) will be added to SRD) "),
Instruction::Comment(" v1 = groA-unroll = serial/LVCA "),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v1")}, {Register::Value::Label("4"), Register::Value::Label("v4")}, {}, " v1 = v4 / 16"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("15"), Register::Value::Label("v4")}, {}, " v0 = v4 % 16"),
Instruction("v_readfirstlane_b32", {Register::Value::Label("s55")}, {Register::Value::Label("v[vgprSerial]")}, {}, " WaveIdxWavefrontWidth"),
Instruction("s_lshr_b32", {Register::Value::Label("s55")}, {Register::Value::Label("s55"), Register::Value::Label("0x6")}, {}, " WaveId"),
Instruction("s_mul_i32", {Register::Value::Label("s55")}, {Register::Value::Label("s55"), Register::Value::Label("4")}, {}, " Global Read Wave: each wave loads continuous lsp(4)*nrp(1) columns"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("s55"), Register::Value::Label("v1")}, {}, " Global Read Wave: add back to column index"),
Instruction::Comment(" gro-tile *= glvw "),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x3"), Register::Value::Label("v0")}, {}, " v0 = v0 * 8"),
Instruction::Comment(" global read addresses: tile offset assignment b "),
Instruction::Comment(" LVCB = 32 "),
Instruction::Comment(" v2 = (local)groB-tile = serial%LVCB (note (wgB*MTB) will be added to SRD) "),
Instruction::Comment(" v3 = groB-unroll = serial/LVCB "),
Instruction("v_and_b32", {Register::Value::Label("v6")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " v6 = v[vgprSerial] % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v3")}, {Register::Value::Label("5"), Register::Value::Label("v6")}, {}, " v3 = v6 / 32"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Label("31"), Register::Value::Label("v6")}, {}, " v2 = v6 % 32"),
Instruction("v_readfirstlane_b32", {Register::Value::Label("s55")}, {Register::Value::Label("v[vgprSerial]")}, {}, " WaveIdxWavefrontWidth"),
Instruction("s_lshr_b32", {Register::Value::Label("s55")}, {Register::Value::Label("s55"), Register::Value::Label("0x6")}, {}, " WaveId"),
Instruction("s_mul_i32", {Register::Value::Label("s55")}, {Register::Value::Label("s55"), Register::Value::Label("4")}, {}, " Global Read Wave: each wave loads continuous lsp(2)*nrp(2) columns"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("s55"), Register::Value::Label("v3")}, {}, " Global Read Wave: add back to column index"),
Instruction::Comment(" gro-tile *= glvw "),
Instruction("v_lshlrev_b32", {Register::Value::Label("v2")}, {Register::Value::Label("0x3"), Register::Value::Label("v2")}, {}, " v2 = v2 * 8"),
Instruction::Comment(" global read addresses: unroll assignment a "),
Instruction::Comment(" v1 "),
Instruction::Comment(" global read addresses: unroll assignment b "),
Instruction::Comment(" v3 "),
Instruction::Comment(" global read addresses: other free assignments "),
Instruction::Comment(" s[sgprWorkGroup2] "),
Instruction::Comment(" global read addresses: tile offsets a "),
Instruction("v_mov_b32", {Register::Value::Label("v4")}, {Register::Value::Label("v0")}, {}, " groA0I_0"),
Instruction::Comment(" global read addresses: tile offsets b "),
Instruction("v_mov_b32", {Register::Value::Label("v5")}, {Register::Value::Label("v2")}, {}, " groB1J_0"),
Instruction::Comment(" global read addresses: unroll offsets a "),
Instruction("v_mov_b32", {Register::Value::Label("v6")}, {Register::Value::Label("v1")}, {}, " groAL_0"),
Instruction::Comment(" global read addresses: unroll offsets b "),
Instruction("v_mov_b32", {Register::Value::Label("v7")}, {Register::Value::Label("v3")}, {}, " groBL_0"),
Instruction("_v_add_co_u32", {Register::Value::Label("v8")}, {m_context->getVCC(), Register::Value::Label("2"), Register::Value::Label("v7")}, {}, " groBL_1 + LSPB"),
Instruction::Comment(" global read addresses: shift b "),
Instruction("s_mul_i32", {Register::Value::Label("s55")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("256")}, {}, " WorkGroup[01] * MT"),
Instruction("s_sub_u32", {Register::Value::Label("s55")}, {Register::Value::Label("s[sgprSizeJ]"), Register::Value::Label("s55")}, {}, " edge = Size1J - WG*MT"),
Instruction("s_sub_u32", {Register::Value::Label("s55")}, {Register::Value::Label("s55"), Register::Value::Label("8")}, {}, " edge -= margin(8)"),
Instruction("v_mov_b32", {Register::Value::Label("v9")}, {Register::Value::Label("s55")}, {}, " edge vgpr = Size1J- WG*MT - margin(8)"),
Instruction("v_min_i32", {Register::Value::Label("v5")}, {Register::Value::Label("v9"), Register::Value::Label("v5")}, {}, " offset = (offset < edge) ? offset(v5) : edge(v9)"),
Instruction::Comment(" global read addresses: final offsets a "),
Instruction("GLOBAL_OFFSET_A", {Register::Value::Label("vgprGlobalReadOffsetA+0")}, {Register::Value::Label("4"), Register::Value::Label("6"), Register::Value::Label("9")}, {}, " gROA_0_0_0_0"),
Instruction::Comment(" global read addresses: final offsets b "),
Instruction("GLOBAL_OFFSET_B", {Register::Value::Label("vgprGlobalReadOffsetB+0")}, {Register::Value::Label("5"), Register::Value::Label("7"), Register::Value::Label("9")}, {}, " gROB_0_0_0_0"),
Instruction("GLOBAL_OFFSET_B", {Register::Value::Label("vgprGlobalReadOffsetB+1")}, {Register::Value::Label("5"), Register::Value::Label("8"), Register::Value::Label("9")}, {}, " gROB_0_0_1_0"),
Instruction::Comment(" global read addresses: addresses a "),
Instruction::Comment(" max read offset = size[n] * stride[n-1] "),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprWorkGroup0]"), Register::Value::Label("128")}, {}, " WorkGroup[01] * MT"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprWorkGroup0]"), Register::Value::Label("128")}, {}, " WorkGroup[01] * MT"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprTensor2dSizeA]"), Register::Value::Label("s62")}, {}, " sub tileStart"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprTensor2dSizeA+1]"), Register::Value::Label("s63")}, {}, " sub tileStart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[sgprShadowLimitA:sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA:sgprShadowLimitA+1]"), Register::Value::Label("0x1")}, {}, " Set limit to use bytes"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("16")}, {}, " extend limit for pre-pad"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Label("0")}, {}, " extend limit for pre-pad"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cselect_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("BufferLimit")}, {}, " Move shadow to real if we are within 2^32"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprStrideAK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprStrideAK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_add_u32", {Register::Value::Label("s62")}, {Register::Value::Label("s62"), Register::Value::Label("s60")}, {}, " accum wg term to tilestart"),
Instruction("s_addc_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s63"), Register::Value::Label("s61")}, {}, " accum wg term to tilestart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[62:63]")}, {Register::Value::Label("s[62:63]"), Register::Value::Label("0x1")}, {}, " tileStart *= BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Label("s62")}, {}, " SRD base = Address+ tileStart0"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Label("s63")}, {}, " SRD base = Address+ tileStart1"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdA+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in SRD"),
Instruction::Comment(" global read addresses: addresses b "),
Instruction::Comment(" max read offset = size[n] * stride[n-1] "),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("256")}, {}, " WorkGroup[01] * MT"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("256")}, {}, " WorkGroup[01] * MT"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprTensor2dSizeB]"), Register::Value::Label("s62")}, {}, " sub tileStart"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprTensor2dSizeB+1]"), Register::Value::Label("s63")}, {}, " sub tileStart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[sgprShadowLimitB:sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB:sgprShadowLimitB+1]"), Register::Value::Label("0x1")}, {}, " Set limit to use bytes"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("16")}, {}, " extend limit for pre-pad"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Label("0")}, {}, " extend limit for pre-pad"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cselect_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("BufferLimit")}, {}, " Move shadow to real if we are within 2^32"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprStrideBK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprStrideBK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_add_u32", {Register::Value::Label("s62")}, {Register::Value::Label("s62"), Register::Value::Label("s60")}, {}, " accum wg term to tilestart"),
Instruction("s_addc_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s63"), Register::Value::Label("s61")}, {}, " accum wg term to tilestart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[62:63]")}, {Register::Value::Label("s[62:63]"), Register::Value::Label("0x1")}, {}, " tileStart *= BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Label("s62")}, {}, " SRD base = Address+ tileStart0"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Label("s63")}, {}, " SRD base = Address+ tileStart1"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdB+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in SRD"),
Instruction::Comment(" global read addresses: increments a "),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {Register::Value::Label("DepthU*BpeA"), Register::Value::Label("s[sgprStrideAL]")}, {}, " incrA unrollIdx)"),
Instruction::Comment(" global read addresses: increments b "),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {Register::Value::Label("DepthU*BpeB"), Register::Value::Label("s[sgprStrideBL]")}, {}, " incrB unrollIdx)"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Local Write Addresses                  "),
Instruction::Comment("****************************************"),
Instruction::Comment(" lwaTileAssignmentA = v0 "),
Instruction::Comment(" lwaTileAssignmentB = v2 "),
Instruction::Comment(" lwaUnrollAssignmentA = v1 "),
Instruction::Comment(" lwaUnrollAssignmentB = v3 "),
Instruction::Comment(" local write addresses: first offset a "),
Instruction("v_mul_u32_u24", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("0x80"), Register::Value::Label("v1")}, {}, " lwAL**(MTA + PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v0"), Register::Value::Label("v[vgprLocalWriteAddrA]"), Register::Value::Label("0x1")}, {}, " lwFOA = (lwAA + lwAL*(MT0I+PAD))*bpe"),
Instruction::Comment(" local write addresses: first offset b "),
Instruction("v_mul_u32_u24", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("0x100"), Register::Value::Label("v3")}, {}, " lwBL**(MTB + PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v2"), Register::Value::Label("v[vgprLocalWriteAddrB]"), Register::Value::Label("0x1")}, {}, " lwFOB = (lwBB + lwBL*(MT1J+PAD))*bpe"),
Instruction("_v_add_co_u32", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {m_context->getVCC(), Register::Value::Label("0x1000"), Register::Value::Label("v[vgprLocalWriteAddrB]")}, {}, " lwFOB = lwB1J + lwBL*MT1J + LDS_OFFSET_B=2048*2"),
Instruction::Comment(" declare loop num iterations "),
Instruction("s_lshr_b32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("s[sgprSizesSum+0]"), Register::Value::Label("4")}, {}, " s[sgprLoopCounterL] = s[sgprSizesSum+0] / 16"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprOrigLoopCounter]")}, {Register::Value::Label("s[sgprLoopCounterL]")}, {}, " copy loop counter"),
Instruction::Comment(" local read addresses: init pointers a "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" local read addresses: init pointers b "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" prefetch: global -> local "),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0")}, {}, " at last iteration?"),
Instruction("s_cbranch_scc1", {}, {label_1}, {}, " skip to ShadowInitStart iter b/c numIter==0"),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LB+4:vgprG2LB+4+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_1_0"),
Instruction::Comment(" global read inc A loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprSrdA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprSrdA+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" global read inc B loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprSrdB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprSrdB+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment("****************************************"),
Instruction::Comment(" End setupNewTile, isPap=False             "),
Instruction::Comment("****************************************"),
Instruction::Label(label_1),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprAddressD+0]")}, {}, " init SRD base address (lower)"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprAddressD+1]")}, {}, " init SRD base address (upper) + other fields"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+2]")}, {Register::Value::Label("0x80000000")}, {}, ""),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in post-loop SRD"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprAddressC+0]")}, {}, " init SRD base address (lower)"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprAddressC+1]")}, {}, " init SRD base address (upper) + other fields"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+2]")}, {Register::Value::Label("0x80000000")}, {}, ""),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in post-loop SRD"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("MT1"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " <- wg1*MT1"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s62"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " CScale s62 by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s62"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " CScale s62 by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("1")}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprAddressC+0]"), Register::Value::Label("s60")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprAddressC+1]"), Register::Value::Label("s61")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s62"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Scale s62 by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s62"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Scale s62 by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("1")}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprAddressD+0]"), Register::Value::Label("s60")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprAddressD+1]"), Register::Value::Label("s61")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideCK]")}, {}, " CScale s[sgprWorkGroup2] by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideCK]")}, {}, " CScale s[sgprWorkGroup2] by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("1")}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s60")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Label("s61")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideDK]")}, {}, " Scale s[sgprWorkGroup2] by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideDK]")}, {}, " Scale s[sgprWorkGroup2] by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("1")}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s60")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("s61")}, {}, " add hi to SRD"),
Instruction::Comment(" initC: remove C-tile 0-0 from pool "),
Instruction::Comment(" initC: remove AB-tile 0-24 from pool "),
Instruction("v_accvgpr_write", {Register::Value::Label("acc0")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc1")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc2")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc3")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc4")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc5")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc6")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc7")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc8")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc9")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc10")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc11")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc12")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc13")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc14")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc15")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc16")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc17")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc18")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc19")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc20")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc21")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc22")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc23")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc24")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc25")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc26")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc27")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc28")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc29")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc30")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc31")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc32")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc33")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc34")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc35")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc36")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc37")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc38")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc39")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc40")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc41")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc42")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc43")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc44")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc45")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc46")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc47")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc48")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc49")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc50")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc51")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc52")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc53")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc54")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc55")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc56")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc57")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc58")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc59")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc60")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc61")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc62")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc63")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc64")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc65")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc66")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc67")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc68")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc69")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc70")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc71")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc72")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc73")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc74")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc75")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc76")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc77")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc78")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc79")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc80")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc81")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc82")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc83")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc84")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc85")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc86")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc87")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc88")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc89")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc90")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc91")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc92")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc93")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc94")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc95")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc96")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc97")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc98")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc99")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc100")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc101")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc102")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc103")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc104")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc105")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc106")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc107")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc108")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc109")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc110")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc111")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc112")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc113")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc114")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc115")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc116")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc117")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc118")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc119")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc120")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc121")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc122")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc123")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc124")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc125")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc126")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc127")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0")}, {}, " at last iteration?"),
Instruction::Comment(" after InitC, skip to end of prefetch last iter if numIter==0 "),
Instruction("s_cbranch_scc0", {}, {label_2}, {}, " Only branch on scc1"),
Instruction("s_getpc_B64", {Register::Value::Label("s[60:61]")}, {}, {}, " addr of next instr"),
Instruction("s_add_i32", {Register::Value::Label("s62")}, {label_13, Register::Value::Label("0x4")}, {}, " target branch offset"),
Instruction("s_add_u32", {Register::Value::Label("s60")}, {Register::Value::Label("s60"), Register::Value::Label("s62")}, {}, " add target branch offset"),
Instruction("s_addc_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s61"), Register::Value::Label("0")}, {}, " add high and carry"),
Instruction("s_setpc_b64", {Register::Value::Label("s[60:61]")}, {}, {}, " branch to PrefetchGlobalLastIterEnd_5"),
Instruction::Label(label_2),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, " lgkmcnt=-1 vmcnt=08wait for global read"),
Instruction::Comment(" local write a "),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3] offset:0")}, {}, " lwoA_0_0_0_0 = (0*LSCA) + (0*LSPA)(*MT0I+PAD) = 0"),
Instruction::Comment(" local write b "),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3] offset:0")}, {}, " lwoB_0_0_0_0 = (0*LSCB) + (0*LSPB)(*MT1J+PAD) = 0"),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+4:vgprG2LB+4+3] offset:1024")}, {}, " lwoB_0_0_1_0 = (0*LSCB) + (1*LSPB)(*MT1J+PAD) = 1024"),
Instruction::Comment(" local write swap a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local write swap b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {}, " swap Red Blk"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL] 0x1")}, {}, {}, " PGR=2 but only 1 loop"),
Instruction("s_cbranch_scc1", {}, {label_3}, {}, " PGR=2 but only 1 loop"),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LB+4:vgprG2LB+4+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_1_0"),
Instruction::Label(label_3),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-10prefetch wait for local write"),
Instruction::Comment(" Skip force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction::Comment(" local read prefetch a "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v46")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v47")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:640")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:896")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read prefetch b "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1024")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v50")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1536")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v51")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:640")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1152")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v52")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1664")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v53")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1280")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v54")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1792")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v55")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:896")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1408")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v56")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1920")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read inc a "),
Instruction::Comment(" N/A, lro->1024 "),
Instruction::Comment(" self.localReadDoCntA 1 self.localReadDoCntB 1 "),
Instruction::Comment(" local read inc b "),
Instruction::Comment(" N/A, lro->2048 "),
Instruction::Comment(" self.localReadDoCntA 1 self.localReadDoCntB 1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body0()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop(s) - Begin               "),
Instruction::Comment("****************************************"),
Instruction::Label(label_4),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x1")}, {}, " LoopCounterL < EndCounter"),
Instruction("s_cbranch_scc1", {}, {label_8}, {}, " PGR=2 but only 1 loop, toPGR1"),
Instruction("s_cmp_le_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x2")}, {}, " LoopCounterL < EndCounter"),
Instruction("s_cbranch_scc1", {}, {label_7}, {}, " do not enter LoopL"),
Instruction::Label(label_5),
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop 1/1 - Begin              "),
Instruction::Comment("****************************************"),
Instruction::Label(label_6),
Instruction::Comment(" Begin Each Unroll: Check VGPR.checkin for INT8 LW "),
Instruction::Comment(" iter 0 (reset local read pointers iteration)  (swap local read pointers iteration)  "),
Instruction::Comment("  grEndMfmaIndex:2, lwStartMfmaIndex:4, lwEndMfmaIndex:10  "),
Instruction::Comment("  numMfmaForLR:4, barrierMfmaIndex:11  "),
Instruction::Comment("  mfmaIndex:0  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=0 newLW=0 newLR=0"),
Instruction::Comment(" pack scheduling: packAIdx:2, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0]"), Register::Value::Label("v45")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+1]"), Register::Value::Label("v46")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0]"), Register::Value::Label("v49")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+1]"), Register::Value::Label("v50")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2]"), Register::Value::Label("v47")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprValuA_X0_I0+3]"), Register::Value::Label("v48")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction::Comment("  mfmaIndex:1  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2048")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v57")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2304")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2560")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v58")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2816")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4096")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v61")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4608")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" global read inc A loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprSrdA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprSrdA+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" global read inc B loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprSrdB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " gra SRD += inc(lower)"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2]"), Register::Value::Label("v51")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprValuB_X0_I0+3]"), Register::Value::Label("v52")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4]"), Register::Value::Label("v53")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprValuB_X0_I0+5]"), Register::Value::Label("v54")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment("  mfmaIndex:2  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5120")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v62")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5632")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2176")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v59")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2432")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2688")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v60")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2944")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprSrdB+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:4 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6]"), Register::Value::Label("v55")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprValuB_X0_I0+7]"), Register::Value::Label("v56")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction::Comment("  mfmaIndex:3  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4224")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v63")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4736")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5248")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v64")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5760")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+4]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4352")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v65")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4864")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction::Comment("  mfmaIndex:4  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+5]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5376")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v66")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5888")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+6]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4480")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" sched write - iter 0 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(2)")}, {}, {}, " lgkmcnt=-1 vmcnt=2wait for global read before writing to local"),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3] offset:0")}, {}, " lwoA_0_0_0_0 = (0*LSCA) + (0*LSPA)(*MT0I+PAD) = 0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction::Comment("  mfmaIndex:5  "),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v67")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4992")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+7]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5504")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v68")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:6016")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" localReadsVacancy: latencyLeft 7 "),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction::Comment("  mfmaIndex:6  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 3 "),
Instruction::Comment(" sched write - iter 0 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(2)")}, {}, {}, " lgkmcnt=-1 vmcnt=2wait for global read before writing to local"),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3] offset:0")}, {}, " lwoB_0_0_0_0 = (0*LSCB) + (0*LSPB)(*MT1J+PAD) = 0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction::Comment("  mfmaIndex:7  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 13 "),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction::Comment(" local read swap offsets a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalReadAddrA]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read swap offsets b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalReadAddrB]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read init pointers a "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" local read init pointers b "),
Instruction::Comment(" localReadInitPointers "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=-1 numReadsIterA=1 skipReadsIterA=1 readsPerIterA=8 "),
Instruction::Comment(" dataAtIterB=-1 numReadsIterB=1 skipReadsIterB=1 readsPerIterB=16 "),
Instruction::Comment(" iter 1 (swap and reset local write pointers iteration)  "),
Instruction::Comment("  grEndMfmaIndex:2, lwStartMfmaIndex:4, lwEndMfmaIndex:10  "),
Instruction::Comment("  numMfmaForLR:4, barrierMfmaIndex:11  "),
Instruction::Comment("  mfmaIndex:8  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=1 newLW=1 newLR=0"),
Instruction::Comment(" pack scheduling: packAIdx:2, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0]"), Register::Value::Label("v57")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprValuA_X1_I0+1]"), Register::Value::Label("v58")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprValuB_X1_I0+0]"), Register::Value::Label("v61")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprValuB_X1_I0+1]"), Register::Value::Label("v62")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+2]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2]"), Register::Value::Label("v59")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+3]")}, {Register::Value::Label("v[vgprValuA_X1_I0+3]"), Register::Value::Label("v60")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction::Comment("  mfmaIndex:9  "),
Instruction::Comment(" sched write - iter 1 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(2)")}, {}, {}, " lgkmcnt=-1 vmcnt=2wait for global read before writing to local"),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+4:vgprG2LB+4+3] offset:1024")}, {}, " lwoB_0_0_1_0 = (0*LSCB) + (1*LSPB)(*MT1J+PAD) = 1024"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+2]")}, {Register::Value::Label("v[vgprValuB_X1_I0+2]"), Register::Value::Label("v63")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+3]")}, {Register::Value::Label("v[vgprValuB_X1_I0+3]"), Register::Value::Label("v64")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+4]")}, {Register::Value::Label("v[vgprValuB_X1_I0+4]"), Register::Value::Label("v65")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+5]")}, {Register::Value::Label("v[vgprValuB_X1_I0+5]"), Register::Value::Label("v66")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment("  mfmaIndex:10  "),
Instruction("_buffer_load_b128", {Register::Value::Label("v[vgprG2LB+4:vgprG2LB+4+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_1_0"),
Instruction::Comment(" local write swap offsets a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local write swap offsets b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:4 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+6]")}, {Register::Value::Label("v[vgprValuB_X1_I0+6]"), Register::Value::Label("v67")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+7]")}, {Register::Value::Label("v[vgprValuB_X1_I0+7]"), Register::Value::Label("v68")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+2+0+0:vgprValuB_X1_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction::Comment("  mfmaIndex:11  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-13wait for local write"),
Instruction::Comment(" Skip force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+2+0+0:vgprValuB_X1_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction::Comment("  mfmaIndex:12  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v46")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+4+0+0:vgprValuB_X1_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction::Comment("  mfmaIndex:13  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1024")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v50")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1536")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v47")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:640")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:896")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+4+0+0:vgprValuB_X1_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction::Comment("  mfmaIndex:14  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v51")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:640")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1152")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v52")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1664")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v53")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+6+0+0:vgprValuB_X1_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction::Comment("  mfmaIndex:15  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1280")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v54")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1792")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v55")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:896")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1408")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v56")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1920")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+6+0+0:vgprValuB_X1_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=1 "),
Instruction::Comment(" dataAtIterA=0 numReadsIterA=1 skipReadsIterA=1 readsPerIterA=8 "),
Instruction::Comment(" dataAtIterB=0 numReadsIterB=1 skipReadsIterB=1 readsPerIterB=16 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop - End                    "),
Instruction::Comment("****************************************"),
Instruction::Comment(" closeLoop loopL finalLoop=1 tailLoop=0 "),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("s[sgprLoopCounterL]"), Register::Value::Label("1")}, {}, " dec counterL"),
Instruction("s_cmp_eq_i32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x2")}, {}, " counterL==2"),
Instruction("s_cbranch_scc0", {}, {label_5}, {}, " restart LoopL"),
Instruction::Label(label_7),
Instruction::Comment(" Before NLL: Check VGPR.checkin for INT8 LW "),
};
            // clang-format on
        }

        std::vector<Instruction> body1()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Ord. NoGlobalLoadLoop - Begin                                      "),
Instruction::Comment("****************************************"),
Instruction::Comment(" iter 0 (reset local read pointers iteration)  (swap local read pointers iteration)  "),
Instruction::Comment("  grEndMfmaIndex:2, lwStartMfmaIndex:4, lwEndMfmaIndex:10  "),
Instruction::Comment("  numMfmaForLR:4, barrierMfmaIndex:11  "),
Instruction::Comment("  mfmaIndex:0  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=0 newLW=0 newLR=0"),
Instruction::Comment(" pack scheduling: packAIdx:2, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0]"), Register::Value::Label("v45")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+1]"), Register::Value::Label("v46")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0]"), Register::Value::Label("v49")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+1]"), Register::Value::Label("v50")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2]"), Register::Value::Label("v47")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprValuA_X0_I0+3]"), Register::Value::Label("v48")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction::Comment("  mfmaIndex:1  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2048")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v57")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2304")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2560")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v58")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2816")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4096")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v61")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4608")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" global read inc A loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprSrdA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprSrdA+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" global read inc B loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprSrdB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " gra SRD += inc(lower)"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2]"), Register::Value::Label("v51")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprValuB_X0_I0+3]"), Register::Value::Label("v52")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4]"), Register::Value::Label("v53")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprValuB_X0_I0+5]"), Register::Value::Label("v54")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment("  mfmaIndex:2  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5120")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v62")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5632")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2176")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v59")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2432")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2688")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v60")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2944")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprSrdB+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:4 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6]"), Register::Value::Label("v55")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprValuB_X0_I0+7]"), Register::Value::Label("v56")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction::Comment("  mfmaIndex:3  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4224")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v63")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4736")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5248")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v64")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5760")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+4]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4352")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v65")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4864")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction::Comment("  mfmaIndex:4  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+5]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5376")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v66")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5888")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+6]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4480")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" sched write - iter 0 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(2)")}, {}, {}, " lgkmcnt=-1 vmcnt=2wait for global read before writing to local"),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3] offset:0")}, {}, " lwoA_0_0_0_0 = (0*LSCA) + (0*LSPA)(*MT0I+PAD) = 0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction::Comment("  mfmaIndex:5  "),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v67")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4992")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+7]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5504")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v68")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:6016")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" localReadsVacancy: latencyLeft 7 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction::Comment("  mfmaIndex:6  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 3 "),
Instruction::Comment(" sched write - iter 0 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(1)")}, {}, {}, " lgkmcnt=-1 vmcnt=1wait for global read before writing to local"),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3] offset:0")}, {}, " lwoB_0_0_0_0 = (0*LSCB) + (0*LSPB)(*MT1J+PAD) = 0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction::Comment("  mfmaIndex:7  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 13 "),
Instruction::Comment(" local read swap offsets a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalReadAddrA]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read swap offsets b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalReadAddrB]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read init pointers a "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" local read init pointers b "),
Instruction::Comment(" localReadInitPointers "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=-1 numReadsIterA=1 skipReadsIterA=1 readsPerIterA=8 "),
Instruction::Comment(" dataAtIterB=-1 numReadsIterB=1 skipReadsIterB=1 readsPerIterB=16 "),
Instruction::Comment(" iter 1 (swap and reset local write pointers iteration)  "),
Instruction::Comment("  grEndMfmaIndex:2, lwStartMfmaIndex:4, lwEndMfmaIndex:10  "),
Instruction::Comment("  numMfmaForLR:4, barrierMfmaIndex:11  "),
Instruction::Comment("  mfmaIndex:8  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=1 newLW=1 newLR=0"),
Instruction::Comment(" pack scheduling: packAIdx:2, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0]"), Register::Value::Label("v57")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprValuA_X1_I0+1]"), Register::Value::Label("v58")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprValuB_X1_I0+0]"), Register::Value::Label("v61")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprValuB_X1_I0+1]"), Register::Value::Label("v62")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+2]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2]"), Register::Value::Label("v59")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+3]")}, {Register::Value::Label("v[vgprValuA_X1_I0+3]"), Register::Value::Label("v60")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction::Comment("  mfmaIndex:9  "),
Instruction::Comment(" sched write - iter 1 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, " lgkmcnt=-1 vmcnt=0wait for global read before writing to local"),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+4:vgprG2LB+4+3] offset:1024")}, {}, " lwoB_0_0_1_0 = (0*LSCB) + (1*LSPB)(*MT1J+PAD) = 1024"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+2]")}, {Register::Value::Label("v[vgprValuB_X1_I0+2]"), Register::Value::Label("v63")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+3]")}, {Register::Value::Label("v[vgprValuB_X1_I0+3]"), Register::Value::Label("v64")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+4]")}, {Register::Value::Label("v[vgprValuB_X1_I0+4]"), Register::Value::Label("v65")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+5]")}, {Register::Value::Label("v[vgprValuB_X1_I0+5]"), Register::Value::Label("v66")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment("  mfmaIndex:10  "),
Instruction::Comment(" local write swap offsets a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local write swap offsets b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:4 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+6]")}, {Register::Value::Label("v[vgprValuB_X1_I0+6]"), Register::Value::Label("v67")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+7]")}, {Register::Value::Label("v[vgprValuB_X1_I0+7]"), Register::Value::Label("v68")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+2+0+0:vgprValuB_X1_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction::Comment("  mfmaIndex:11  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-13wait for local write"),
Instruction::Comment(" Skip force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+2+0+0:vgprValuB_X1_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction::Comment("  mfmaIndex:12  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v46")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+4+0+0:vgprValuB_X1_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction::Comment("  mfmaIndex:13  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1024")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v50")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1536")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v47")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:640")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:896")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+4+0+0:vgprValuB_X1_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction::Comment("  mfmaIndex:14  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v51")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:640")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1152")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v52")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1664")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v53")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+6+0+0:vgprValuB_X1_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction::Comment("  mfmaIndex:15  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1280")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v54")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1792")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v55")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:896")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1408")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v56")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1920")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+6+0+0:vgprValuB_X1_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=1 "),
Instruction::Comment(" dataAtIterA=0 numReadsIterA=1 skipReadsIterA=1 readsPerIterA=8 "),
Instruction::Comment(" dataAtIterB=0 numReadsIterB=1 skipReadsIterB=1 readsPerIterB=16 "),
};
            // clang-format on
        }

        std::vector<Instruction> body2()
        {
            // clang-format off
return {
Instruction::Label(label_8),
Instruction::Comment("****************************************"),
Instruction::Comment(" Opt. NoLoadLoop Without PAP - Begin                                      "),
Instruction::Comment("****************************************"),
Instruction("s_and_b32", {Register::Value::Label("s60")}, {Register::Value::Label("127"), Register::Value::Label("s[sgprSizeI]")}, {}, " s60 = s[sgprSizeI] % 128"),
Instruction("s_add_u32", {Register::Value::Label("s61")}, {Register::Value::Label("-0x1"), Register::Value::Label("s[sgprNumWorkGroups0]")}, {}, ""),
Instruction("s_cmp_ge_u32", {Register::Value::Label("s[sgprWorkGroup0]")}, {Register::Value::Label("s61")}, {}, " wg0 >= nwg0-1 ?"),
Instruction("s_cselect_b32", {Register::Value::Label("s60")}, {Register::Value::Label("s60"), Register::Value::Label("0")}, {}, " set rMT0"),
Instruction("s_and_b32", {Register::Value::Label("s60")}, {Register::Value::Label("255"), Register::Value::Label("s[sgprSizeJ]")}, {}, " s60 = s[sgprSizeJ] % 256"),
Instruction("s_add_u32", {Register::Value::Label("s61")}, {Register::Value::Label("-0x1"), Register::Value::Label("s[sgprNumWorkGroups1]")}, {}, ""),
Instruction("s_cmp_ge_u32", {Register::Value::Label("s[sgprWorkGroup1]")}, {Register::Value::Label("s61")}, {}, " wg1 >= nwg1-1"),
Instruction("s_cselect_b32", {Register::Value::Label("s60")}, {Register::Value::Label("s60"), Register::Value::Label("0")}, {}, " set rMT1"),
Instruction("s_and_b32", {Register::Value::Label("s61")}, {Register::Value::Label("15"), Register::Value::Label("s[sgprSizesSum+0]")}, {}, " s61 = s[sgprSizesSum+0] % 16"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s61")}, {Register::Value::Label("0x0")}, {}, " numIterL == 0"),
Instruction("s_cbranch_scc0", {}, {label_12}, {}, " skip if tail loop required"),
Instruction::Comment(" iter 0 (last unrolled loop) "),
Instruction::Comment("  grEndMfmaIndex:0, lwStartMfmaIndex:10, lwEndMfmaIndex:10  "),
Instruction::Comment("  numMfmaForLR:4, barrierMfmaIndex:11  "),
Instruction::Comment("  mfmaIndex:0  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=0 newLW=0 newLR=0"),
Instruction::Comment(" pack scheduling: packAIdx:2, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0]"), Register::Value::Label("v45")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+1]"), Register::Value::Label("v46")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0]"), Register::Value::Label("v49")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+1]"), Register::Value::Label("v50")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2]"), Register::Value::Label("v47")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprValuA_X0_I0+3]"), Register::Value::Label("v48")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction::Comment("  mfmaIndex:1  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2048")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v57")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2304")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2560")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v58")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2816")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4096")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v61")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4608")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2]"), Register::Value::Label("v51")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprValuB_X0_I0+3]"), Register::Value::Label("v52")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4]"), Register::Value::Label("v53")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprValuB_X0_I0+5]"), Register::Value::Label("v54")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment("  mfmaIndex:2  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5120")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v62")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5632")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2176")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v59")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2432")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2688")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v60")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2944")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:4 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6]"), Register::Value::Label("v55")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprValuB_X0_I0+7]"), Register::Value::Label("v56")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction::Comment("  mfmaIndex:3  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4224")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v63")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4736")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5248")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v64")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5760")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+4]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4352")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v65")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4864")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction::Comment("  mfmaIndex:4  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+5]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5376")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v66")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5888")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+6]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4480")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v67")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4992")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+7]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5504")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v68")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:6016")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" localReadsVacancy: latencyLeft 1 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction::Comment("  mfmaIndex:5  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 13 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction::Comment("  mfmaIndex:6  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 13 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction::Comment("  mfmaIndex:7  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 13 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=-1 numReadsIterA=1 skipReadsIterA=1 readsPerIterA=8 "),
Instruction::Comment(" dataAtIterB=-1 numReadsIterB=1 skipReadsIterB=1 readsPerIterB=16 "),
Instruction::Comment(" iter 1 (last unrolled loop) "),
Instruction::Comment("  grEndMfmaIndex:0, lwStartMfmaIndex:10, lwEndMfmaIndex:10  "),
Instruction::Comment("  numMfmaForLR:4, barrierMfmaIndex:11  "),
Instruction::Comment("  mfmaIndex:8  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=0 newLW=0 newLR=0"),
Instruction::Comment(" pack scheduling: packAIdx:2, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0]"), Register::Value::Label("v57")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprValuA_X1_I0+1]"), Register::Value::Label("v58")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprValuB_X1_I0+0]"), Register::Value::Label("v61")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprValuB_X1_I0+1]"), Register::Value::Label("v62")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+2]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2]"), Register::Value::Label("v59")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+3]")}, {Register::Value::Label("v[vgprValuA_X1_I0+3]"), Register::Value::Label("v60")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction::Comment("  mfmaIndex:9  "),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+2]")}, {Register::Value::Label("v[vgprValuB_X1_I0+2]"), Register::Value::Label("v63")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+3]")}, {Register::Value::Label("v[vgprValuB_X1_I0+3]"), Register::Value::Label("v64")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+4]")}, {Register::Value::Label("v[vgprValuB_X1_I0+4]"), Register::Value::Label("v65")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+5]")}, {Register::Value::Label("v[vgprValuB_X1_I0+5]"), Register::Value::Label("v66")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment("  mfmaIndex:10  "),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:4 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+6]")}, {Register::Value::Label("v[vgprValuB_X1_I0+6]"), Register::Value::Label("v67")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+7]")}, {Register::Value::Label("v[vgprValuB_X1_I0+7]"), Register::Value::Label("v68")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+2+0+0:vgprValuB_X1_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction::Comment("  mfmaIndex:11  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+2+0+0:vgprValuB_X1_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction::Comment("  mfmaIndex:12  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+4+0+0:vgprValuB_X1_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction::Comment("  mfmaIndex:13  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+4+0+0:vgprValuB_X1_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction::Comment("  mfmaIndex:14  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+6+0+0:vgprValuB_X1_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction::Comment("  mfmaIndex:15  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+6+0+0:vgprValuB_X1_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=0 numReadsIterA=1 skipReadsIterA=0 readsPerIterA=8 "),
Instruction::Comment(" dataAtIterB=0 numReadsIterB=1 skipReadsIterB=0 readsPerIterB=16 "),
Instruction::Comment(" Stores for OptNLL "),
};
            // clang-format on
        }

        std::vector<Instruction> body3()
        {
            // clang-format off
return {
Instruction::Label(label_9),
Instruction::Comment(" endSummation: add vgpr [0...42) to pool "),
Instruction(".set NumFullBlocks, UNDEF", {}, {}, {}, ""),
Instruction(".set WgmRemainder1, UNDEF", {}, {}, {}, ""),
Instruction(".set MagicNumberWgmRemainder1, UNDEF", {}, {}, {}, ""),
Instruction(".set ShadowLimitA, UNDEF", {}, {}, {}, ""),
Instruction(".set ShadowLimitB, UNDEF", {}, {}, {}, ""),
Instruction::Comment(" Mapping of Acc register -> C Vgpr register "),
Instruction::Comment(" computeStoreVgprs "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v4")}, {Register::Value::Label("6"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] / 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v1")}, {Register::Value::Label("1"), Register::Value::Label("v4")}, {}, " v1 = v4 / 2"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v1")}, {Register::Value::Label("0x20"), Register::Value::Label("v1")}, {}, " wave coordination offset 1"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Label("31"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] % 32"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v5"), Register::Value::Label("v1")}, {}, " coordination 1 = wave_id1 + tid1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprStrideC1J]")}, {}, "  offset 1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprStrideD1J]")}, {}, "  offset 1"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Label("1"), Register::Value::Label("v4")}, {}, " v5 = v4 % 2"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v5")}, {Register::Value::Label("0x20"), Register::Value::Label("v5")}, {}, " wave coordination offset 0"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " v0 = v[vgprSerial] % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("5"), Register::Value::Label("v0")}, {}, " v0 = v0 / 32"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x2"), Register::Value::Label("v0")}, {}, " thread0 * continuous_output"),
Instruction("_v_add_u32", {Register::Value::Label("v0")}, {Register::Value::Label("v5"), Register::Value::Label("v0")}, {}, " coordination 0 = wave_id0 + tid0"),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("128"), Register::Value::Label("s[sgprWorkGroup0]")}, {}, " wgp0 * MT0"),
Instruction("_v_add_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s52"), Register::Value::Label("v0")}, {}, " coord 0 = (tid0/MI_m)*4 + waveG0*MIB_m + MT0*SG0"),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("256"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " wgp1 * MT1"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("s52"), Register::Value::Label("v1")}, {}, " coord 1 = (tid0%MI_m) + waveG1*MIB_n + MT1*SG1"),
Instruction::Comment(" Store Remap Local Write address "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Label("7"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] / 128"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("127"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] % 128"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v13")}, {Register::Value::Label("0x20"), Register::Value::Label("v5")}, {}, " coord1 offset of LDS for each Wave"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Label("0x1f"), Register::Value::Label("v[vgprSerial]")}, {}, " coord1 offset of LDS for each thread"),
Instruction("_v_add_u32", {Register::Value::Label("v5")}, {Register::Value::Label("v13"), Register::Value::Label("v5")}, {}, " coord1 offset in MacroTile"),
Instruction("v_mov_b32", {Register::Value::Label("v11")}, {Register::Value::Label("0x84")}, {}, " lds stride = MT0 + PAD"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v9")}, {Register::Value::Label("v5"), Register::Value::Label("v11")}, {}, " lds coord1 offset = Col-id* lds stride"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v10")}, {Register::Value::Label("6"), Register::Value::Label("v4")}, {}, " v10 = v4 / 64"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("63"), Register::Value::Label("v4")}, {}, " v4 = v4 % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v12")}, {Register::Value::Label("0x5"), Register::Value::Label("v4")}, {}, " tid / matrixInstN"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v12")}, {Register::Value::Label("0x2"), Register::Value::Label("v12")}, {}, " lds coord0 offset *= 4 (each thread hold 4 element)"),
Instruction("v_mad_u32_u24", {Register::Value::Label("v12")}, {Register::Value::Label("32"), Register::Value::Label("v10"), Register::Value::Label("v12")}, {}, " coord0 += waveCoord0 * wave M shape(blockM*MiM)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v7")}, {Register::Value::Label("v9"), Register::Value::Label("v12"), Register::Value::Label("0x1")}, {}, " local write C address"),
Instruction::Comment(" Store Remap Local Read address "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Label("6"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] / 64"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] % 64"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v13")}, {Register::Value::Label("0x10"), Register::Value::Label("v5")}, {}, " coord1 offset of LDS for each Wave"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v10")}, {Register::Value::Label("0x5"), Register::Value::Label("v4")}, {}, " tid / nThreadPerCol"),
Instruction("_v_add_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v13"), Register::Value::Label("v10")}, {}, " coord1 offset in MacroTile"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v9")}, {Register::Value::Label("v6"), Register::Value::Label("v11")}, {}, " lds coord1 offset = Col-id* lds stride"),
Instruction("v_and_b32", {Register::Value::Label("v12")}, {Register::Value::Label("0x1f"), Register::Value::Label("v4")}, {}, " coord0 offset of LDS for each thread"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v12")}, {Register::Value::Label("0x2"), Register::Value::Label("v12")}, {}, " lds coord0 offset *= gwvw (each thread hold gwvw element)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v8")}, {Register::Value::Label("v9"), Register::Value::Label("v12"), Register::Value::Label("0x1")}, {}, " local read C address"),
Instruction::Comment(" Store Remap global write coord0 and coord1 "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Label("7"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] / 128"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("127"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] % 128"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v13")}, {Register::Value::Label("0x20"), Register::Value::Label("v5")}, {}, " coord1 offset of global memory for each Wave"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Label("6"), Register::Value::Label("v4")}, {}, " v5 = v4 / 64"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("63"), Register::Value::Label("v4")}, {}, " v4 = v4 % 64"),
Instruction("v_mad_u32_u24", {Register::Value::Label("v13")}, {Register::Value::Label("16"), Register::Value::Label("v5"), Register::Value::Label("v13")}, {}, " waveCoord1 += waveCoord0 * MiN / WaveGroupM"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v10")}, {Register::Value::Label("0x5"), Register::Value::Label("v4")}, {}, " tid / nThreadPerCol"),
Instruction("_v_add_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v13"), Register::Value::Label("v10")}, {}, " coord1 offset in MacroTile"),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("0x80"), Register::Value::Label("s[sgprWorkGroup0]")}, {}, " s52 = wg0*MT0"),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("s52"), Register::Value::Label("v12")}, {}, " coord0 = coord0 + wg0 * MT0"),
Instruction("s_mul_i32", {Register::Value::Label("s53")}, {Register::Value::Label("MT1"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " <- wg1*MT1"),
Instruction("_v_add_co_u32", {Register::Value::Label("v5")}, {m_context->getVCC(), Register::Value::Label("s53"), Register::Value::Label("v6")}, {}, " coord1 = tid1*VW + wg1*MT1"),
Instruction::Comment(" Skip force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, "StoreRemap Start"),
};
            // clang-format on
        }

        std::vector<Instruction> body4()
        {
            // clang-format off
return {
Instruction::Label(label_10),
Instruction::Comment(" edge=0, allocate 2 sgpr. perBatchTmpS=2 perBatchMaskS=0 perElementMaskS=0 elementsPerBatch=8 "),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #0 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (0,0,0,0:vw4); (0,1,0,0:vw4); (0,2,0,0:vw4); (0,3,0,0:vw4); (0,4,0,0:vw4); (0,5,0,0:vw4); (0,6,0,0:vw4); (0,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,7,0) "),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v9")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x1")}, {}, " optSingleColVgpr scaleToBpe: sharedAddrVgpr <- cinRowPtr + coord0, scaled by BPE. BSHERE:coord0=0, coord0Vgpr=0"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc0")}, {}, " copy acc to vreg[0]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc1")}, {}, " copy acc to vreg[1]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc2")}, {}, " copy acc to vreg[2]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc3")}, {}, " copy acc to vreg[3]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc4")}, {}, " copy acc to vreg[4]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc5")}, {}, " copy acc to vreg[5]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc6")}, {}, " copy acc to vreg[6]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc7")}, {}, " copy acc to vreg[7]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc8")}, {}, " copy acc to vreg[8]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc9")}, {}, " copy acc to vreg[9]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc10")}, {}, " copy acc to vreg[10]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc11")}, {}, " copy acc to vreg[11]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc12")}, {}, " copy acc to vreg[12]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc13")}, {}, " copy acc to vreg[13]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc14")}, {}, " copy acc to vreg[14]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc15")}, {}, " copy acc to vreg[15]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc16")}, {}, " copy acc to vreg[16]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc17")}, {}, " copy acc to vreg[17]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc18")}, {}, " copy acc to vreg[18]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc19")}, {}, " copy acc to vreg[19]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc20")}, {}, " copy acc to vreg[20]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc21")}, {}, " copy acc to vreg[21]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc22")}, {}, " copy acc to vreg[22]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc23")}, {}, " copy acc to vreg[23]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc24")}, {}, " copy acc to vreg[24]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc25")}, {}, " copy acc to vreg[25]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc26")}, {}, " copy acc to vreg[26]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc27")}, {}, " copy acc to vreg[27]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc28")}, {}, " copy acc to vreg[28]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("acc29")}, {}, " copy acc to vreg[29]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc30")}, {}, " copy acc to vreg[30]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("acc31")}, {}, " copy acc to vreg[31]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[12:13]"), Register::Value::Label("offset:0")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("v[vgprValuC+16]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v[vgprValuC+17]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v16")}, {Register::Value::Label("v[vgprValuC+16]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("v[vgprValuC+18]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v[vgprValuC+19]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v17")}, {Register::Value::Label("v[vgprValuC+18]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[16:17]"), Register::Value::Label("offset:16")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v[vgprValuC+20]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v[vgprValuC+21]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v20")}, {Register::Value::Label("v[vgprValuC+20]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("v[vgprValuC+22]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v[vgprValuC+23]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprValuC+22]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[20:21]"), Register::Value::Label("offset:32")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[24:25]"), Register::Value::Label("offset:48")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[28:29]"), Register::Value::Label("offset:128")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[32:33]"), Register::Value::Label("offset:144")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[36:37]"), Register::Value::Label("offset:160")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v[vgprValuC+48]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("v[vgprValuC+49]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprValuC+48]"), Register::Value::Label("v[vgprValuC+49]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v[vgprValuC+50]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("v[vgprValuC+51]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprValuC+50]"), Register::Value::Label("v[vgprValuC+51]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[48:49]"), Register::Value::Label("offset:176")}, {}, " storeRemap lw"),
Instruction::Comment(" Handle local read and global write "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS write"),
Instruction("s_barrier", {}, {}, {}, "wait all lds write finished"),
Instruction("_ds_load_b64", {Register::Value::Label("v[12:13]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:0")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[14:15]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:528")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[16:17]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1056")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[18:19]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1584")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[20:21]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2112")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[22:23]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2640")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[24:25]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3168")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[26:27]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3696")}, {}, " storeRemap lr"),
Instruction("v_mov_b32", {Register::Value::Label("v28")}, {Register::Value::Label("v6")}, {}, " coord1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(7)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("2")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(6)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[14:15]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("4")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[16:17]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("6")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[18:19]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("8")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[20:21]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("10")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(2)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[22:23]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("12")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("14")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[26:27]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("s_barrier", {}, {}, {}, "wait all lds read finished"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body5()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #1 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (1,0,0,0:vw4); (1,1,0,0:vw4); (1,2,0,0:vw4); (1,3,0,0:vw4); (1,4,0,0:vw4); (1,5,0,0:vw4); (1,6,0,0:vw4); (1,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,7,0) "),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc32")}, {}, " copy acc to vreg[32]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc33")}, {}, " copy acc to vreg[33]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc34")}, {}, " copy acc to vreg[34]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc35")}, {}, " copy acc to vreg[35]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc36")}, {}, " copy acc to vreg[36]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc37")}, {}, " copy acc to vreg[37]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc38")}, {}, " copy acc to vreg[38]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc39")}, {}, " copy acc to vreg[39]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc40")}, {}, " copy acc to vreg[40]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc41")}, {}, " copy acc to vreg[41]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc42")}, {}, " copy acc to vreg[42]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc43")}, {}, " copy acc to vreg[43]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc44")}, {}, " copy acc to vreg[44]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc45")}, {}, " copy acc to vreg[45]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc46")}, {}, " copy acc to vreg[46]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc47")}, {}, " copy acc to vreg[47]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc48")}, {}, " copy acc to vreg[48]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc49")}, {}, " copy acc to vreg[49]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc50")}, {}, " copy acc to vreg[50]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc51")}, {}, " copy acc to vreg[51]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc52")}, {}, " copy acc to vreg[52]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc53")}, {}, " copy acc to vreg[53]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc54")}, {}, " copy acc to vreg[54]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc55")}, {}, " copy acc to vreg[55]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc56")}, {}, " copy acc to vreg[56]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc57")}, {}, " copy acc to vreg[57]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc58")}, {}, " copy acc to vreg[58]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc59")}, {}, " copy acc to vreg[59]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc60")}, {}, " copy acc to vreg[60]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("acc61")}, {}, " copy acc to vreg[61]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc62")}, {}, " copy acc to vreg[62]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("acc63")}, {}, " copy acc to vreg[63]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction::Comment(" StoreRemap: shift coord1 address "),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Label("128")}, {}, " scale StrideD *= numRows(64) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s52")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("0")}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("v_mov_b32", {Register::Value::Label("v10")}, {Register::Value::Label("64")}, {}, " set shift rows"),
Instruction("_v_add_u32", {Register::Value::Label("v5")}, {Register::Value::Label("v5"), Register::Value::Label("v10")}, {}, " shift storeRemap coord1"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[12:13]"), Register::Value::Label("offset:0")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("v[vgprValuC+16]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v[vgprValuC+17]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v16")}, {Register::Value::Label("v[vgprValuC+16]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("v[vgprValuC+18]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v[vgprValuC+19]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v17")}, {Register::Value::Label("v[vgprValuC+18]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[16:17]"), Register::Value::Label("offset:16")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v[vgprValuC+20]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v[vgprValuC+21]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v20")}, {Register::Value::Label("v[vgprValuC+20]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("v[vgprValuC+22]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v[vgprValuC+23]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprValuC+22]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[20:21]"), Register::Value::Label("offset:32")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[24:25]"), Register::Value::Label("offset:48")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[28:29]"), Register::Value::Label("offset:128")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[32:33]"), Register::Value::Label("offset:144")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[36:37]"), Register::Value::Label("offset:160")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v[vgprValuC+48]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("v[vgprValuC+49]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprValuC+48]"), Register::Value::Label("v[vgprValuC+49]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v[vgprValuC+50]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("v[vgprValuC+51]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprValuC+50]"), Register::Value::Label("v[vgprValuC+51]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[48:49]"), Register::Value::Label("offset:176")}, {}, " storeRemap lw"),
Instruction::Comment(" Handle local read and global write "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS write"),
Instruction("s_barrier", {}, {}, {}, "wait all lds write finished"),
Instruction("_ds_load_b64", {Register::Value::Label("v[12:13]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:0")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[14:15]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:528")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[16:17]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1056")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[18:19]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1584")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[20:21]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2112")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[22:23]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2640")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[24:25]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3168")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[26:27]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3696")}, {}, " storeRemap lr"),
Instruction("v_mov_b32", {Register::Value::Label("v28")}, {Register::Value::Label("v6")}, {}, " coord1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(7)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("2")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(6)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[14:15]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("4")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[16:17]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("6")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[18:19]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("8")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[20:21]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("10")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(2)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[22:23]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("12")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("14")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[26:27]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("s_barrier", {}, {}, {}, "wait all lds read finished"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body6()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #2 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (2,0,0,0:vw4); (2,1,0,0:vw4); (2,2,0,0:vw4); (2,3,0,0:vw4); (2,4,0,0:vw4); (2,5,0,0:vw4); (2,6,0,0:vw4); (2,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,7,0) "),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc64")}, {}, " copy acc to vreg[64]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc65")}, {}, " copy acc to vreg[65]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc66")}, {}, " copy acc to vreg[66]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc67")}, {}, " copy acc to vreg[67]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc68")}, {}, " copy acc to vreg[68]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc69")}, {}, " copy acc to vreg[69]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc70")}, {}, " copy acc to vreg[70]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc71")}, {}, " copy acc to vreg[71]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc72")}, {}, " copy acc to vreg[72]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc73")}, {}, " copy acc to vreg[73]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc74")}, {}, " copy acc to vreg[74]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc75")}, {}, " copy acc to vreg[75]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc76")}, {}, " copy acc to vreg[76]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc77")}, {}, " copy acc to vreg[77]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc78")}, {}, " copy acc to vreg[78]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc79")}, {}, " copy acc to vreg[79]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc80")}, {}, " copy acc to vreg[80]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc81")}, {}, " copy acc to vreg[81]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc82")}, {}, " copy acc to vreg[82]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc83")}, {}, " copy acc to vreg[83]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc84")}, {}, " copy acc to vreg[84]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc85")}, {}, " copy acc to vreg[85]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc86")}, {}, " copy acc to vreg[86]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc87")}, {}, " copy acc to vreg[87]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc88")}, {}, " copy acc to vreg[88]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc89")}, {}, " copy acc to vreg[89]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc90")}, {}, " copy acc to vreg[90]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc91")}, {}, " copy acc to vreg[91]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc92")}, {}, " copy acc to vreg[92]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("acc93")}, {}, " copy acc to vreg[93]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc94")}, {}, " copy acc to vreg[94]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("acc95")}, {}, " copy acc to vreg[95]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction::Comment(" StoreRemap: shift coord1 address "),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Label("128")}, {}, " scale StrideD *= numRows(64) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s52")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("0")}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("v_mov_b32", {Register::Value::Label("v10")}, {Register::Value::Label("64")}, {}, " set shift rows"),
Instruction("_v_add_u32", {Register::Value::Label("v5")}, {Register::Value::Label("v5"), Register::Value::Label("v10")}, {}, " shift storeRemap coord1"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[12:13]"), Register::Value::Label("offset:0")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("v[vgprValuC+16]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v[vgprValuC+17]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v16")}, {Register::Value::Label("v[vgprValuC+16]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("v[vgprValuC+18]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v[vgprValuC+19]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v17")}, {Register::Value::Label("v[vgprValuC+18]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[16:17]"), Register::Value::Label("offset:16")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v[vgprValuC+20]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v[vgprValuC+21]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v20")}, {Register::Value::Label("v[vgprValuC+20]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("v[vgprValuC+22]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v[vgprValuC+23]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprValuC+22]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[20:21]"), Register::Value::Label("offset:32")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[24:25]"), Register::Value::Label("offset:48")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[28:29]"), Register::Value::Label("offset:128")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[32:33]"), Register::Value::Label("offset:144")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[36:37]"), Register::Value::Label("offset:160")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v[vgprValuC+48]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("v[vgprValuC+49]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprValuC+48]"), Register::Value::Label("v[vgprValuC+49]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v[vgprValuC+50]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("v[vgprValuC+51]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprValuC+50]"), Register::Value::Label("v[vgprValuC+51]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[48:49]"), Register::Value::Label("offset:176")}, {}, " storeRemap lw"),
Instruction::Comment(" Handle local read and global write "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS write"),
Instruction("s_barrier", {}, {}, {}, "wait all lds write finished"),
Instruction("_ds_load_b64", {Register::Value::Label("v[12:13]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:0")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[14:15]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:528")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[16:17]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1056")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[18:19]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1584")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[20:21]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2112")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[22:23]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2640")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[24:25]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3168")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[26:27]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3696")}, {}, " storeRemap lr"),
Instruction("v_mov_b32", {Register::Value::Label("v28")}, {Register::Value::Label("v6")}, {}, " coord1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(7)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("2")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(6)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[14:15]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("4")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[16:17]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("6")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[18:19]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("8")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[20:21]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("10")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(2)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[22:23]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("12")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("14")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[26:27]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("s_barrier", {}, {}, {}, "wait all lds read finished"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body7()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #3 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (3,0,0,0:vw4); (3,1,0,0:vw4); (3,2,0,0:vw4); (3,3,0,0:vw4); (3,4,0,0:vw4); (3,5,0,0:vw4); (3,6,0,0:vw4); (3,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,7,0) "),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc96")}, {}, " copy acc to vreg[96]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc97")}, {}, " copy acc to vreg[97]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc98")}, {}, " copy acc to vreg[98]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc99")}, {}, " copy acc to vreg[99]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc100")}, {}, " copy acc to vreg[100]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc101")}, {}, " copy acc to vreg[101]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc102")}, {}, " copy acc to vreg[102]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc103")}, {}, " copy acc to vreg[103]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc104")}, {}, " copy acc to vreg[104]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc105")}, {}, " copy acc to vreg[105]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc106")}, {}, " copy acc to vreg[106]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc107")}, {}, " copy acc to vreg[107]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc108")}, {}, " copy acc to vreg[108]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc109")}, {}, " copy acc to vreg[109]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc110")}, {}, " copy acc to vreg[110]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc111")}, {}, " copy acc to vreg[111]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc112")}, {}, " copy acc to vreg[112]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc113")}, {}, " copy acc to vreg[113]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc114")}, {}, " copy acc to vreg[114]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc115")}, {}, " copy acc to vreg[115]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc116")}, {}, " copy acc to vreg[116]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc117")}, {}, " copy acc to vreg[117]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc118")}, {}, " copy acc to vreg[118]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc119")}, {}, " copy acc to vreg[119]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc120")}, {}, " copy acc to vreg[120]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc121")}, {}, " copy acc to vreg[121]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc122")}, {}, " copy acc to vreg[122]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc123")}, {}, " copy acc to vreg[123]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc124")}, {}, " copy acc to vreg[124]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("acc125")}, {}, " copy acc to vreg[125]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc126")}, {}, " copy acc to vreg[126]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("acc127")}, {}, " copy acc to vreg[127]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction::Comment(" StoreRemap: shift coord1 address "),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Label("128")}, {}, " scale StrideD *= numRows(64) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s52")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("0")}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("v_mov_b32", {Register::Value::Label("v10")}, {Register::Value::Label("64")}, {}, " set shift rows"),
Instruction("_v_add_u32", {Register::Value::Label("v5")}, {Register::Value::Label("v5"), Register::Value::Label("v10")}, {}, " shift storeRemap coord1"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[12:13]"), Register::Value::Label("offset:0")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("v[vgprValuC+16]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v[vgprValuC+17]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v16")}, {Register::Value::Label("v[vgprValuC+16]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("v[vgprValuC+18]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v[vgprValuC+19]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v17")}, {Register::Value::Label("v[vgprValuC+18]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[16:17]"), Register::Value::Label("offset:16")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v[vgprValuC+20]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v[vgprValuC+21]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v20")}, {Register::Value::Label("v[vgprValuC+20]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("v[vgprValuC+22]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v[vgprValuC+23]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprValuC+22]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[20:21]"), Register::Value::Label("offset:32")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[24:25]"), Register::Value::Label("offset:48")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[28:29]"), Register::Value::Label("offset:128")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[32:33]"), Register::Value::Label("offset:144")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[36:37]"), Register::Value::Label("offset:160")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v[vgprValuC+48]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("v[vgprValuC+49]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprValuC+48]"), Register::Value::Label("v[vgprValuC+49]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v[vgprValuC+50]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("v[vgprValuC+51]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprValuC+50]"), Register::Value::Label("v[vgprValuC+51]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[48:49]"), Register::Value::Label("offset:176")}, {}, " storeRemap lw"),
Instruction::Comment(" Handle local read and global write "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS write"),
Instruction("s_barrier", {}, {}, {}, "wait all lds write finished"),
Instruction("_ds_load_b64", {Register::Value::Label("v[12:13]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:0")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[14:15]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:528")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[16:17]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1056")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[18:19]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1584")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[20:21]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2112")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[22:23]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2640")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[24:25]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3168")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[26:27]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3696")}, {}, " storeRemap lr"),
Instruction("v_mov_b32", {Register::Value::Label("v28")}, {Register::Value::Label("v6")}, {}, " coord1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(7)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("2")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(6)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[14:15]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("4")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[16:17]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("6")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[18:19]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("8")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[20:21]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("10")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(2)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[22:23]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("12")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("14")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[26:27]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("s_barrier", {}, {}, {}, "wait all lds read finished"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction("s_branch", {}, {label_11}, {}, " jump to end"),
Instruction::Label(label_11),
Instruction("s_endpgm", {}, {}, {}, " Kernel End"),
};
            // clang-format on
        }

        std::vector<Instruction> body8()
        {
            // clang-format off
return {
Instruction::Label(label_12),
Instruction::Comment("****************************************"),
Instruction::Comment(" Ord. NoLoadLoop - Begin                                      "),
Instruction::Comment("****************************************"),
Instruction::Comment(" iter 0 (last unrolled loop) "),
Instruction::Comment("  grEndMfmaIndex:0, lwStartMfmaIndex:10, lwEndMfmaIndex:10  "),
Instruction::Comment("  numMfmaForLR:4, barrierMfmaIndex:11  "),
Instruction::Comment("  mfmaIndex:0  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=0 newLW=0 newLR=0"),
Instruction::Comment(" pack scheduling: packAIdx:2, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0]"), Register::Value::Label("v45")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+1]"), Register::Value::Label("v46")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0]"), Register::Value::Label("v49")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+1]"), Register::Value::Label("v50")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2]"), Register::Value::Label("v47")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprValuA_X0_I0+3]"), Register::Value::Label("v48")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction::Comment("  mfmaIndex:1  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2048")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v57")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2304")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2560")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v58")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2816")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4096")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v61")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4608")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2]"), Register::Value::Label("v51")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprValuB_X0_I0+3]"), Register::Value::Label("v52")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4]"), Register::Value::Label("v53")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprValuB_X0_I0+5]"), Register::Value::Label("v54")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment("  mfmaIndex:2  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5120")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v62")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5632")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2176")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v59")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2432")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2688")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v60")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2944")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:4 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6]"), Register::Value::Label("v55")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprValuB_X0_I0+7]"), Register::Value::Label("v56")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction::Comment("  mfmaIndex:3  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4224")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v63")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4736")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5248")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v64")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5760")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+4]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4352")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v65")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4864")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction::Comment("  mfmaIndex:4  "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+5]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5376")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v66")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5888")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=2 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+6]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4480")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v67")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:4992")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+7]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:5504")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v68")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:6016")}, {}, " L -> Reg lro=2048 swapByteOffset=0 ti=64 vIdx=3 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" localReadsVacancy: latencyLeft 1 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction::Comment("  mfmaIndex:5  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 13 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction::Comment("  mfmaIndex:6  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 13 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction::Comment("  mfmaIndex:7  "),
Instruction::Comment(" localReadsVacancy: latencyLeft 13 "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=-1 numReadsIterA=1 skipReadsIterA=1 readsPerIterA=8 "),
Instruction::Comment(" dataAtIterB=-1 numReadsIterB=1 skipReadsIterB=1 readsPerIterB=16 "),
Instruction::Comment(" iter 1 (last unrolled loop) "),
Instruction::Comment("  grEndMfmaIndex:0, lwStartMfmaIndex:10, lwEndMfmaIndex:10  "),
Instruction::Comment("  numMfmaForLR:4, barrierMfmaIndex:11  "),
Instruction::Comment("  mfmaIndex:8  "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=0 newLW=0 newLR=0"),
Instruction::Comment(" pack scheduling: packAIdx:2, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0]"), Register::Value::Label("v57")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprValuA_X1_I0+1]"), Register::Value::Label("v58")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprValuB_X1_I0+0]"), Register::Value::Label("v61")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprValuB_X1_I0+1]"), Register::Value::Label("v62")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+2]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2]"), Register::Value::Label("v59")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+3]")}, {Register::Value::Label("v[vgprValuA_X1_I0+3]"), Register::Value::Label("v60")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction::Comment("  mfmaIndex:9  "),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:2 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+2]")}, {Register::Value::Label("v[vgprValuB_X1_I0+2]"), Register::Value::Label("v63")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+3]")}, {Register::Value::Label("v[vgprValuB_X1_I0+3]"), Register::Value::Label("v64")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+4]")}, {Register::Value::Label("v[vgprValuB_X1_I0+4]"), Register::Value::Label("v65")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+5]")}, {Register::Value::Label("v[vgprValuB_X1_I0+5]"), Register::Value::Label("v66")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment("  mfmaIndex:10  "),
Instruction::Comment(" pack scheduling: packAIdx:4, packBIdx:4 "),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+6]")}, {Register::Value::Label("v[vgprValuB_X1_I0+6]"), Register::Value::Label("v67")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+7]")}, {Register::Value::Label("v[vgprValuB_X1_I0+7]"), Register::Value::Label("v68")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+2+0+0:vgprValuB_X1_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction::Comment("  mfmaIndex:11  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+2+0+0:vgprValuB_X1_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction::Comment("  mfmaIndex:12  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+4+0+0:vgprValuB_X1_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction::Comment("  mfmaIndex:13  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+4+0+0:vgprValuB_X1_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction::Comment("  mfmaIndex:14  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+6+0+0:vgprValuB_X1_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction::Comment("  mfmaIndex:15  "),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+2+0+0:vgprValuA_X1_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+6+0+0:vgprValuB_X1_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=0 numReadsIterA=1 skipReadsIterA=0 readsPerIterA=8 "),
Instruction::Comment(" dataAtIterB=0 numReadsIterB=1 skipReadsIterB=0 readsPerIterB=16 "),
Instruction::Label(label_13),
Instruction::Comment("****************************************"),
Instruction::Comment(" Tail Loop                              "),
Instruction::Comment("****************************************"),
Instruction::Comment(" local write reset offsets a "),
Instruction("v_and_b32", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("0xf03fff"), Register::Value::Label("v[vgprLocalWriteAddrA]")}, {}, " reset to Red"),
Instruction::Comment(" local write reset offsets b "),
Instruction("v_and_b32", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("0xf03fff"), Register::Value::Label("v[vgprLocalWriteAddrB]")}, {}, " reset to Red"),
Instruction::Comment("numIterL = (((sizeL % LOCAL_DEPTHU) + LOCAL_SPLITU - 1) / LOCAL_SPLITU)"),
Instruction("s_and_b32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("15"), Register::Value::Label("s[sgprSizesSum+0]")}, {}, " s[sgprLoopCounterL] = s[sgprSizesSum+0] % 16"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x0")}, {}, " numIterL == 0"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprOrigLoopCounter]")}, {Register::Value::Label("0")}, {}, " repurpose to count each localRead increment"),
Instruction("s_cbranch_scc1", {}, {label_16}, {}, " skip to end of tail loop b/c numIter==0"),
Instruction::Comment(" Update M0 for DTLDS "),
Instruction::Comment(" global read a "),
Instruction::Comment(" g2l=0, load component 0 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LA+0+0]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=0, load component 1 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:2")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LA+0+0]")}, {Register::Value::Label("v[vgprG2LA+0+0]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=0, load component 2 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LA+0+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:4")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=0, load component 3 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:6")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LA+0+1]")}, {Register::Value::Label("v[vgprG2LA+0+1]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=0, load component 4 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LA+0+2]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:8")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=0, load component 5 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:10")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LA+0+2]")}, {Register::Value::Label("v[vgprG2LA+0+2]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=0, load component 6 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LA+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:12")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=0, load component 7 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:14")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LA+0+3]")}, {Register::Value::Label("v[vgprG2LA+0+3]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" Update M0 for DTLDS "),
Instruction::Comment(" global read b "),
Instruction::Comment(" g2l=0, load component 0 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LB+0+0]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=0, load component 1 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:2")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LB+0+0]")}, {Register::Value::Label("v[vgprG2LB+0+0]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=0, load component 2 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LB+0+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:4")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=0, load component 3 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:6")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LB+0+1]")}, {Register::Value::Label("v[vgprG2LB+0+1]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=0, load component 4 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LB+0+2]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:8")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=0, load component 5 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:10")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LB+0+2]")}, {Register::Value::Label("v[vgprG2LB+0+2]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=0, load component 6 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LB+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:12")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=0, load component 7 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:14")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LB+0+3]")}, {Register::Value::Label("v[vgprG2LB+0+3]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=4, load component 0 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LB+4+0]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=4, load component 1 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:2")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LB+4+0]")}, {Register::Value::Label("v[vgprG2LB+4+0]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=4, load component 2 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LB+4+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:4")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=4, load component 3 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:6")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LB+4+1]")}, {Register::Value::Label("v[vgprG2LB+4+1]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=4, load component 4 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LB+4+2]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:8")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=4, load component 5 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:10")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LB+4+2]")}, {Register::Value::Label("v[vgprG2LB+4+2]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction::Comment(" g2l=4, load component 6 "),
Instruction("_buffer_load_d16_b16", {Register::Value::Label("v[vgprG2LB+4+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:12")}, {}, " load one buffer value"),
Instruction::Comment(" g2l=4, load component 7 "),
Instruction("_buffer_load_d16_hi_b16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+1]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:14")}, {}, " load one buffer value"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, ""),
Instruction("v_or_b32", {Register::Value::Label("v[vgprG2LB+4+3]")}, {Register::Value::Label("v[vgprG2LB+4+3]"), Register::Value::Label("v45")}, {}, " HasEccHalf: pack"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, " lgkmcnt=-1 vmcnt=02wait for global read"),
Instruction::Comment(" Skip force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction::Comment(" local write a "),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3] offset:0")}, {}, " lwoA_0_0_0_0 = (0*LSCA) + (0*LSPA)(*MT0I+PAD) = 0"),
Instruction::Comment(" local write b "),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3] offset:0")}, {}, " lwoB_0_0_0_0 = (0*LSCB) + (0*LSPB)(*MT1J+PAD) = 0"),
Instruction("_ds_store_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+4:vgprG2LB+4+3] offset:1024")}, {}, " lwoB_0_0_1_0 = (0*LSCB) + (1*LSPB)(*MT1J+PAD) = 1024"),
Instruction::Comment(" Recalc local read offsets "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-15wait for local write"),
Instruction::Comment(" Skip force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction::Comment(" local read reset offsets a "),
Instruction::Comment(" localReadResetOffsets "),
Instruction::Comment(" handled internally "),
Instruction("v_and_b32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {Register::Value::Label("0x3fff"), Register::Value::Label("v[vgprLocalReadAddrA]")}, {}, " reset Red,Blk -> Red"),
Instruction::Comment(" local read reset offsets b "),
Instruction::Comment(" localReadResetOffsets "),
Instruction::Comment(" handled internally "),
Instruction("v_and_b32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {Register::Value::Label("0x3fff"), Register::Value::Label("v[vgprLocalReadAddrB]")}, {}, " reset Red,Blk -> Red"),
Instruction::Comment(" local read init pointers a "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" local read init pointers b "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" tail loop: macs "),
Instruction::Label(label_14),
};
            // clang-format on
        }

        std::vector<Instruction> body9()
        {
            // clang-format off
return {
Instruction::Comment(" local read a "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v46")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v47")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:640")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:896")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read b "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1024")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v50")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1536")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v51")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:640")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1152")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v52")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1664")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v53")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1280")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v54")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1792")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=2 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v55")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:896")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1408")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v56")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1920")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=3 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read inc a "),
Instruction("s_mov_b32", {Register::Value::Label("s55")}, {Register::Value::Label("0x800")}, {}, " inc"),
Instruction("_v_add_co_u32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {m_context->getVCC(), Register::Value::Label("s55"), Register::Value::Label("v[vgprLocalReadAddrA]")}, {}, " lrA += 2048 (LSU*(MT+PAD)*bpe)"),
Instruction::Comment(" local read inc b "),
Instruction("s_mov_b32", {Register::Value::Label("s55")}, {Register::Value::Label("0x1000")}, {}, " inc"),
Instruction("_v_add_co_u32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {m_context->getVCC(), Register::Value::Label("s55"), Register::Value::Label("v[vgprLocalReadAddrB]")}, {}, " lrB += 4096 (LSU*(MT+PAD)*bpe)"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-14wait for local read"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0]"), Register::Value::Label("v45")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+1]"), Register::Value::Label("v46")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2]"), Register::Value::Label("v47")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+3]")}, {Register::Value::Label("v[vgprValuA_X0_I0+3]"), Register::Value::Label("v48")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0]"), Register::Value::Label("v49")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+1]"), Register::Value::Label("v50")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2]"), Register::Value::Label("v51")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+3]")}, {Register::Value::Label("v[vgprValuB_X0_I0+3]"), Register::Value::Label("v52")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4]"), Register::Value::Label("v53")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+5]")}, {Register::Value::Label("v[vgprValuB_X0_I0+5]"), Register::Value::Label("v54")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6]"), Register::Value::Label("v55")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+7]")}, {Register::Value::Label("v[vgprValuB_X0_I0+7]"), Register::Value::Label("v56")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_and_b32", {Register::Value::Label("v45")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " v45 = v[vgprSerial] % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v45")}, {Register::Value::Label("5"), Register::Value::Label("v45")}, {}, " v45 = v45 / 32"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v45")}, {Register::Value::Label("0x2"), Register::Value::Label("v45")}, {}, " v45 = v45 * 4"),
Instruction("v_cmp_ge_i32", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("v45"), Register::Value::Label("s[sgprLoopCounterL]")}, {}, " check K index >= Size L"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0+0]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2+0]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4+0]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6+0]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+1]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+1]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0+1]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2+1]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4+1]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6+1]"), Register::Value::Label("0x0"), Register::Value::Label("s[60:61]")}, {}, " set 0 if K_idx >= sizeL"),
Instruction("_v_sub_u32", {Register::Value::Label("v45")}, {Register::Value::Label("s[sgprLoopCounterL]"), Register::Value::Label("v45")}, {}, " get distance between size and k index"),
Instruction("v_cmp_lt_i32", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("v45"), Register::Value::Label("4")}, {}, " set partial 0 if distance less than input per thread"),
Instruction("s_and_b32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprLoopCounterL]"), Register::Value::Label("3")}, {}, " get inputs for edge thread"),
Instruction("s_sub_u32", {Register::Value::Label("s62")}, {Register::Value::Label("4"), Register::Value::Label("s62")}, {}, " use shift to fill 0 for outside element"),
Instruction("s_lshl_b32", {Register::Value::Label("s62")}, {Register::Value::Label("s62"), Register::Value::Label("4")}, {}, " use shift to fill 0 for outside element"),
Instruction("v_lshlrev_b64", {Register::Value::Label("v[46:47]")}, {Register::Value::Label("s62"), Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0+0]"), Register::Value::Label("v46"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v47"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_lshlrev_b64", {Register::Value::Label("v[46:47]")}, {Register::Value::Label("s62"), Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0+0]"), Register::Value::Label("v46"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v47"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_lshlrev_b64", {Register::Value::Label("v[46:47]")}, {Register::Value::Label("s62"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0+0+0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0+0+0+0]"), Register::Value::Label("v46"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0+0+0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("v47"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_lshlrev_b64", {Register::Value::Label("v[46:47]")}, {Register::Value::Label("s62"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2+0+0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2+0+0+0]"), Register::Value::Label("v46"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+2+0+0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("v47"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_lshlrev_b64", {Register::Value::Label("v[46:47]")}, {Register::Value::Label("s62"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4+0+0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4+0+0+0]"), Register::Value::Label("v46"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+4+0+0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("v47"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_lshlrev_b64", {Register::Value::Label("v[46:47]")}, {Register::Value::Label("s62"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6+0+0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6+0+0+0]"), Register::Value::Label("v46"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("v_cndmask_b32", {Register::Value::Label("v[vgprValuB_X0_I0+6+0+0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("v47"), Register::Value::Label("s[60:61]")}, {}, ""),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[32+0:47+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[32:47]")}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[48+0:63+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+2+0+0:vgprValuB_X0_I0+2+0+0+1]"), Register::Value::Label("a[48:63]")}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[64+0:79+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[64:79]")}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[80+0:95+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+4+0+0:vgprValuB_X0_I0+4+0+0+1]"), Register::Value::Label("a[80:95]")}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[96+0:111+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[96:111]")}, {}, ""),
Instruction("v_mfma_f32_32x32x8f16", {Register::Value::Label("a[112+0:127+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+2+0+0:vgprValuA_X0_I0+2+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+6+0+0:vgprValuB_X0_I0+6+0+0+1]"), Register::Value::Label("a[112:127]")}, {}, ""),
Instruction::Comment(" closeLoop loopL finalLoop=1 tailLoop=1 "),
Instruction("s_sub_i32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("s[sgprLoopCounterL]"), Register::Value::Label("0x8")}, {}, " dec counterL (tailLoop)"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprOrigLoopCounter]")}, {Register::Value::Label("s[sgprOrigLoopCounter]"), Register::Value::Label("0x8")}, {}, " inc counterL"),
Instruction("s_cmp_le_i32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x0")}, {}, " counterL<=0"),
Instruction("s_cbranch_scc0", {}, {label_14}, {}, " restart LoopL"),
Instruction::Label(label_15),
Instruction::Label(label_16),
Instruction::Label(label_17),
Instruction::Comment(" endSummation: add vgpr [0...42) to pool "),
Instruction(".set NumFullBlocks, UNDEF", {}, {}, {}, ""),
Instruction(".set WgmRemainder1, UNDEF", {}, {}, {}, ""),
Instruction(".set MagicNumberWgmRemainder1, UNDEF", {}, {}, {}, ""),
Instruction(".set ShadowLimitA, UNDEF", {}, {}, {}, ""),
Instruction(".set ShadowLimitB, UNDEF", {}, {}, {}, ""),
Instruction::Comment(" Mapping of Acc register -> C Vgpr register "),
Instruction::Comment(" shift vector components d1 "),
Instruction::Comment(" not-LocalSplitU: global write indices "),
Instruction::Comment(" computeStoreVgprs "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v4")}, {Register::Value::Label("6"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] / 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v1")}, {Register::Value::Label("1"), Register::Value::Label("v4")}, {}, " v1 = v4 / 2"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v1")}, {Register::Value::Label("0x20"), Register::Value::Label("v1")}, {}, " wave coordination offset 1"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Label("31"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] % 32"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v5"), Register::Value::Label("v1")}, {}, " coordination 1 = wave_id1 + tid1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprStrideC1J]")}, {}, "  offset 1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprStrideD1J]")}, {}, "  offset 1"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Label("1"), Register::Value::Label("v4")}, {}, " v5 = v4 % 2"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v5")}, {Register::Value::Label("0x20"), Register::Value::Label("v5")}, {}, " wave coordination offset 0"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " v0 = v[vgprSerial] % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("5"), Register::Value::Label("v0")}, {}, " v0 = v0 / 32"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x2"), Register::Value::Label("v0")}, {}, " thread0 * continuous_output"),
Instruction("_v_add_u32", {Register::Value::Label("v0")}, {Register::Value::Label("v5"), Register::Value::Label("v0")}, {}, " coordination 0 = wave_id0 + tid0"),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("128"), Register::Value::Label("s[sgprWorkGroup0]")}, {}, " wgp0 * MT0"),
Instruction("_v_add_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s52"), Register::Value::Label("v0")}, {}, " coord 0 = (tid0/MI_m)*4 + waveG0*MIB_m + MT0*SG0"),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("256"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " wgp1 * MT1"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("s52"), Register::Value::Label("v1")}, {}, " coord 1 = (tid0%MI_m) + waveG1*MIB_n + MT1*SG1"),
Instruction::Comment(" Store Remap Local Write address "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Label("7"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] / 128"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("127"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] % 128"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v13")}, {Register::Value::Label("0x20"), Register::Value::Label("v5")}, {}, " coord1 offset of LDS for each Wave"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Label("0x1f"), Register::Value::Label("v[vgprSerial]")}, {}, " coord1 offset of LDS for each thread"),
Instruction("_v_add_u32", {Register::Value::Label("v5")}, {Register::Value::Label("v13"), Register::Value::Label("v5")}, {}, " coord1 offset in MacroTile"),
Instruction("v_mov_b32", {Register::Value::Label("v11")}, {Register::Value::Label("0x84")}, {}, " lds stride = MT0 + PAD"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v9")}, {Register::Value::Label("v5"), Register::Value::Label("v11")}, {}, " lds coord1 offset = Col-id* lds stride"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v10")}, {Register::Value::Label("6"), Register::Value::Label("v4")}, {}, " v10 = v4 / 64"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("63"), Register::Value::Label("v4")}, {}, " v4 = v4 % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v12")}, {Register::Value::Label("0x5"), Register::Value::Label("v4")}, {}, " tid / matrixInstN"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v12")}, {Register::Value::Label("0x2"), Register::Value::Label("v12")}, {}, " lds coord0 offset *= 4 (each thread hold 4 element)"),
Instruction("v_mad_u32_u24", {Register::Value::Label("v12")}, {Register::Value::Label("32"), Register::Value::Label("v10"), Register::Value::Label("v12")}, {}, " coord0 += waveCoord0 * wave M shape(blockM*MiM)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v7")}, {Register::Value::Label("v9"), Register::Value::Label("v12"), Register::Value::Label("0x1")}, {}, " local write C address"),
Instruction::Comment(" Store Remap Local Read address "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Label("6"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] / 64"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] % 64"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v13")}, {Register::Value::Label("0x10"), Register::Value::Label("v5")}, {}, " coord1 offset of LDS for each Wave"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v10")}, {Register::Value::Label("0x5"), Register::Value::Label("v4")}, {}, " tid / nThreadPerCol"),
Instruction("_v_add_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v13"), Register::Value::Label("v10")}, {}, " coord1 offset in MacroTile"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v9")}, {Register::Value::Label("v6"), Register::Value::Label("v11")}, {}, " lds coord1 offset = Col-id* lds stride"),
Instruction("v_and_b32", {Register::Value::Label("v12")}, {Register::Value::Label("0x1f"), Register::Value::Label("v4")}, {}, " coord0 offset of LDS for each thread"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v12")}, {Register::Value::Label("0x2"), Register::Value::Label("v12")}, {}, " lds coord0 offset *= gwvw (each thread hold gwvw element)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v8")}, {Register::Value::Label("v9"), Register::Value::Label("v12"), Register::Value::Label("0x1")}, {}, " local read C address"),
Instruction::Comment(" Store Remap global write coord0 and coord1 "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Label("7"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] / 128"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("127"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] % 128"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v13")}, {Register::Value::Label("0x20"), Register::Value::Label("v5")}, {}, " coord1 offset of global memory for each Wave"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Label("6"), Register::Value::Label("v4")}, {}, " v5 = v4 / 64"),
Instruction("v_and_b32", {Register::Value::Label("v4")}, {Register::Value::Label("63"), Register::Value::Label("v4")}, {}, " v4 = v4 % 64"),
Instruction("v_mad_u32_u24", {Register::Value::Label("v13")}, {Register::Value::Label("16"), Register::Value::Label("v5"), Register::Value::Label("v13")}, {}, " waveCoord1 += waveCoord0 * MiN / WaveGroupM"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v10")}, {Register::Value::Label("0x5"), Register::Value::Label("v4")}, {}, " tid / nThreadPerCol"),
Instruction("_v_add_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v13"), Register::Value::Label("v10")}, {}, " coord1 offset in MacroTile"),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("0x80"), Register::Value::Label("s[sgprWorkGroup0]")}, {}, " s52 = wg0*MT0"),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("s52"), Register::Value::Label("v12")}, {}, " coord0 = coord0 + wg0 * MT0"),
Instruction("s_mul_i32", {Register::Value::Label("s53")}, {Register::Value::Label("MT1"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " <- wg1*MT1"),
Instruction("_v_add_co_u32", {Register::Value::Label("v5")}, {m_context->getVCC(), Register::Value::Label("s53"), Register::Value::Label("v6")}, {}, " coord1 = tid1*VW + wg1*MT1"),
Instruction::Comment(" Skip force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, "StoreRemap Start"),
Instruction::Comment(" not-LocalSplitU: global write "),
Instruction::Label(label_18),
Instruction::Comment(" edge=0, allocate 2 sgpr. perBatchTmpS=2 perBatchMaskS=0 perElementMaskS=0 elementsPerBatch=8 "),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body10()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #0 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (0,0,0,0:vw4); (0,1,0,0:vw4); (0,2,0,0:vw4); (0,3,0,0:vw4); (0,4,0,0:vw4); (0,5,0,0:vw4); (0,6,0,0:vw4); (0,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,7,0) "),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v9")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x1")}, {}, " optSingleColVgpr scaleToBpe: sharedAddrVgpr <- cinRowPtr + coord0, scaled by BPE. BSHERE:coord0=0, coord0Vgpr=0"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc0")}, {}, " copy acc to vreg[0]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc1")}, {}, " copy acc to vreg[1]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc2")}, {}, " copy acc to vreg[2]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc3")}, {}, " copy acc to vreg[3]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc4")}, {}, " copy acc to vreg[4]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc5")}, {}, " copy acc to vreg[5]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc6")}, {}, " copy acc to vreg[6]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc7")}, {}, " copy acc to vreg[7]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc8")}, {}, " copy acc to vreg[8]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc9")}, {}, " copy acc to vreg[9]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc10")}, {}, " copy acc to vreg[10]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc11")}, {}, " copy acc to vreg[11]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc12")}, {}, " copy acc to vreg[12]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc13")}, {}, " copy acc to vreg[13]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc14")}, {}, " copy acc to vreg[14]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc15")}, {}, " copy acc to vreg[15]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc16")}, {}, " copy acc to vreg[16]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc17")}, {}, " copy acc to vreg[17]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc18")}, {}, " copy acc to vreg[18]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc19")}, {}, " copy acc to vreg[19]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc20")}, {}, " copy acc to vreg[20]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc21")}, {}, " copy acc to vreg[21]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc22")}, {}, " copy acc to vreg[22]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc23")}, {}, " copy acc to vreg[23]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc24")}, {}, " copy acc to vreg[24]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc25")}, {}, " copy acc to vreg[25]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc26")}, {}, " copy acc to vreg[26]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc27")}, {}, " copy acc to vreg[27]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc28")}, {}, " copy acc to vreg[28]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("acc29")}, {}, " copy acc to vreg[29]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc30")}, {}, " copy acc to vreg[30]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("acc31")}, {}, " copy acc to vreg[31]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(0, 0, 0, 0), (0, 1, 0, 0), (0, 2, 0, 0), (0, 3, 0, 0), (0, 4, 0, 0), (0, 5, 0, 0), (0, 6, 0, 0), (0, 7, 0, 0)] "),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[12:13]"), Register::Value::Label("offset:0")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("v[vgprValuC+16]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v[vgprValuC+17]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v16")}, {Register::Value::Label("v[vgprValuC+16]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("v[vgprValuC+18]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v[vgprValuC+19]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v17")}, {Register::Value::Label("v[vgprValuC+18]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[16:17]"), Register::Value::Label("offset:16")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v[vgprValuC+20]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v[vgprValuC+21]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v20")}, {Register::Value::Label("v[vgprValuC+20]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("v[vgprValuC+22]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v[vgprValuC+23]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprValuC+22]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[20:21]"), Register::Value::Label("offset:32")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[24:25]"), Register::Value::Label("offset:48")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[28:29]"), Register::Value::Label("offset:128")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[32:33]"), Register::Value::Label("offset:144")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[36:37]"), Register::Value::Label("offset:160")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v[vgprValuC+48]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("v[vgprValuC+49]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprValuC+48]"), Register::Value::Label("v[vgprValuC+49]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v[vgprValuC+50]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("v[vgprValuC+51]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprValuC+50]"), Register::Value::Label("v[vgprValuC+51]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[48:49]"), Register::Value::Label("offset:176")}, {}, " storeRemap lw"),
Instruction::Comment(" Handle local read and global write "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS write"),
Instruction("s_barrier", {}, {}, {}, "wait all lds write finished"),
Instruction("_ds_load_b64", {Register::Value::Label("v[12:13]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:0")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[14:15]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:528")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[16:17]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1056")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[18:19]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1584")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[20:21]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2112")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[22:23]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2640")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[24:25]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3168")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[26:27]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3696")}, {}, " storeRemap lr"),
Instruction("v_mov_b32", {Register::Value::Label("v28")}, {Register::Value::Label("v6")}, {}, " coord1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(7)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("2")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(6)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[14:15]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("4")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[16:17]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("6")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[18:19]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("8")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[20:21]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("10")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(2)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[22:23]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("12")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("14")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[26:27]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("s_barrier", {}, {}, {}, "wait all lds read finished"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body11()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #1 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (1,0,0,0:vw4); (1,1,0,0:vw4); (1,2,0,0:vw4); (1,3,0,0:vw4); (1,4,0,0:vw4); (1,5,0,0:vw4); (1,6,0,0:vw4); (1,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,7,0) "),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc32")}, {}, " copy acc to vreg[32]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc33")}, {}, " copy acc to vreg[33]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc34")}, {}, " copy acc to vreg[34]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc35")}, {}, " copy acc to vreg[35]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc36")}, {}, " copy acc to vreg[36]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc37")}, {}, " copy acc to vreg[37]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc38")}, {}, " copy acc to vreg[38]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc39")}, {}, " copy acc to vreg[39]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc40")}, {}, " copy acc to vreg[40]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc41")}, {}, " copy acc to vreg[41]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc42")}, {}, " copy acc to vreg[42]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc43")}, {}, " copy acc to vreg[43]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc44")}, {}, " copy acc to vreg[44]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc45")}, {}, " copy acc to vreg[45]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc46")}, {}, " copy acc to vreg[46]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc47")}, {}, " copy acc to vreg[47]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc48")}, {}, " copy acc to vreg[48]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc49")}, {}, " copy acc to vreg[49]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc50")}, {}, " copy acc to vreg[50]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc51")}, {}, " copy acc to vreg[51]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc52")}, {}, " copy acc to vreg[52]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc53")}, {}, " copy acc to vreg[53]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc54")}, {}, " copy acc to vreg[54]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc55")}, {}, " copy acc to vreg[55]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc56")}, {}, " copy acc to vreg[56]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc57")}, {}, " copy acc to vreg[57]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc58")}, {}, " copy acc to vreg[58]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc59")}, {}, " copy acc to vreg[59]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc60")}, {}, " copy acc to vreg[60]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("acc61")}, {}, " copy acc to vreg[61]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc62")}, {}, " copy acc to vreg[62]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("acc63")}, {}, " copy acc to vreg[63]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(1, 0, 0, 0), (1, 1, 0, 0), (1, 2, 0, 0), (1, 3, 0, 0), (1, 4, 0, 0), (1, 5, 0, 0), (1, 6, 0, 0), (1, 7, 0, 0)] "),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction::Comment(" StoreRemap: shift coord1 address "),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Label("128")}, {}, " scale StrideD *= numRows(64) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s52")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("0")}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("v_mov_b32", {Register::Value::Label("v10")}, {Register::Value::Label("64")}, {}, " set shift rows"),
Instruction("_v_add_u32", {Register::Value::Label("v5")}, {Register::Value::Label("v5"), Register::Value::Label("v10")}, {}, " shift storeRemap coord1"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[12:13]"), Register::Value::Label("offset:0")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("v[vgprValuC+16]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v[vgprValuC+17]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v16")}, {Register::Value::Label("v[vgprValuC+16]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("v[vgprValuC+18]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v[vgprValuC+19]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v17")}, {Register::Value::Label("v[vgprValuC+18]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[16:17]"), Register::Value::Label("offset:16")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v[vgprValuC+20]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v[vgprValuC+21]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v20")}, {Register::Value::Label("v[vgprValuC+20]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("v[vgprValuC+22]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v[vgprValuC+23]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprValuC+22]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[20:21]"), Register::Value::Label("offset:32")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[24:25]"), Register::Value::Label("offset:48")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[28:29]"), Register::Value::Label("offset:128")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[32:33]"), Register::Value::Label("offset:144")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[36:37]"), Register::Value::Label("offset:160")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v[vgprValuC+48]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("v[vgprValuC+49]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprValuC+48]"), Register::Value::Label("v[vgprValuC+49]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v[vgprValuC+50]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("v[vgprValuC+51]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprValuC+50]"), Register::Value::Label("v[vgprValuC+51]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[48:49]"), Register::Value::Label("offset:176")}, {}, " storeRemap lw"),
Instruction::Comment(" Handle local read and global write "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS write"),
Instruction("s_barrier", {}, {}, {}, "wait all lds write finished"),
Instruction("_ds_load_b64", {Register::Value::Label("v[12:13]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:0")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[14:15]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:528")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[16:17]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1056")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[18:19]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1584")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[20:21]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2112")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[22:23]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2640")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[24:25]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3168")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[26:27]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3696")}, {}, " storeRemap lr"),
Instruction("v_mov_b32", {Register::Value::Label("v28")}, {Register::Value::Label("v6")}, {}, " coord1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(7)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("2")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(6)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[14:15]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("4")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[16:17]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("6")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[18:19]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("8")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[20:21]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("10")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(2)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[22:23]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("12")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("14")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[26:27]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("s_barrier", {}, {}, {}, "wait all lds read finished"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body12()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #2 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (2,0,0,0:vw4); (2,1,0,0:vw4); (2,2,0,0:vw4); (2,3,0,0:vw4); (2,4,0,0:vw4); (2,5,0,0:vw4); (2,6,0,0:vw4); (2,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,7,0) "),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc64")}, {}, " copy acc to vreg[64]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc65")}, {}, " copy acc to vreg[65]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc66")}, {}, " copy acc to vreg[66]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc67")}, {}, " copy acc to vreg[67]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc68")}, {}, " copy acc to vreg[68]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc69")}, {}, " copy acc to vreg[69]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc70")}, {}, " copy acc to vreg[70]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc71")}, {}, " copy acc to vreg[71]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc72")}, {}, " copy acc to vreg[72]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc73")}, {}, " copy acc to vreg[73]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc74")}, {}, " copy acc to vreg[74]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc75")}, {}, " copy acc to vreg[75]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc76")}, {}, " copy acc to vreg[76]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc77")}, {}, " copy acc to vreg[77]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc78")}, {}, " copy acc to vreg[78]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc79")}, {}, " copy acc to vreg[79]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc80")}, {}, " copy acc to vreg[80]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc81")}, {}, " copy acc to vreg[81]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc82")}, {}, " copy acc to vreg[82]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc83")}, {}, " copy acc to vreg[83]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc84")}, {}, " copy acc to vreg[84]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc85")}, {}, " copy acc to vreg[85]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc86")}, {}, " copy acc to vreg[86]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc87")}, {}, " copy acc to vreg[87]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc88")}, {}, " copy acc to vreg[88]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc89")}, {}, " copy acc to vreg[89]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc90")}, {}, " copy acc to vreg[90]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc91")}, {}, " copy acc to vreg[91]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc92")}, {}, " copy acc to vreg[92]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("acc93")}, {}, " copy acc to vreg[93]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc94")}, {}, " copy acc to vreg[94]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("acc95")}, {}, " copy acc to vreg[95]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(2, 0, 0, 0), (2, 1, 0, 0), (2, 2, 0, 0), (2, 3, 0, 0), (2, 4, 0, 0), (2, 5, 0, 0), (2, 6, 0, 0), (2, 7, 0, 0)] "),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction::Comment(" StoreRemap: shift coord1 address "),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Label("128")}, {}, " scale StrideD *= numRows(64) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s52")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("0")}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("v_mov_b32", {Register::Value::Label("v10")}, {Register::Value::Label("64")}, {}, " set shift rows"),
Instruction("_v_add_u32", {Register::Value::Label("v5")}, {Register::Value::Label("v5"), Register::Value::Label("v10")}, {}, " shift storeRemap coord1"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[12:13]"), Register::Value::Label("offset:0")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("v[vgprValuC+16]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v[vgprValuC+17]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v16")}, {Register::Value::Label("v[vgprValuC+16]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("v[vgprValuC+18]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v[vgprValuC+19]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v17")}, {Register::Value::Label("v[vgprValuC+18]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[16:17]"), Register::Value::Label("offset:16")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v[vgprValuC+20]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v[vgprValuC+21]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v20")}, {Register::Value::Label("v[vgprValuC+20]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("v[vgprValuC+22]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v[vgprValuC+23]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprValuC+22]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[20:21]"), Register::Value::Label("offset:32")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[24:25]"), Register::Value::Label("offset:48")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[28:29]"), Register::Value::Label("offset:128")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[32:33]"), Register::Value::Label("offset:144")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[36:37]"), Register::Value::Label("offset:160")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v[vgprValuC+48]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("v[vgprValuC+49]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprValuC+48]"), Register::Value::Label("v[vgprValuC+49]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v[vgprValuC+50]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("v[vgprValuC+51]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprValuC+50]"), Register::Value::Label("v[vgprValuC+51]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[48:49]"), Register::Value::Label("offset:176")}, {}, " storeRemap lw"),
Instruction::Comment(" Handle local read and global write "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS write"),
Instruction("s_barrier", {}, {}, {}, "wait all lds write finished"),
Instruction("_ds_load_b64", {Register::Value::Label("v[12:13]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:0")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[14:15]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:528")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[16:17]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1056")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[18:19]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1584")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[20:21]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2112")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[22:23]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2640")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[24:25]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3168")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[26:27]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3696")}, {}, " storeRemap lr"),
Instruction("v_mov_b32", {Register::Value::Label("v28")}, {Register::Value::Label("v6")}, {}, " coord1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(7)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("2")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(6)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[14:15]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("4")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[16:17]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("6")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[18:19]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("8")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[20:21]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("10")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(2)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[22:23]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("12")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("14")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[26:27]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("s_barrier", {}, {}, {}, "wait all lds read finished"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body13()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #3 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (3,0,0,0:vw4); (3,1,0,0:vw4); (3,2,0,0:vw4); (3,3,0,0:vw4); (3,4,0,0:vw4); (3,5,0,0:vw4); (3,6,0,0:vw4); (3,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,7,0) "),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc96")}, {}, " copy acc to vreg[96]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc97")}, {}, " copy acc to vreg[97]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc98")}, {}, " copy acc to vreg[98]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc99")}, {}, " copy acc to vreg[99]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc100")}, {}, " copy acc to vreg[100]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc101")}, {}, " copy acc to vreg[101]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc102")}, {}, " copy acc to vreg[102]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc103")}, {}, " copy acc to vreg[103]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc104")}, {}, " copy acc to vreg[104]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc105")}, {}, " copy acc to vreg[105]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc106")}, {}, " copy acc to vreg[106]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc107")}, {}, " copy acc to vreg[107]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc108")}, {}, " copy acc to vreg[108]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc109")}, {}, " copy acc to vreg[109]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc110")}, {}, " copy acc to vreg[110]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc111")}, {}, " copy acc to vreg[111]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc112")}, {}, " copy acc to vreg[112]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc113")}, {}, " copy acc to vreg[113]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc114")}, {}, " copy acc to vreg[114]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc115")}, {}, " copy acc to vreg[115]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc116")}, {}, " copy acc to vreg[116]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc117")}, {}, " copy acc to vreg[117]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc118")}, {}, " copy acc to vreg[118]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc119")}, {}, " copy acc to vreg[119]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc120")}, {}, " copy acc to vreg[120]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc121")}, {}, " copy acc to vreg[121]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc122")}, {}, " copy acc to vreg[122]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc123")}, {}, " copy acc to vreg[123]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc124")}, {}, " copy acc to vreg[124]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("acc125")}, {}, " copy acc to vreg[125]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc126")}, {}, " copy acc to vreg[126]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("acc127")}, {}, " copy acc to vreg[127]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(3, 0, 0, 0), (3, 1, 0, 0), (3, 2, 0, 0), (3, 3, 0, 0), (3, 4, 0, 0), (3, 5, 0, 0), (3, 6, 0, 0), (3, 7, 0, 0)] "),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction::Comment(" StoreRemap: shift coord1 address "),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Label("128")}, {}, " scale StrideD *= numRows(64) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s52")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("0")}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("v_mov_b32", {Register::Value::Label("v10")}, {Register::Value::Label("64")}, {}, " set shift rows"),
Instruction("_v_add_u32", {Register::Value::Label("v5")}, {Register::Value::Label("v5"), Register::Value::Label("v10")}, {}, " shift storeRemap coord1"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[12:13]"), Register::Value::Label("offset:0")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("v[vgprValuC+16]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v[vgprValuC+17]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v16")}, {Register::Value::Label("v[vgprValuC+16]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("v[vgprValuC+18]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v[vgprValuC+19]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v17")}, {Register::Value::Label("v[vgprValuC+18]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[16:17]"), Register::Value::Label("offset:16")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v[vgprValuC+20]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v[vgprValuC+21]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v20")}, {Register::Value::Label("v[vgprValuC+20]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("v[vgprValuC+22]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v[vgprValuC+23]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprValuC+22]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[20:21]"), Register::Value::Label("offset:32")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[24:25]"), Register::Value::Label("offset:48")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[28:29]"), Register::Value::Label("offset:128")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[32:33]"), Register::Value::Label("offset:144")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[36:37]"), Register::Value::Label("offset:160")}, {}, " storeRemap lw"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v[vgprValuC+48]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+49]")}, {Register::Value::Label("v[vgprValuC+49]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v48")}, {Register::Value::Label("v[vgprValuC+48]"), Register::Value::Label("v[vgprValuC+49]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v[vgprValuC+50]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+51]")}, {Register::Value::Label("v[vgprValuC+51]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v49")}, {Register::Value::Label("v[vgprValuC+50]"), Register::Value::Label("v[vgprValuC+51]")}, {}, " Pack with neighbor"),
Instruction("_ds_store_b64", {Register::Value::Label("v7")}, {Register::Value::Label("v[48:49]"), Register::Value::Label("offset:176")}, {}, " storeRemap lw"),
Instruction::Comment(" Handle local read and global write "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS write"),
Instruction("s_barrier", {}, {}, {}, "wait all lds write finished"),
Instruction("_ds_load_b64", {Register::Value::Label("v[12:13]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:0")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[14:15]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:528")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[16:17]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1056")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[18:19]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:1584")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[20:21]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2112")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[22:23]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:2640")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[24:25]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3168")}, {}, " storeRemap lr"),
Instruction("_ds_load_b64", {Register::Value::Label("v[26:27]")}, {Register::Value::Label("v8"), Register::Value::Label("offset:3696")}, {}, " storeRemap lr"),
Instruction("v_mov_b32", {Register::Value::Label("v28")}, {Register::Value::Label("v6")}, {}, " coord1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(7)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("2")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(6)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[14:15]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("4")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[16:17]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("6")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[18:19]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("8")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[20:21]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("10")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(2)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[22:23]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("12")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(1)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("_v_add_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v6"), Register::Value::Label("14")}, {}, " coord1 += nColPerLoad"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " coord1 offset =  coord1 * StrideD"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v28"), Register::Value::Label("v4"), Register::Value::Label("0x1")}, {}, " global write D address"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for LDS read"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[26:27]"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("s_barrier", {}, {}, {}, "wait all lds read finished"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction("s_branch", {}, {label_19}, {}, " jump to end"),
Instruction::Label(label_19),
Instruction::Label(label_20),
};
            // clang-format on
        }
    };

    Generator<Instruction> HGEMM_Optimized_Program(ContextPtr context)
    {
        HGemmGuidePostOptimized gen(context);
        // The Kernel is split into multiple pieces and yielded seprately to avoid compiler issues
        // encountered when trying to co-yield from one large vector.
        for(auto const& inst : gen.macros())
            co_yield inst;
        for(auto const& inst : gen.preamble())
            co_yield inst;
        for(auto const& inst : gen.body0())
            co_yield inst;
        for(auto const& inst : gen.body1())
            co_yield inst;
        for(auto const& inst : gen.body2())
            co_yield inst;
        for(auto const& inst : gen.body3())
            co_yield inst;
        for(auto const& inst : gen.body4())
            co_yield inst;
        for(auto const& inst : gen.body5())
            co_yield inst;
        for(auto const& inst : gen.body6())
            co_yield inst;
        for(auto const& inst : gen.body7())
            co_yield inst;
        for(auto const& inst : gen.body8())
            co_yield inst;
        for(auto const& inst : gen.body9())
            co_yield inst;
        for(auto const& inst : gen.body10())
            co_yield inst;
        for(auto const& inst : gen.body11())
            co_yield inst;
        for(auto const& inst : gen.body12())
            co_yield inst;
        for(auto const& inst : gen.body13())
            co_yield inst;
    }
}
