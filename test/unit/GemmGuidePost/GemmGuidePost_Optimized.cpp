/*******************************************************************************
 *
 * MIT License
 *
 * Copyright 2024-2025 AMD ROCm(TM) Software
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************************************************************************/

#include <string>

#pragma GCC optimize("O0")

#include <rocRoller/CodeGen/Instruction.hpp>
#include <rocRoller/Context.hpp>
#include <rocRoller/InstructionValues/LabelAllocator.hpp>
#include <rocRoller/InstructionValues/Register.hpp>

using namespace rocRoller;

namespace rocRollerTest
{
    struct GemmGuidePostOptimized
    {
        ContextPtr         m_context;
        Register::ValuePtr label_0;
        Register::ValuePtr label_1;
        Register::ValuePtr label_2;
        Register::ValuePtr label_3;
        Register::ValuePtr label_4;
        Register::ValuePtr label_5;
        Register::ValuePtr label_6;
        Register::ValuePtr label_7;
        Register::ValuePtr label_8;
        Register::ValuePtr label_9;
        Register::ValuePtr label_10;
        Register::ValuePtr label_11;
        Register::ValuePtr label_12;
        Register::ValuePtr label_13;
        Register::ValuePtr label_14;

        GemmGuidePostOptimized(ContextPtr context)
            : m_context(context)
        {

            label_0  = m_context->labelAllocator()->label("label_AlphaNonZero");
            label_1  = m_context->labelAllocator()->label("ShadowInitStart_10");
            label_2  = m_context->labelAllocator()->label("label_NoBranch_11");
            label_3  = m_context->labelAllocator()->label("openLoopL_12");
            label_4  = m_context->labelAllocator()->label("LoopBeginL_1");
            label_5  = m_context->labelAllocator()->label("label_0013");
            label_6  = m_context->labelAllocator()->label("LoopEndL_2");
            label_7  = m_context->labelAllocator()->label("Summation_End_14");
            label_8  = m_context->labelAllocator()->label("GW_B0_E0_17");
            label_9  = m_context->labelAllocator()->label("GW_B0_E1_20");
            label_10 = m_context->labelAllocator()->label("GW_Beta_29");
            label_11 = m_context->labelAllocator()->label("GW_B1_E0_24");
            label_12 = m_context->labelAllocator()->label("GW_B1_E1_27");
            label_13 = m_context->labelAllocator()->label("label_GW_End_28");
            label_14 = m_context->labelAllocator()->label("label_0030");
        }

        std::vector<Instruction> macros()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Function Prefix                        "),
Instruction::Comment("****************************************"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Begin Kernel                           "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Component.Signature.SignatureCOV3"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Optimizations and Config:              "),
Instruction::Comment("****************************************"),
Instruction::Comment(" ThreadTile= 32 x 1 "),
Instruction::Comment(" SubGroup= 4 x 64 "),
Instruction::Comment(" VectorWidth=1 "),
Instruction::Comment(" GlobalLoadVectorWidthA=4, GlobalLoadVectorWidthB=4 "),
Instruction::Comment(" DirectToLdsA=False "),
Instruction::Comment(" DirectToLdsB=False "),
Instruction::Comment(" UseSgprForGRO=1 "),
Instruction::Comment("Cijk_Ailk_Bjlk_SB_MT128x64x16_MI32x32x2x1_SN_K1:"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Asm syntax workarounds                 "),
Instruction::Comment("****************************************"),
Instruction(".macro _v_add_co_u32 dst:req, cc:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_add_co_u32 \\dst, \\cc, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_add_u32 dst:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_add_u32 \\dst, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_add_i32 dst:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_add_i32 \\dst, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_addc_co_u32 dst:req, ccOut:req, src0:req, ccIn:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_addc_co_u32 \\dst, \\ccOut, \\src0, \\ccIn, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_sub_co_u32 dst:req, cc:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_sub_co_u32 \\dst, \\cc, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_sub_u32 dst:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_sub_u32 \\dst, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_sub_i32 dst:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_sub_i32 \\dst, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_add_lshl_u32 dst:req, src0:req, src1:req, shiftCnt:req", {}, {}, {}, ""),
Instruction("v_add_lshl_u32 \\dst, \\src0, \\src1, \\shiftCnt", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_lshl_add_u32 dst:req, src0:req, src1:req, shiftCnt:req", {}, {}, {}, ""),
Instruction("v_lshl_add_u32 \\dst, \\src0, \\src1, \\shiftCnt", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_lshl_or_b32 dst:req, src0:req, shiftCnt:req, src1:req", {}, {}, {}, ""),
Instruction("v_lshl_or_b32 \\dst, \\src0, \\shiftCnt, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lt_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lt_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lt_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lt_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lt_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lt_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lt_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lt_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lt_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lt_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lt_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lt_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_eq_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_eq_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_eq_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_eq_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_eq_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_eq_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_eq_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_eq_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_eq_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_eq_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_eq_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_eq_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_le_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_le_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_le_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_le_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_le_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_le_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_le_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_le_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_le_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_le_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_le_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_le_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_gt_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_gt_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_gt_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_gt_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_gt_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_gt_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_gt_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_gt_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_gt_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_gt_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_gt_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_gt_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ne_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ne_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ne_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ne_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ne_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ne_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ne_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ne_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ne_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ne_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ne_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ne_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lg_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lg_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lg_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lg_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lg_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lg_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lg_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lg_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lg_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lg_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_lg_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_lg_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ge_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ge_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ge_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ge_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ge_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ge_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ge_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ge_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ge_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ge_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_ge_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_ge_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_o_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_o_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_o_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_o_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_o_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_o_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_o_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_o_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_o_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_o_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_o_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_o_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_u_i16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_u_i16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_u_i32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_u_i32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_u_i64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_u_i64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_u_u16 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_u_u16 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_u_u32 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_u_u32 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_cmpx_u_u64 dst, src0, src1=", {}, {}, {}, ""),
Instruction("v_cmpx_u_u64 \\dst, \\src0, \\src1", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_mac_f32 c:req, a:req, b:req", {}, {}, {}, ""),
Instruction("v_mac_f32 \\c, \\a, \\b", {}, {}, {}, ""),
Instruction(".endmacro", {}, {}, {}, ""),
Instruction("/******************************************/", {}, {}, {}, ""),
Instruction("/* Magic div and mod functions            */", {}, {}, {}, ""),
Instruction("/******************************************/", {}, {}, {}, ""),
Instruction(".macro V_MAGIC_DIV dstIdx:req, dividend:req, magicNumber:req, magicShift:req, magicA:req", {}, {}, {}, ""),
Instruction("v_mul_hi_u32 v[\\dstIdx+1], \\dividend, \\magicNumber", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\dstIdx+0], \\dividend, \\magicA", {}, {}, {}, ""),
Instruction("_v_add_u32 v[\\dstIdx+0], v[\\dstIdx+0], v[\\dstIdx+1]", {}, {}, {}, ""),
Instruction("v_lshrrev_b32 v[\\dstIdx+0], \\magicShift, v[\\dstIdx+0]", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" VGPR Assignments                       "),
Instruction::Comment("****************************************"),
Instruction::Comment(" ValuC range: [0-0), serializedStore enabled "),
Instruction(".set vgprValuC, 0", {}, {}, {}, ""),
Instruction::Comment(" ValuA/B   Xn=PLR buffer idx,  In=InnerUnroll idx "),
Instruction(".set vgprValuA_X0_I0, 0", {}, {}, {}, ""),
Instruction(".set vgprValuA_X1_I0, 2", {}, {}, {}, ""),
Instruction(".set vgprValuA_X2_I0, 4", {}, {}, {}, ""),
Instruction(".set vgprValuA_X3_I0, 6", {}, {}, {}, ""),
Instruction(".set vgprValuA_X4_I0, 8", {}, {}, {}, ""),
Instruction(".set vgprValuA_X5_I0, 10", {}, {}, {}, ""),
Instruction(".set vgprValuA_X6_I0, 12", {}, {}, {}, ""),
Instruction(".set vgprValuA_X7_I0, 14", {}, {}, {}, ""),
Instruction(".set vgprG2LA, 28", {}, {}, {}, ""),
Instruction(".set vgprValuB_X0_I0, 16", {}, {}, {}, ""),
Instruction(".set vgprValuB_X1_I0, 17", {}, {}, {}, ""),
Instruction(".set vgprValuB_X2_I0, 18", {}, {}, {}, ""),
Instruction(".set vgprValuB_X3_I0, 19", {}, {}, {}, ""),
Instruction(".set vgprValuB_X4_I0, 20", {}, {}, {}, ""),
Instruction(".set vgprValuB_X5_I0, 21", {}, {}, {}, ""),
Instruction(".set vgprValuB_X6_I0, 22", {}, {}, {}, ""),
Instruction(".set vgprValuB_X7_I0, 23", {}, {}, {}, ""),
Instruction(".set vgprG2LB, 36", {}, {}, {}, ""),
Instruction(".set vgprLocalWriteAddrA, 24", {}, {}, {}, ""),
Instruction(".set vgprLocalWriteAddrB, 25", {}, {}, {}, ""),
Instruction(".set vgprGlobalReadOffsetA, 26", {}, {}, {}, ""),
Instruction(".set vgprGlobalReadOffsetB, 27", {}, {}, {}, ""),
Instruction(".set vgprLocalReadAddrA, 40", {}, {}, {}, ""),
Instruction(".set vgprLocalReadAddrB, 41", {}, {}, {}, ""),
Instruction(".set vgprSerial, 42", {}, {}, {}, ""),
Instruction::Comment(" Num VGPR=224 "),
Instruction::Comment(" Num AccVGPR=32 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" SGPR Assignments                       "),
Instruction::Comment("****************************************"),
Instruction(".set sgprKernArgAddress, 0", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup0, 2", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup1, 3", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup2, 4", {}, {}, {}, ""),
Instruction(".set sgprLoopCounterL, 5", {}, {}, {}, ""),
Instruction(".set sgprOrigLoopCounter, 6", {}, {}, {}, ""),
Instruction(".set sgprSrdA, 8", {}, {}, {}, ""),
Instruction(".set sgprSrdB, 12", {}, {}, {}, ""),
Instruction(".set sgprSrdD, 16", {}, {}, {}, ""),
Instruction(".set sgprSrdC, 20", {}, {}, {}, ""),
Instruction(".set sgprTensor2dSizeA, 24", {}, {}, {}, ""),
Instruction(".set sgprTensor2dSizeB, 26", {}, {}, {}, ""),
Instruction(".set sgprAddressD, 28", {}, {}, {}, ""),
Instruction(".set sgprAddressC, 30", {}, {}, {}, ""),
Instruction(".set sgprAddressA, 32", {}, {}, {}, ""),
Instruction(".set sgprAddressB, 34", {}, {}, {}, ""),
Instruction(".set sgprAlpha, 36", {}, {}, {}, ""),
Instruction(".set sgprBeta, 37", {}, {}, {}, ""),
Instruction(".set sgprStridesD, 38", {}, {}, {}, ""),
Instruction(".set sgprStridesC, 40", {}, {}, {}, ""),
Instruction(".set sgprStridesA, 42", {}, {}, {}, ""),
Instruction(".set sgprStridesB, 44", {}, {}, {}, ""),
Instruction(".set sgprSizesFree, 46", {}, {}, {}, ""),
Instruction(".set sgprSizesSum, 49", {}, {}, {}, ""),
Instruction(".set sgprOrigStaggerUIter, 50", {}, {}, {}, ""),
Instruction(".set sgprNumWorkGroups0, 51", {}, {}, {}, ""),
Instruction(".set sgprNumWorkGroups1, 52", {}, {}, {}, ""),
Instruction(".set sgprNumFullBlocks, 53", {}, {}, {}, ""),
Instruction(".set sgprWgmRemainder1, 54", {}, {}, {}, ""),
Instruction(".set sgprMagicNumberWgmRemainder1, 55", {}, {}, {}, ""),
Instruction(".set sgprOffsetD, 56", {}, {}, {}, ""),
Instruction(".set sgprOffsetC, 57", {}, {}, {}, ""),
Instruction(".set sgprOffsetA, 58", {}, {}, {}, ""),
Instruction(".set sgprOffsetB, 59", {}, {}, {}, ""),
Instruction(".set sgprShadowLimitA, 56", {}, {}, {}, ""),
Instruction(".set sgprShadowLimitB, 58", {}, {}, {}, ""),
Instruction(".set sgprGlobalReadIncsA, 7", {}, {}, {}, ""),
Instruction(".set sgprGlobalReadIncsB, 50", {}, {}, {}, ""),
Instruction(".set sgprScalarGlobalReadOffsetA, 60", {}, {}, {}, ""),
Instruction::Comment(" max SGPR=67 "),
Instruction::Comment(" Size Assignments "),
Instruction(".set sgprSizeI, sgprSizesFree+0", {}, {}, {}, ""),
Instruction(".set sgprSizeJ, sgprSizesFree+1", {}, {}, {}, ""),
Instruction(".set sgprSizeK, sgprSizesFree+2", {}, {}, {}, ""),
Instruction(".set sgprSizeL, sgprSizesSum+0", {}, {}, {}, ""),
Instruction::Comment(" Stride Assignments "),
Instruction(".set constStrideD0I, 1", {}, {}, {}, ""),
Instruction(".set sgprStrideD1J, sgprStridesD+0", {}, {}, {}, ""),
Instruction(".set sgprStrideDK, sgprStridesD+1", {}, {}, {}, ""),
Instruction(".set constStrideC0I, 1", {}, {}, {}, ""),
Instruction(".set sgprStrideC1J, sgprStridesC+0", {}, {}, {}, ""),
Instruction(".set sgprStrideCK, sgprStridesC+1", {}, {}, {}, ""),
Instruction(".set constStrideA0I, 1", {}, {}, {}, ""),
Instruction(".set sgprStrideAL, sgprStridesA+0", {}, {}, {}, ""),
Instruction(".set sgprStrideAK, sgprStridesA+1", {}, {}, {}, ""),
Instruction(".set constStrideB1J, 1", {}, {}, {}, ""),
Instruction(".set sgprStrideBL, sgprStridesB+0", {}, {}, {}, ""),
Instruction(".set sgprStrideBK, sgprStridesB+1", {}, {}, {}, ""),
Instruction(".set MT0, 128", {}, {}, {}, ""),
Instruction(".set MT1, 64", {}, {}, {}, ""),
Instruction(".set DepthU, 16", {}, {}, {}, ""),
Instruction(".set GSU, 1", {}, {}, {}, ""),
Instruction(".set BpeA, 4", {}, {}, {}, ""),
Instruction(".set BpeALog2, 2", {}, {}, {}, ""),
Instruction(".set BpeB, 4", {}, {}, {}, ""),
Instruction(".set BpeBLog2, 2", {}, {}, {}, ""),
Instruction::Comment(" Number of elements to shift-left SRD "),
Instruction(".set SrdShiftLeftA, 4", {}, {}, {}, ""),
Instruction(".set SrdShiftLeftB, 4", {}, {}, {}, ""),
Instruction::Comment(" 2GB limit - set offsets to -1 to exceed this and clamp "),
Instruction(".set BufferLimit, 0xffffffff", {}, {}, {}, ""),
Instruction(".set BufferOOB, 0x80000000", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" Bits 127:96 of SRD.                    "),
Instruction::Comment(" hex: 0x00020000                        "),
Instruction::Comment(" dst_sel_x (3b): 0                      "),
Instruction::Comment(" dst_sel_y (3b): 0                      "),
Instruction::Comment(" dst_sel_z (3b): 0                      "),
Instruction::Comment(" dst_sel_w (3b): 0                      "),
Instruction::Comment(" num_format (3b): 0                     "),
Instruction::Comment(" data_format (4b): 4                    "),
Instruction::Comment(" user_vm_enable (1b): 0                 "),
Instruction::Comment(" user_vm_mode (1b): 0                   "),
Instruction::Comment(" index_stride (2b): 0                   "),
Instruction::Comment(" add_tid_enable (1b): 0                 "),
Instruction::Comment(" _unusedA (3b): 0                       "),
Instruction::Comment(" nv (1b): 0                             "),
Instruction::Comment(" _unusedB (2b): 0                       "),
Instruction::Comment(" type (2b): 0                           "),
Instruction::Comment("****************************************"),
Instruction(".set Srd127_96, 0x00020000", {}, {}, {}, ""),
Instruction::Comment(" Global Offset A "),
Instruction(".macro GLOBAL_OFFSET_A vgprAddr:req vgprOffset0I:req vgprOffsetL:req vgprTmp:req", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vgprTmp+0], s[sgprStrideAL], v[\\vgprOffsetL] // mul d1 lower", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vgprAddr+0], vcc, v[\\vgprOffset0I], v[\\vgprTmp+0] // accumulate K lower", {}, {}, {}, ""),
Instruction("_v_add_u32 v[\\vgprAddr+0], 0x4, v[\\vgprAddr+0]     // add prepad for pointer shift", {}, {}, {}, ""),
Instruction("v_lshlrev_b32 v[\\vgprAddr+0], 0x2, v[\\vgprAddr+0]  // offset *= bytes/element", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" Global Offset B "),
Instruction(".macro GLOBAL_OFFSET_B vgprAddr:req vgprOffset1J:req vgprOffsetL:req vgprTmp:req", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vgprTmp+0], s[sgprStrideBL], v[\\vgprOffsetL] // mul d1 lower", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vgprAddr+0], vcc, v[\\vgprOffset1J], v[\\vgprTmp+0] // accumulate K lower", {}, {}, {}, ""),
Instruction("_v_add_u32 v[\\vgprAddr+0], 0x4, v[\\vgprAddr+0]     // add prepad for pointer shift", {}, {}, {}, ""),
Instruction("v_lshlrev_b32 v[\\vgprAddr+0], 0x2, v[\\vgprAddr+0]  // offset *= bytes/element", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" Dynamic Scalar Divide: vQuotient=vDividend/vDivisor; vRemainder=vDividend%vDivisor; "),
Instruction::Comment("****************************************"),
Instruction(".macro DYNAMIC_VECTOR_DIVIDE vQuotient vRemainder vDividend vDivisor vTmp0 vTmp1 sTmp", {}, {}, {}, ""),
Instruction("v_cvt_f32_u32 v[\\vQuotient], v[\\vDivisor]          //", {}, {}, {}, ""),
Instruction("v_rcp_f32 v[\\vQuotient], v[\\vQuotient]             //", {}, {}, {}, ""),
Instruction("v_mul_f32 v[\\vQuotient], 0x4f800000, v[\\vQuotient] //", {}, {}, {}, ""),
Instruction("v_cvt_u32_f32 v[\\vQuotient], v[\\vQuotient]         //", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vRemainder], v[\\vDivisor], v[\\vQuotient] //", {}, {}, {}, ""),
Instruction("v_mul_hi_u32 v[\\vTmp0], v[\\vDivisor], v[\\vQuotient] //", {}, {}, {}, ""),
Instruction("_v_sub_co_u32 v[\\vTmp1], vcc, 0x0, v[\\vRemainder]  //", {}, {}, {}, ""),
Instruction("v_cmp_ne_i32 s[\\sTmp:\\sTmp+1], 0x0, v[\\vTmp0]      //", {}, {}, {}, ""),
Instruction("v_cndmask_b32 v[\\vRemainder], v[\\vTmp1], v[\\vRemainder], s[\\sTmp:\\sTmp+1] //", {}, {}, {}, ""),
Instruction("v_mul_hi_u32 v[\\vRemainder], v[\\vRemainder], v[\\vQuotient] //", {}, {}, {}, ""),
Instruction("_v_sub_co_u32 v[\\vTmp0], vcc, v[\\vQuotient], v[\\vRemainder] //", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vQuotient], vcc, v[\\vQuotient], v[\\vRemainder] //", {}, {}, {}, ""),
Instruction("v_cndmask_b32 v[\\vQuotient], v[\\vQuotient], v[\\vTmp0], s[\\sTmp:\\sTmp+1] //", {}, {}, {}, ""),
Instruction("v_mul_hi_u32 v[\\vQuotient], v[\\vQuotient], v[\\vDividend] //", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vRemainder], v[\\vQuotient], v[\\vDivisor] //", {}, {}, {}, ""),
Instruction("_v_sub_co_u32 v[\\vTmp0], vcc, v[\\vDividend], v[\\vRemainder] //", {}, {}, {}, ""),
Instruction("v_cmp_ge_u32 s[\\sTmp:\\sTmp+1], v[\\vDividend], v[\\vRemainder] //", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vRemainder], vcc, 0x1, v[\\vQuotient] //", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vTmp1], vcc, -1, v[\\vQuotient]    //", {}, {}, {}, ""),
Instruction("v_cmp_le_u32 vcc, v[\\vDivisor], v[\\vTmp0]          //", {}, {}, {}, ""),
Instruction("s_and_b64 vcc, s[\\sTmp:\\sTmp+1], vcc               //", {}, {}, {}, ""),
Instruction("v_cndmask_b32 v[\\vQuotient], v[\\vQuotient], v[\\vRemainder], vcc //", {}, {}, {}, ""),
Instruction("v_cndmask_b32 v[\\vQuotient], v[\\vTmp1], v[\\vQuotient], s[\\sTmp:\\sTmp+1] //", {}, {}, {}, ""),
Instruction("v_cmp_ne_i32 vcc, 0x0, v[\\vDivisor]                //", {}, {}, {}, ""),
Instruction("v_cndmask_b32 v[\\vQuotient], -1, v[\\vQuotient], vcc // final result", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vRemainder], v[\\vQuotient], v[\\vDivisor] //", {}, {}, {}, ""),
Instruction("_v_sub_co_u32 v[\\vRemainder], vcc, v[\\vDividend], v[\\vRemainder] // final result", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),

};
            // clang-format on
        }

        std::vector<Instruction> preamble()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Allocate Resources                     "),
Instruction::Comment("****************************************"),
Instruction("s_mov_b32", {Register::Value::Label("m0")}, {Register::Value::Label("0x7000")}, {}, " LDS clamp at 28672 bytes"),
Instruction("v_mov_b32", {Register::Value::Label("v[vgprSerial]")}, {Register::Value::Label("v0")}, {}, " thread serial id"),
Instruction::Comment(" Load Kernel Args "),
Instruction("s_load_dwordx16", {Register::Value::Label("s[24:39]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x8")}, {}, ""),
Instruction("s_load_dwordx16", {Register::Value::Label("s[40:55]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x48")}, {}, ""),
Instruction("s_load_dwordx4", {Register::Value::Label("s[56:59]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x88")}, {}, ""),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for 152 bytes of kern args"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetD]")}, {Register::Value::Label("s[sgprOffsetD]"), Register::Value::Label("0x2")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressD+0]")}, {Register::Value::Label("s[sgprAddressD+0]"), Register::Value::Label("s[sgprOffsetD]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressD+1]")}, {Register::Value::Label("s[sgprAddressD+1]"), Register::Value::Literal(0)}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetC]")}, {Register::Value::Label("s[sgprOffsetC]"), Register::Value::Label("0x2")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressC+0]")}, {Register::Value::Label("s[sgprAddressC+0]"), Register::Value::Label("s[sgprOffsetC]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressC+1]")}, {Register::Value::Label("s[sgprAddressC+1]"), Register::Value::Literal(0)}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetA]")}, {Register::Value::Label("s[sgprOffsetA]"), Register::Value::Label("0x2")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Label("s[sgprOffsetA]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Literal(0)}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetB]")}, {Register::Value::Label("s[sgprOffsetB]"), Register::Value::Label("0x2")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Label("s[sgprOffsetB]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Literal(0)}, {}, " add offset to buffer address"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprAddressA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Literal(16)}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprAddressA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Literal(0)}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprAddressB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Literal(16)}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprAddressB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Literal(0)}, {}, " pre-pad to make room for possible pointer shift"),
Instruction(".set OffsetD, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetC, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetA, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetB, UNDEF", {}, {}, {}, ""),
Instruction::Comment(" Short circuit condition if Alpha == 0, then sumDims=0 "),
Instruction("v_cmp_eq_f32", {m_context->getVCC()}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("0.0")}, {}, " Alpha == 0.0f ?"),
Instruction("s_cbranch_vccz", {}, {label_0}, {}, " branch if alpha != 0"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSizesSum+0]")}, {Register::Value::Label("0x0")}, {}, " Set summation dim=0 if Alpha == 0"),
Instruction::Label(label_0),
Instruction::Comment("****************************************"),
Instruction::Comment(" Local Read Addresses                   "),
Instruction::Comment("****************************************"),
Instruction::Comment(" local read addresses: tile assignments a/b "),
Instruction::Comment("lr0I"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Literal(63), Register::Value::Label("v[vgprSerial]")}, {}, " 0. thread id in wave: wtid = tid % wavelength(64)"),
Instruction("v_and_b32", {Register::Value::Label("v1")}, {Register::Value::Literal(31), Register::Value::Label("v2")}, {}, " 1. N offset: nIdx = wtid % MI_N(32)"),
Instruction::Comment(" 1. N offset: nOffset = nIdx * nStride(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(5), Register::Value::Label("v2")}, {}, " 2. block offset: bnIdx = wtid / dividedForBlkId(32)"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(0), Register::Value::Label("v0")}, {}, " 2. block offset: bnIdx = bnIdx % num1DBlocks(1)"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x5"), Register::Value::Label("v0")}, {}, " 2. block offset: bnOffset = bnIdx * strideBlock(32)"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v0"), Register::Value::Label("v1")}, {}, " 3. add N and block offset: bnOffset = block and N offset"),
Instruction::Comment(" 3. apply VectorWidth: bnOffset = bnOffset * vw(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v2")}, {Register::Value::Literal(5), Register::Value::Label("v2")}, {}, " 4. K offset: kIdx = wtid / (MIN(32) * MIBB(1))"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v2")}, {Register::Value::Label("0x7"), Register::Value::Label("v2")}, {}, " 4. K offset: lrKOffset = kIdx * mStride(128)"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v2"), Register::Value::Label("v1")}, {}, " 5. offset in wave: lrOffset = bnOffset + lrKOffset"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(6), Register::Value::Label("v[vgprSerial]")}, {}, " 6. wave offset in N dimen: wtid = tid / dividedForWaveId(64)"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(1), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wtid0 = wtid / num1DWaves(2)"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x5"), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wOffset = wtid0 * W0Stride(32)"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v0"), Register::Value::Label("v1")}, {}, " 7. final local read offset: flrOffset = lrOffset + WOffset"),
Instruction::Comment("lr1J"),
Instruction("v_and_b32", {Register::Value::Label("v3")}, {Register::Value::Literal(63), Register::Value::Label("v[vgprSerial]")}, {}, " 0. thread id in wave: wtid = tid % wavelength(64)"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Literal(31), Register::Value::Label("v3")}, {}, " 1. N offset: nIdx = wtid % MI_N(32)"),
Instruction::Comment(" 1. N offset: nOffset = nIdx * nStride(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(5), Register::Value::Label("v3")}, {}, " 2. block offset: bnIdx = wtid / dividedForBlkId(32)"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(0), Register::Value::Label("v0")}, {}, " 2. block offset: bnIdx = bnIdx % num1DBlocks(1)"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x5"), Register::Value::Label("v0")}, {}, " 2. block offset: bnOffset = bnIdx * strideBlock(32)"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v0"), Register::Value::Label("v2")}, {}, " 3. add N and block offset: bnOffset = block and N offset"),
Instruction::Comment(" 3. apply VectorWidth: bnOffset = bnOffset * vw(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v3")}, {Register::Value::Literal(5), Register::Value::Label("v3")}, {}, " 4. K offset: kIdx = wtid / (MIN(32) * MIBB(1))"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v3")}, {Register::Value::Label("0x6"), Register::Value::Label("v3")}, {}, " 4. K offset: lrKOffset = kIdx * mStride(64)"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v3"), Register::Value::Label("v2")}, {}, " 5. offset in wave: lrOffset = bnOffset + lrKOffset"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(7), Register::Value::Label("v[vgprSerial]")}, {}, " 6. wave offset in N dimen: wtid = tid / dividedForWaveId(128)"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(1), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wtid0 = wtid / num1DWaves(2)"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x5"), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wOffset = wtid0 * W0Stride(32)"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v0"), Register::Value::Label("v2")}, {}, " 7. final local read offset: flrOffset = lrOffset + WOffset"),
Instruction::Comment(" local read addresses: final offsets a "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(8), Register::Value::Label("v[vgprSerial]")}, {}, " LSU offset: sgid = Serial / subGroup(256)"),
Instruction("s_mov_b32", {Register::Value::Label("s61")}, {Register::Value::Literal(128)}, {}, " LSU offset: stride = MT0(128) + PAD0(0)"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s61"), Register::Value::Label("v0")}, {}, " LSU offset: lsuoffset = sgid*(MT0+PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {Register::Value::Label("v0"), Register::Value::Label("v1"), Register::Value::Label("0x2")}, {}, " Final Offset: offset = (lro0*VW+lsuoffset)*bpe"),
Instruction::Comment(" local read addresses: final offsets b "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(8), Register::Value::Label("v[vgprSerial]")}, {}, " LSU offset: sgid = Serial / subGroup(256)"),
Instruction("s_mov_b32", {Register::Value::Label("s61")}, {Register::Value::Literal(64)}, {}, " LSU offset: stride = MT1(64) + PAD1(0)"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s61"), Register::Value::Label("v0")}, {}, " LSU offset: lsuoffset = sgid*(MT1+PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {Register::Value::Label("v0"), Register::Value::Label("v2"), Register::Value::Label("0x2")}, {}, " Final Offset: offset = (lro1*VW+lsuoffset)*bpe"),
Instruction::Comment(" local read addresses: declare addresses a "),
Instruction::Comment(" N/A "),
Instruction::Comment(" local read addresses: declare addresses b "),
Instruction("_v_add_co_u32", {Register::Value::Label("v[vgprLocalReadAddrB+0]")}, {m_context->getVCC(), Register::Value::Label("0x2000"), Register::Value::Label("v[vgprLocalReadAddrB+0]")}, {}, "  += LdsOffsetB (lower)"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Begin setupNewTile, isPap=False           "),
Instruction::Comment("****************************************"),
Instruction::Comment(" global read addresses: work-group "),
Instruction::Comment(" graWorkGroup mapping "),
Instruction::Comment(" global read addresses: tile offset assignment a "),
Instruction::Comment(" LVCA = 32 "),
Instruction::Comment(" v0 = (local)groA-tile = serial%LVCA (note (wgA*MTA) will be added to SRD) "),
Instruction::Comment(" v1 = groA-unroll = serial/LVCA "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v1")}, {Register::Value::Literal(5), Register::Value::Label("v[vgprSerial]")}, {}, " v1 = v[vgprSerial] / 32"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(31), Register::Value::Label("v[vgprSerial]")}, {}, " v0 = v[vgprSerial] % 32"),
Instruction::Comment(" gro-tile *= glvw "),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x2"), Register::Value::Label("v0")}, {}, " v0 = v0 * 4"),
Instruction::Comment(" global read addresses: tile offset assignment b "),
Instruction::Comment(" LVCB = 16 "),
Instruction::Comment(" v2 = (local)groB-tile = serial%LVCB (note (wgB*MTB) will be added to SRD) "),
Instruction::Comment(" v3 = groB-unroll = serial/LVCB "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v3")}, {Register::Value::Literal(4), Register::Value::Label("v[vgprSerial]")}, {}, " v3 = v[vgprSerial] / 16"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Literal(15), Register::Value::Label("v[vgprSerial]")}, {}, " v2 = v[vgprSerial] % 16"),
Instruction::Comment(" gro-tile *= glvw "),
Instruction("v_lshlrev_b32", {Register::Value::Label("v2")}, {Register::Value::Label("0x2"), Register::Value::Label("v2")}, {}, " v2 = v2 * 4"),
Instruction::Comment(" global read addresses: unroll assignment a "),
Instruction::Comment(" v1 "),
Instruction::Comment(" global read addresses: unroll assignment b "),
Instruction::Comment(" v3 "),
Instruction::Comment(" global read addresses: other free assignments "),
Instruction::Comment(" s[sgprWorkGroup2] "),
Instruction::Comment(" global read addresses: tile offsets a "),
Instruction::Comment(" global read addresses: tile offsets b "),
Instruction::Comment(" global read addresses: unroll offsets a "),
Instruction::Comment(" global read addresses: unroll offsets b "),
Instruction::Comment(" global read addresses: final offsets a "),
Instruction("GLOBAL_OFFSET_A", {Register::Value::Label("vgprGlobalReadOffsetA+0")}, {Register::Value::Literal(0), Register::Value::Literal(1), Register::Value::Literal(4)}, {}, " gROA_0_0_0_0"),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprScalarGlobalReadOffsetA+0]")}, {Register::Value::Label("s[sgprStrideAL]"), Register::Value::Literal(8)}, {}, " compute offset diff (scaled unrollDim)"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprScalarGlobalReadOffsetA+0]")}, {Register::Value::Label("s[sgprScalarGlobalReadOffsetA+0]"), Register::Value::Label("0x2")}, {}, " scalar offset *= bytes/element"),
Instruction::Comment(" global read addresses: final offsets b "),
Instruction("GLOBAL_OFFSET_B", {Register::Value::Label("vgprGlobalReadOffsetB+0")}, {Register::Value::Literal(2), Register::Value::Literal(3), Register::Value::Literal(4)}, {}, " gROB_0_0_0_0"),
Instruction::Comment(" global read addresses: addresses a "),
Instruction::Comment(" max read offset = size[n] * stride[n-1] "),
Instruction("s_mul_hi_u32", {Register::Value::Label("s65")}, {Register::Value::Label("s[sgprWorkGroup0]"), Register::Value::Literal(128)}, {}, " WorkGroup[01] * MT"),
Instruction("s_mul_i32", {Register::Value::Label("s64")}, {Register::Value::Label("s[sgprWorkGroup0]"), Register::Value::Literal(128)}, {}, " WorkGroup[01] * MT"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprTensor2dSizeA]"), Register::Value::Label("s64")}, {}, " sub tileStart"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprTensor2dSizeA+1]"), Register::Value::Label("s65")}, {}, " sub tileStart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[sgprShadowLimitA:sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA:sgprShadowLimitA+1]"), Register::Value::Label("0x2")}, {}, " Set limit to use bytes"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Literal(16)}, {}, " extend limit for pre-pad"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Literal(0)}, {}, " extend limit for pre-pad"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Literal(0)}, {}, " are we within 2^32?"),
Instruction("s_cselect_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("BufferLimit")}, {}, " Move shadow to real if we are within 2^32"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprStrideAK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprStrideAK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_add_u32", {Register::Value::Label("s64")}, {Register::Value::Label("s64"), Register::Value::Label("s62")}, {}, " accum wg term to tilestart"),
Instruction("s_addc_u32", {Register::Value::Label("s65")}, {Register::Value::Label("s65"), Register::Value::Label("s63")}, {}, " accum wg term to tilestart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[64:65]")}, {Register::Value::Label("s[64:65]"), Register::Value::Label("0x2")}, {}, " tileStart *= BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Label("s64")}, {}, " SRD base = Address+ tileStart0"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Label("s65")}, {}, " SRD base = Address+ tileStart1"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdA+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in SRD"),
Instruction::Comment(" global read addresses: addresses b "),
Instruction::Comment(" max read offset = size[n] * stride[n-1] "),
Instruction("s_mul_hi_u32", {Register::Value::Label("s65")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Literal(64)}, {}, " WorkGroup[01] * MT"),
Instruction("s_mul_i32", {Register::Value::Label("s64")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Literal(64)}, {}, " WorkGroup[01] * MT"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprTensor2dSizeB]"), Register::Value::Label("s64")}, {}, " sub tileStart"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprTensor2dSizeB+1]"), Register::Value::Label("s65")}, {}, " sub tileStart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[sgprShadowLimitB:sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB:sgprShadowLimitB+1]"), Register::Value::Label("0x2")}, {}, " Set limit to use bytes"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Literal(16)}, {}, " extend limit for pre-pad"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Literal(0)}, {}, " extend limit for pre-pad"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Literal(0)}, {}, " are we within 2^32?"),
Instruction("s_cselect_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("BufferLimit")}, {}, " Move shadow to real if we are within 2^32"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprStrideBK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprStrideBK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_add_u32", {Register::Value::Label("s64")}, {Register::Value::Label("s64"), Register::Value::Label("s62")}, {}, " accum wg term to tilestart"),
Instruction("s_addc_u32", {Register::Value::Label("s65")}, {Register::Value::Label("s65"), Register::Value::Label("s63")}, {}, " accum wg term to tilestart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[64:65]")}, {Register::Value::Label("s[64:65]"), Register::Value::Label("0x2")}, {}, " tileStart *= BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Label("s64")}, {}, " SRD base = Address+ tileStart0"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Label("s65")}, {}, " SRD base = Address+ tileStart1"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdB+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in SRD"),
Instruction::Comment(" global read addresses: increments a "),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {Register::Value::Label("DepthU*BpeA"), Register::Value::Label("s[sgprStrideAL]")}, {}, " incrA unrollIdx)"),
Instruction::Comment(" global read addresses: increments b "),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {Register::Value::Label("DepthU*BpeB"), Register::Value::Label("s[sgprStrideBL]")}, {}, " incrB unrollIdx)"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Local Write Addresses                  "),
Instruction::Comment("****************************************"),
Instruction::Comment(" lwaTileAssignmentA = v0 "),
Instruction::Comment(" lwaTileAssignmentB = v2 "),
Instruction::Comment(" lwaUnrollAssignmentA = v1 "),
Instruction::Comment(" lwaUnrollAssignmentB = v3 "),
Instruction::Comment(" local write addresses: first offset a "),
Instruction("v_mul_u32_u24", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("0x80"), Register::Value::Label("v1")}, {}, " lwAL**(MTA + PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v0"), Register::Value::Label("v[vgprLocalWriteAddrA]"), Register::Value::Label("0x2")}, {}, " lwFOA = (lwAA + lwAL*(MT0I+PAD))*bpe"),
Instruction::Comment(" local write addresses: first offset b "),
Instruction("v_mul_u32_u24", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("0x40"), Register::Value::Label("v3")}, {}, " lwBL**(MTB + PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v2"), Register::Value::Label("v[vgprLocalWriteAddrB]"), Register::Value::Label("0x2")}, {}, " lwFOB = (lwBB + lwBL*(MT1J+PAD))*bpe"),
Instruction("_v_add_co_u32", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {m_context->getVCC(), Register::Value::Label("0x2000"), Register::Value::Label("v[vgprLocalWriteAddrB]")}, {}, " lwFOB = lwB1J + lwBL*MT1J + LDS_OFFSET_B=2048*4"),
Instruction::Comment(" declare loop num iterations "),
Instruction("s_lshr_b32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("s[sgprSizesSum+0]"), Register::Value::Literal(4)}, {}, " s[sgprLoopCounterL] = s[sgprSizesSum+0] / 16"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprOrigLoopCounter]")}, {Register::Value::Label("s[sgprLoopCounterL]")}, {}, " copy loop counter"),
Instruction::Comment(" local read addresses: init pointers a "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" local read addresses: init pointers b "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" prefetch: global -> local "),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Literal(0)}, {}, " at last iteration?"),
Instruction("s_cbranch_scc1", {}, {label_1}, {}, " skip to ShadowInitStart iter b/c numIter==0"),
Instruction("buffer_load_dwordx4", {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " G -> Reg 0_0_0_0"),
Instruction("buffer_load_dwordx4", {Register::Value::Label("v[vgprG2LA+4:vgprG2LA+4+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("s[sgprScalarGlobalReadOffsetA+0]")}, {"offen", "offset:0"}, " G -> Reg 0_0_1_0"),
Instruction("buffer_load_dwordx4", {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " G -> Reg 0_0_0_0"),
Instruction::Comment(" global read inc A loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprSrdA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprSrdA+1]"), Register::Value::Literal(0)}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Literal(0)}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Literal(0)}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" global read inc B loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprSrdB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprSrdB+1]"), Register::Value::Literal(0)}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Literal(0)}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Literal(0)}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment("****************************************"),
Instruction::Comment(" End setupNewTile, isPap=False             "),
Instruction::Comment("****************************************"),
Instruction::Label(label_1),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprAddressD+0]")}, {}, " init SRD base address (lower)"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprAddressD+1]")}, {}, " init SRD base address (upper) + other fields"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+2]")}, {Register::Value::Label("0x80000000")}, {}, ""),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in post-loop SRD"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprAddressC+0]")}, {}, " init SRD base address (lower)"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprAddressC+1]")}, {}, " init SRD base address (upper) + other fields"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+2]")}, {Register::Value::Label("0x80000000")}, {}, ""),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in post-loop SRD"),
Instruction("s_mul_i32", {Register::Value::Label("s64")}, {Register::Value::Label("MT1"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " <- wg1*MT1"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s64"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " CScale s64 by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s64"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " CScale s64 by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[62:63]")}, {Register::Value::Label("s[62:63]"), Register::Value::Literal(2)}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprAddressC+0]"), Register::Value::Label("s62")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprAddressC+1]"), Register::Value::Label("s63")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s64"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Scale s64 by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s64"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Scale s64 by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[62:63]")}, {Register::Value::Label("s[62:63]"), Register::Value::Literal(2)}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprAddressD+0]"), Register::Value::Label("s62")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprAddressD+1]"), Register::Value::Label("s63")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideCK]")}, {}, " CScale s[sgprWorkGroup2] by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideCK]")}, {}, " CScale s[sgprWorkGroup2] by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[62:63]")}, {Register::Value::Label("s[62:63]"), Register::Value::Literal(2)}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s62")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Label("s63")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideDK]")}, {}, " Scale s[sgprWorkGroup2] by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideDK]")}, {}, " Scale s[sgprWorkGroup2] by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[62:63]")}, {Register::Value::Label("s[62:63]"), Register::Value::Literal(2)}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s62")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("s63")}, {}, " add hi to SRD"),
Instruction::Comment(" initC: remove C-tile 0-0 from pool "),
Instruction::Comment(" initC: remove AB-tile 0-24 from pool "),
Instruction("v_accvgpr_write", {Register::Value::Label("acc0")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc1")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc2")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc3")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc4")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc5")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc6")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc7")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc8")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc9")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc10")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc11")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc12")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc13")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc14")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc15")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc16")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc17")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc18")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc19")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc20")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc21")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc22")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc23")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc24")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc25")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc26")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc27")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc28")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc29")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc30")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc31")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Literal(0)}, {}, " at last iteration?"),
Instruction::Comment(" after InitC, skip to end of prefetch last iter if numIter==0 "),
Instruction("s_cbranch_scc0", {}, {label_2}, {}, " Only branch on scc1"),
Instruction("s_getpc_B64", {Register::Value::Label("s[62:63]")}, {}, {}, " addr of next instr"),
Instruction("s_add_i32", {Register::Value::Label("s64")}, {label_6, Register::Value::Label("0x4")}, {}, " target branch offset"),
Instruction("s_add_u32", {Register::Value::Label("s62")}, {Register::Value::Label("s62"), Register::Value::Label("s64")}, {}, " add target branch offset"),
Instruction("s_addc_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s63"), Register::Value::Literal(0)}, {}, " add high and carry"),
Instruction("s_setpc_b64", {Register::Value::Label("s[62:63]")}, {}, {}, " branch to LoopEndL_2"),
Instruction::Label(label_2),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, " lgkmcnt=-1 vmcnt=08wait for global read"),
Instruction::Comment(" local write a "),
Instruction("ds_write_b128", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3] offset:0")}, {}, " lwoA_0_0_0_0 = (0*LSCA) + (0*LSPA)(*MT0I+PAD) = 0"),
Instruction("ds_write_b128", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+4:vgprG2LA+4+3] offset:4096")}, {}, " lwoA_0_0_1_0 = (0*LSCA) + (1*LSPA)(*MT0I+PAD) = 4096"),
Instruction::Comment(" local write b "),
Instruction("ds_write_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3] offset:0")}, {}, " lwoB_0_0_0_0 = (0*LSCB) + (0*LSPB)(*MT1J+PAD) = 0"),
Instruction::Comment(" local write swap a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local write swap b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {}, " swap Red Blk"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-10prefetch wait for local write"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0) & vmcnt(0)")}, {}, {}, " force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction::Comment(" local read prefetch a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read prefetch b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read inc a "),
Instruction::Comment(" N/A, lro->256 "),
Instruction::Comment(" self.localReadDoCntA 1 self.localReadDoCntB 1 "),
Instruction::Comment(" local read inc b "),
Instruction::Comment(" N/A, lro->128 "),
Instruction::Comment(" self.localReadDoCntA 1 self.localReadDoCntB 1 "),
};
            // clang-format on
        }

        std::vector<Instruction> body0()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop(s) - Begin               "),
Instruction::Comment("****************************************"),
Instruction::Label(label_3),
Instruction("s_cmp_le_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x0")}, {}, " LoopCounterL < EndCounter"),
Instruction("s_cbranch_scc1", {}, {label_6}, {}, " do not enter LoopL"),
Instruction::Label(label_4),
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop 1/1 - Begin              "),
Instruction::Comment("****************************************"),
Instruction::Label(label_5),
Instruction::Comment(" Begin Each Unroll: Check VGPR.checkin for INT8 LW "),
Instruction("s_cmp_eq_i32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Literal(1)}, {}, " is this the last iteration"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Literal(0)}, {}, " Set limit to 0 for last iteration"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Literal(0)}, {}, " Set limit to 0 for last iteration"),
Instruction::Comment(" iter 0 "),
Instruction("buffer_load_dwordx4", {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " G -> Reg 0_0_0_0"),
Instruction("buffer_load_dwordx4", {Register::Value::Label("v[vgprG2LA+4:vgprG2LA+4+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("s[sgprScalarGlobalReadOffsetA+0]")}, {"offen", "offset:0"}, " G -> Reg 0_0_1_0"),
Instruction::Comment(" local read a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1024")}, {}, " L -> Reg lro=256 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1280")}, {}, " L -> Reg lro=256 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" local read b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:512")}, {}, " L -> Reg lro=128 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->512 "),
Instruction::Comment(" self.localReadDoCntA 2 self.localReadDoCntB 2 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->256 "),
Instruction::Comment(" self.localReadDoCntA 2 self.localReadDoCntB 2 "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=3 newLW=0 newLR=3"),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X0_I0+0+0+0]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X0_I0+1+0+0]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=-1 numReadsIterA=1 skipReadsIterA=1 readsPerIterA=2 "),
Instruction::Comment(" dataAtIterB=-1 numReadsIterB=1 skipReadsIterB=1 readsPerIterB=1 "),
Instruction::Comment(" iter 1 "),
Instruction("buffer_load_dwordx4", {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " G -> Reg 0_0_0_0"),
Instruction::Comment(" local read a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X2_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2048")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=2 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X2_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:2304")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=2 iui=0"),
Instruction::Comment(" local read b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X2_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1024")}, {}, " L -> Reg lro=256 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=2 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->768 "),
Instruction::Comment(" self.localReadDoCntA 3 self.localReadDoCntB 3 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->384 "),
Instruction::Comment(" self.localReadDoCntA 3 self.localReadDoCntB 3 "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=3 newLW=0 newLR=3"),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuB_X1_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X1_I0+0+0+0]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuB_X1_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X1_I0+1+0+0]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=0 numReadsIterA=2 skipReadsIterA=1 readsPerIterA=2 "),
Instruction::Comment(" dataAtIterB=0 numReadsIterB=2 skipReadsIterB=1 readsPerIterB=1 "),
Instruction::Comment(" iter 2 "),
Instruction::Comment(" global read inc A loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprSrdA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprSrdA+1]"), Register::Value::Literal(0)}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Literal(0)}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Literal(0)}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" local read a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X3_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:3072")}, {}, " L -> Reg lro=768 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=3 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X3_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:3328")}, {}, " L -> Reg lro=768 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=3 iui=0"),
Instruction::Comment(" local read b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X3_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1536")}, {}, " L -> Reg lro=384 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=3 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->1024 "),
Instruction::Comment(" self.localReadDoCntA 4 self.localReadDoCntB 4 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->512 "),
Instruction::Comment(" self.localReadDoCntA 4 self.localReadDoCntB 4 "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=3 newLW=0 newLR=3"),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuB_X2_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X2_I0+0+0+0]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuB_X2_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X2_I0+1+0+0]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=1 numReadsIterA=3 skipReadsIterA=1 readsPerIterA=2 "),
Instruction::Comment(" dataAtIterB=1 numReadsIterB=3 skipReadsIterB=1 readsPerIterB=1 "),
Instruction::Comment(" iter 3 "),
Instruction::Comment(" global read inc B loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprSrdB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprSrdB+1]"), Register::Value::Literal(0)}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Literal(0)}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Literal(0)}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" local read a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X4_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:4096")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=4 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X4_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:4352")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=4 iui=0"),
Instruction::Comment(" local read b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X4_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:2048")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=4 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->1280 "),
Instruction::Comment(" self.localReadDoCntA 5 self.localReadDoCntB 5 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->640 "),
Instruction::Comment(" self.localReadDoCntA 5 self.localReadDoCntB 5 "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(3)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=3 newLW=0 newLR=3"),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuB_X3_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X3_I0+0+0+0]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuB_X3_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X3_I0+1+0+0]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=2 numReadsIterA=4 skipReadsIterA=1 readsPerIterA=2 "),
Instruction::Comment(" dataAtIterB=2 numReadsIterB=4 skipReadsIterB=1 readsPerIterB=1 "),
Instruction::Comment(" iter 4 "),
Instruction::Comment(" local read a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X5_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:5120")}, {}, " L -> Reg lro=1280 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=5 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X5_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:5376")}, {}, " L -> Reg lro=1280 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=5 iui=0"),
Instruction::Comment(" local read b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X5_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:2560")}, {}, " L -> Reg lro=640 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=5 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->1536 "),
Instruction::Comment(" self.localReadDoCntA 6 self.localReadDoCntB 6 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->768 "),
Instruction::Comment(" self.localReadDoCntA 6 self.localReadDoCntB 6 "),
Instruction::Comment(" sched write - iter 4 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(2)")}, {}, {}, " lgkmcnt=-1 vmcnt=2wait for global read before writing to local"),
Instruction("ds_write_b128", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+3] offset:0")}, {}, " lwoA_0_0_0_0 = (0*LSCA) + (0*LSPA)(*MT0I+PAD) = 0"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=4 newLW=1 newLR=3"),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuB_X4_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X4_I0+0+0+0]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuB_X4_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X4_I0+1+0+0]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=3 numReadsIterA=5 skipReadsIterA=1 readsPerIterA=2 "),
Instruction::Comment(" dataAtIterB=3 numReadsIterB=5 skipReadsIterB=1 readsPerIterB=1 "),
Instruction::Comment(" iter 5 "),
Instruction::Comment(" local read a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X6_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:6144")}, {}, " L -> Reg lro=1536 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=6 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X6_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:6400")}, {}, " L -> Reg lro=1536 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=6 iui=0"),
Instruction::Comment(" local read b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X6_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:3072")}, {}, " L -> Reg lro=768 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=6 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->1792 "),
Instruction::Comment(" self.localReadDoCntA 7 self.localReadDoCntB 7 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->896 "),
Instruction::Comment(" self.localReadDoCntA 7 self.localReadDoCntB 7 "),
Instruction::Comment(" sched write - iter 5 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(1)")}, {}, {}, " lgkmcnt=-1 vmcnt=1wait for global read before writing to local"),
Instruction("ds_write_b128", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+4:vgprG2LA+4+3] offset:4096")}, {}, " lwoA_0_0_1_0 = (0*LSCA) + (1*LSPA)(*MT0I+PAD) = 4096"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=5 newLW=2 newLR=3"),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuB_X5_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X5_I0+0+0+0]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuB_X5_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X5_I0+1+0+0]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=4 numReadsIterA=6 skipReadsIterA=1 readsPerIterA=2 "),
Instruction::Comment(" dataAtIterB=4 numReadsIterB=6 skipReadsIterB=1 readsPerIterB=1 "),
Instruction::Comment(" iter 6 (reset local read pointers iteration)  (swap and reset local write pointers iteration)  (swap local read pointers iteration)  "),
Instruction::Comment(" local read a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X7_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:7168")}, {}, " L -> Reg lro=1792 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=7 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X7_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:7424")}, {}, " L -> Reg lro=1792 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=7 iui=0"),
Instruction::Comment(" local read b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X7_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:3584")}, {}, " L -> Reg lro=896 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=7 iui=0"),
Instruction::Comment(" sched write - iter 6 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, " lgkmcnt=-1 vmcnt=0wait for global read before writing to local"),
Instruction("ds_write_b128", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+3] offset:0")}, {}, " lwoB_0_0_0_0 = (0*LSCB) + (0*LSPB)(*MT1J+PAD) = 0"),
Instruction::Comment(" local write swap offsets a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local write swap offsets b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read swap offsets a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalReadAddrA]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read swap offsets b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {Register::Value::Label("0x4000"), Register::Value::Label("v[vgprLocalReadAddrB]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read init pointers a "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" local read init pointers b "),
Instruction::Comment(" localReadInitPointers "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(5)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=5 newLW=2 newLR=3"),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuB_X6_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X6_I0+0+0+0]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuB_X6_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X6_I0+1+0+0]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=5 numReadsIterA=7 skipReadsIterA=1 readsPerIterA=2 "),
Instruction::Comment(" dataAtIterB=5 numReadsIterB=7 skipReadsIterB=1 readsPerIterB=1 "),
Instruction::Comment(" iter 7 "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-13wait for local write"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0) & vmcnt(0)")}, {}, {}, " force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction::Comment(" local read a "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=1 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read b "),
Instruction("ds_read_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->256 "),
Instruction::Comment(" self.localReadDoCntA 9 self.localReadDoCntB 9 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->128 "),
Instruction::Comment(" self.localReadDoCntA 9 self.localReadDoCntB 9 "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(4)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=4 newLW=1 newLR=3"),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[0+0:15+0]")}, {Register::Value::Label("v[vgprValuB_X7_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X7_I0+0+0+0]"), Register::Value::Label("a[0:15]")}, {}, ""),
Instruction("v_mfma_f32_32x32x2f32", {Register::Value::Label("a[16+0:31+0]")}, {Register::Value::Label("v[vgprValuB_X7_I0+0+0+0]"), Register::Value::Label("v[vgprValuA_X7_I0+1+0+0]"), Register::Value::Label("a[16:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=1 "),
Instruction::Comment(" dataAtIterA=6 numReadsIterA=7 skipReadsIterA=1 readsPerIterA=2 "),
Instruction::Comment(" dataAtIterB=6 numReadsIterB=7 skipReadsIterB=1 readsPerIterB=1 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop - End                    "),
Instruction::Comment("****************************************"),
Instruction::Comment(" closeLoop loopL finalLoop=1 tailLoop=0 "),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("s[sgprLoopCounterL]"), Register::Value::Literal(1)}, {}, " dec counterL"),
Instruction("s_cmp_eq_i32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x0")}, {}, " counterL==0"),
Instruction("s_cbranch_scc0", {}, {label_4}, {}, " restart LoopL"),
Instruction::Label(label_6),
Instruction::Comment(" Before NLL: Check VGPR.checkin for INT8 LW "),
Instruction::Label(label_7),
Instruction::Comment(" endSummation: add vgpr [0...40) to pool "),
Instruction(".set NumFullBlocks, UNDEF", {}, {}, {}, ""),
Instruction(".set WgmRemainder1, UNDEF", {}, {}, {}, ""),
Instruction(".set MagicNumberWgmRemainder1, UNDEF", {}, {}, {}, ""),
Instruction(".set ShadowLimitA, UNDEF", {}, {}, {}, ""),
Instruction(".set ShadowLimitB, UNDEF", {}, {}, {}, ""),
Instruction(".set ScalarGlobalReadOffsetA, UNDEF", {}, {}, {}, ""),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0) & vmcnt(0)")}, {}, {}, " wait for all summation activity"),
};
            // clang-format on
        }

        std::vector<Instruction> body1()
        {
            // clang-format off
return {
Instruction::Comment(" Mapping of Acc register -> C Vgpr register "),
Instruction::Comment(" not-LocalSplitU: global write indices "),
Instruction::Comment(" computeStoreVgprs "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v4")}, {Register::Value::Literal(6), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] / 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v5")}, {Register::Value::Literal(1), Register::Value::Label("v4")}, {}, " v5 = v4 / 2"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v5")}, {Register::Value::Label("0x20"), Register::Value::Label("v5")}, {}, " wave coordination offset 1"),
Instruction("v_and_b32", {Register::Value::Label("v1")}, {Register::Value::Literal(63), Register::Value::Label("v[vgprSerial]")}, {}, " v1 = v[vgprSerial] % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v1")}, {Register::Value::Literal(5), Register::Value::Label("v1")}, {}, " v1 = v1 / 32"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v1")}, {Register::Value::Label("0x2"), Register::Value::Label("v1")}, {}, " thread0 * continuous_output"),
Instruction("v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v5"), Register::Value::Label("v1")}, {}, " coordination 1 = wave_id1 + tid1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprStrideC1J]")}, {}, "  offset 1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprStrideD1J]")}, {}, "  offset 1"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Literal(1), Register::Value::Label("v4")}, {}, " v0 = v4 % 2"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v0")}, {Register::Value::Label("0x20"), Register::Value::Label("v0")}, {}, " wave coordination offset 0"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Literal(31), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] % 32"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v0")}, {Register::Value::Label("v5"), Register::Value::Label("v0"), Register::Value::Literal(0)}, {}, " coordination 0 = wave_id0 + tid0"),
Instruction("s_mul_i32", {Register::Value::Label("s53")}, {Register::Value::Literal(128), Register::Value::Label("s[sgprWorkGroup0]")}, {}, " wgp0 * MT0"),
Instruction("v_add_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s53"), Register::Value::Label("v0")}, {}, " coord 0 = (tid0/MI_m)*4 + waveG0*MIB_m + MT0*SG0"),
Instruction("s_mul_i32", {Register::Value::Label("s53")}, {Register::Value::Literal(64), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " wgp1 * MT1"),
Instruction("v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("s53"), Register::Value::Label("v1")}, {}, " coord 1 = (tid0%MI_m) + waveG1*MIB_n + MT1*SG1"),
Instruction::Comment(" not-LocalSplitU: global write "),
Instruction("s_cmpk_eq_u32", {Register::Value::Label("s[sgprBeta]")}, {Register::Value::Label("0x0")}, {}, " Beta == 0"),
Instruction("s_cbranch_scc0", {}, {label_10}, {}, " Branch if Beta is not zero"),
Instruction("s_and_b32", {Register::Value::Label("s54")}, {Register::Value::Literal(127), Register::Value::Label("s[sgprSizeI]")}, {}, " s54 = s[sgprSizeI] % 128"),
Instruction("s_add_u32", {Register::Value::Label("s55")}, {Register::Value::Label("-0x1"), Register::Value::Label("s[sgprNumWorkGroups0]")}, {}, ""),
Instruction("s_cmp_ge_u32", {Register::Value::Label("s[sgprWorkGroup0]")}, {Register::Value::Label("s55")}, {}, " wg0 >= nwg0-1 ?"),
Instruction("s_cselect_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s54"), Register::Value::Literal(0)}, {}, " set rMT0"),
Instruction("s_cmpk_gt_u32", {Register::Value::Label("s54")}, {Register::Value::Label("0x0")}, {}, " rMT0 > 0"),
Instruction("s_cbranch_scc1", {}, {label_9}, {}, " jump if edges required"),
Instruction("s_and_b32", {Register::Value::Label("s54")}, {Register::Value::Literal(63), Register::Value::Label("s[sgprSizeJ]")}, {}, " s54 = s[sgprSizeJ] % 64"),
Instruction("s_add_u32", {Register::Value::Label("s55")}, {Register::Value::Label("-0x1"), Register::Value::Label("s[sgprNumWorkGroups1]")}, {}, ""),
Instruction("s_cmp_ge_u32", {Register::Value::Label("s[sgprWorkGroup1]")}, {Register::Value::Label("s55")}, {}, " wg1 >= nwg1-1"),
Instruction("s_cselect_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s54"), Register::Value::Literal(0)}, {}, " set rMT1"),
Instruction("s_cmpk_gt_u32", {Register::Value::Label("s54")}, {Register::Value::Label("0x0")}, {}, " rMT1 > 0"),
Instruction("s_cbranch_scc1", {}, {label_9}, {}, " jump if edges required"),
Instruction::Label(label_8),
Instruction::Comment(" edge=0, allocate 2 sgpr. perBatchTmpS=2 perBatchMaskS=0 perElementMaskS=0 elementsPerBatch=213 "),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #0 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (0,0,0,0:vw1); (0,1,0,0:vw1); (0,0,1,0:vw1); (0,1,1,0:vw1); (0,0,2,0:vw1); (0,1,2,0:vw1); (0,0,3,0:vw1); (0,1,3,0:vw1); (1,0,0,0:vw1); (1,1,0,0:vw1); (1,0,1,0:vw1); (1,1,1,0:vw1); (1,0,2,0:vw1); (1,1,2,0:vw1); (1,0,3,0:vw1); (1,1,3,0:vw1); (2,0,0,0:vw1); (2,1,0,0:vw1); (2,0,1,0:vw1); (2,1,1,0:vw1); (2,0,2,0:vw1); (2,1,2,0:vw1); (2,0,3,0:vw1); (2,1,3,0:vw1); (3,0,0,0:vw1); (3,1,0,0:vw1); (3,0,1,0:vw1); (3,1,1,0:vw1); (3,0,2,0:vw1); (3,1,2,0:vw1); (3,0,3,0:vw1); (3,1,3,0:vw1) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,1,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,1,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,2,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,2,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,3,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,3,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,1,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,1,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,2,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,2,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,3,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,3,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,1,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,1,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,2,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,2,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,3,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,3,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,1,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,1,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,2,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,2,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,3,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,3,1,0) "),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " optSingleColVgpr scaleToBpe: sharedAddrVgpr <- cinRowPtr + coord0, scaled by BPE. BSHERE:coord0=0, coord0Vgpr=0"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+8]")}, {Register::Value::Label("acc0")}, {}, " copy acc to vreg[0]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("acc16")}, {}, " copy acc to vreg[1]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+10]")}, {Register::Value::Label("acc1")}, {}, " copy acc to vreg[2]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("acc17")}, {}, " copy acc to vreg[3]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc2")}, {}, " copy acc to vreg[4]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc18")}, {}, " copy acc to vreg[5]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc3")}, {}, " copy acc to vreg[6]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc19")}, {}, " copy acc to vreg[7]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("acc4")}, {}, " copy acc to vreg[8]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc20")}, {}, " copy acc to vreg[9]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("acc5")}, {}, " copy acc to vreg[10]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc21")}, {}, " copy acc to vreg[11]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc6")}, {}, " copy acc to vreg[12]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc22")}, {}, " copy acc to vreg[13]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("acc7")}, {}, " copy acc to vreg[14]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc23")}, {}, " copy acc to vreg[15]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc8")}, {}, " copy acc to vreg[16]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc24")}, {}, " copy acc to vreg[17]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc9")}, {}, " copy acc to vreg[18]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc25")}, {}, " copy acc to vreg[19]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc10")}, {}, " copy acc to vreg[20]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc26")}, {}, " copy acc to vreg[21]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc11")}, {}, " copy acc to vreg[22]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc27")}, {}, " copy acc to vreg[23]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc12")}, {}, " copy acc to vreg[24]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc28")}, {}, " copy acc to vreg[25]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc13")}, {}, " copy acc to vreg[26]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc29")}, {}, " copy acc to vreg[27]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc14")}, {}, " copy acc to vreg[28]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc30")}, {}, " copy acc to vreg[29]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc15")}, {}, " copy acc to vreg[30]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc31")}, {}, " copy acc to vreg[31]"),
Instruction("s_nop", {Register::Value::Literal(1)}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 1, 0), (0, 0, 2, 0), (0, 1, 2, 0), (0, 0, 3, 0), (0, 1, 3, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 1, 1, 0), (1, 0, 2, 0), (1, 1, 2, 0), (1, 0, 3, 0), (1, 1, 3, 0), (2, 0, 0, 0), (2, 1, 0, 0), (2, 0, 1, 0), (2, 1, 1, 0), (2, 0, 2, 0), (2, 1, 2, 0), (2, 0, 3, 0), (2, 1, 3, 0), (3, 0, 0, 0), (3, 1, 0, 0), (3, 0, 1, 0), (3, 1, 1, 0), (3, 0, 2, 0), (3, 1, 2, 0), (3, 0, 3, 0), (3, 1, 3, 0)] "),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+8]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+8]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+9]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+10]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+10]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+11]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+12]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+14]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+16]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+16]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+18]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+18]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+20]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+22]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+22]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+24]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+26]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+28]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+30]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+32]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+34]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+36]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+38]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " *= alpha"),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v8"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v9"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v10"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v11"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v12"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v13"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v14"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v15"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(20)}, {}, " scale StrideD *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v16"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v17"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v18"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v19"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v20"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v21"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v22"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v23"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(20)}, {}, " scale StrideD *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v24"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v25"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v26"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v27"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v28"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v29"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v30"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v31"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(20)}, {}, " scale StrideD *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v32"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v33"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v34"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v35"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v36"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v37"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v38"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v39"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_nop", {Register::Value::Literal(0)}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction("s_branch", {}, {label_13}, {}, " jump to end"),
};
            // clang-format on
        }

        std::vector<Instruction> body2()
        {
            // clang-format off
return {
Instruction::Label(label_9),
Instruction::Comment(" edge=1, allocate 6 sgpr. perBatchTmpS=4 perBatchMaskS=2 perElementMaskS=0 elementsPerBatch=107 "),
Instruction::Comment(" optSingleColVgpr=0 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Edge_Mask optSrdIncForRow=0 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Edge Batch #0 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (0,0,0,0:vw1); (0,1,0,0:vw1); (0,0,1,0:vw1); (0,1,1,0:vw1); (0,0,2,0:vw1); (0,1,2,0:vw1); (0,0,3,0:vw1); (0,1,3,0:vw1); (1,0,0,0:vw1); (1,1,0,0:vw1); (1,0,1,0:vw1); (1,1,1,0:vw1); (1,0,2,0:vw1); (1,1,2,0:vw1); (1,0,3,0:vw1); (1,1,3,0:vw1); (2,0,0,0:vw1); (2,1,0,0:vw1); (2,0,1,0:vw1); (2,1,1,0:vw1); (2,0,2,0:vw1); (2,1,2,0:vw1); (2,0,3,0:vw1); (2,1,3,0:vw1); (3,0,0,0:vw1); (3,1,0,0:vw1); (3,0,1,0:vw1); (3,1,1,0:vw1); (3,0,2,0:vw1); (3,1,2,0:vw1); (3,0,3,0:vw1); (3,1,3,0:vw1) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,0,0) "),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v6")}, {Register::Value::Label("-1"), Register::Value::Label("v6"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v8")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v8")}, {Register::Value::Label("-1"), Register::Value::Label("v8"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,1,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v10")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v10")}, {Register::Value::Label("-1"), Register::Value::Label("v10"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,1,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v12")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v12")}, {Register::Value::Label("-1"), Register::Value::Label("v12"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,2,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v14")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v14")}, {Register::Value::Label("-1"), Register::Value::Label("v14"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,2,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v16")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v16")}, {Register::Value::Label("-1"), Register::Value::Label("v16"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,3,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v18")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v18")}, {Register::Value::Label("-1"), Register::Value::Label("v18"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,3,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v20")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v20")}, {Register::Value::Label("-1"), Register::Value::Label("v20"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(5)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s54")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s54")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v22")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v22")}, {Register::Value::Label("-1"), Register::Value::Label("v22"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v24")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v24")}, {Register::Value::Label("-1"), Register::Value::Label("v24"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,1,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v26")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v26")}, {Register::Value::Label("-1"), Register::Value::Label("v26"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,1,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v28")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v28")}, {Register::Value::Label("-1"), Register::Value::Label("v28"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,2,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v30")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v30")}, {Register::Value::Label("-1"), Register::Value::Label("v30"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,2,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v32")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v32")}, {Register::Value::Label("-1"), Register::Value::Label("v32"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,3,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v34")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v34")}, {Register::Value::Label("-1"), Register::Value::Label("v34"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,3,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v36")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v36")}, {Register::Value::Label("-1"), Register::Value::Label("v36"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(5)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s54")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s54")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v38")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v38")}, {Register::Value::Label("-1"), Register::Value::Label("v38"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v43")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v43")}, {Register::Value::Label("-1"), Register::Value::Label("v43"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,1,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v45")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v45")}, {Register::Value::Label("-1"), Register::Value::Label("v45"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,1,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v47")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v47")}, {Register::Value::Label("-1"), Register::Value::Label("v47"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,2,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v49")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v49")}, {Register::Value::Label("-1"), Register::Value::Label("v49"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,2,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v51")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v51")}, {Register::Value::Label("-1"), Register::Value::Label("v51"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,3,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v53")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v53")}, {Register::Value::Label("-1"), Register::Value::Label("v53"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,3,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v55")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v55")}, {Register::Value::Label("-1"), Register::Value::Label("v55"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(5)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s54")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s54")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v57")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v57")}, {Register::Value::Label("-1"), Register::Value::Label("v57"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v59")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v59")}, {Register::Value::Label("-1"), Register::Value::Label("v59"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,1,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v61")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v61")}, {Register::Value::Label("-1"), Register::Value::Label("v61"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,1,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v63")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v63")}, {Register::Value::Label("-1"), Register::Value::Label("v63"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,2,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v65")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v65")}, {Register::Value::Label("-1"), Register::Value::Label("v65"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,2,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v67")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v67")}, {Register::Value::Label("-1"), Register::Value::Label("v67"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,3,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v69")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v69")}, {Register::Value::Label("-1"), Register::Value::Label("v69"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,3,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v71")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v71")}, {Register::Value::Label("-1"), Register::Value::Label("v71"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+7]")}, {Register::Value::Label("acc0")}, {}, " copy acc to vreg[0]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("acc16")}, {}, " copy acc to vreg[1]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("acc1")}, {}, " copy acc to vreg[2]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc17")}, {}, " copy acc to vreg[3]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc2")}, {}, " copy acc to vreg[4]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc18")}, {}, " copy acc to vreg[5]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc3")}, {}, " copy acc to vreg[6]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc19")}, {}, " copy acc to vreg[7]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc4")}, {}, " copy acc to vreg[8]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc20")}, {}, " copy acc to vreg[9]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc5")}, {}, " copy acc to vreg[10]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc21")}, {}, " copy acc to vreg[11]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc6")}, {}, " copy acc to vreg[12]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc22")}, {}, " copy acc to vreg[13]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc7")}, {}, " copy acc to vreg[14]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc23")}, {}, " copy acc to vreg[15]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc8")}, {}, " copy acc to vreg[16]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("acc24")}, {}, " copy acc to vreg[17]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+46]")}, {Register::Value::Label("acc9")}, {}, " copy acc to vreg[18]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc25")}, {}, " copy acc to vreg[19]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc10")}, {}, " copy acc to vreg[20]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+52]")}, {Register::Value::Label("acc26")}, {}, " copy acc to vreg[21]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+54]")}, {Register::Value::Label("acc11")}, {}, " copy acc to vreg[22]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+56]")}, {Register::Value::Label("acc27")}, {}, " copy acc to vreg[23]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+58]")}, {Register::Value::Label("acc12")}, {}, " copy acc to vreg[24]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+60]")}, {Register::Value::Label("acc28")}, {}, " copy acc to vreg[25]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+62]")}, {Register::Value::Label("acc13")}, {}, " copy acc to vreg[26]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+64]")}, {Register::Value::Label("acc29")}, {}, " copy acc to vreg[27]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+66]")}, {Register::Value::Label("acc14")}, {}, " copy acc to vreg[28]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+68]")}, {Register::Value::Label("acc30")}, {}, " copy acc to vreg[29]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+70]")}, {Register::Value::Label("acc15")}, {}, " copy acc to vreg[30]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+72]")}, {Register::Value::Label("acc31")}, {}, " copy acc to vreg[31]"),
Instruction("s_nop", {Register::Value::Literal(1)}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 1, 0), (0, 0, 2, 0), (0, 1, 2, 0), (0, 0, 3, 0), (0, 1, 3, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 1, 1, 0), (1, 0, 2, 0), (1, 1, 2, 0), (1, 0, 3, 0), (1, 1, 3, 0), (2, 0, 0, 0), (2, 1, 0, 0), (2, 0, 1, 0), (2, 1, 1, 0), (2, 0, 2, 0), (2, 1, 2, 0), (2, 0, 3, 0), (2, 1, 3, 0), (3, 0, 0, 0), (3, 1, 0, 0), (3, 0, 1, 0), (3, 1, 1, 0), (3, 0, 2, 0), (3, 1, 2, 0), (3, 0, 3, 0), (3, 1, 3, 0)] "),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+7]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+7]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+9]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+11]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+44]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+46]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+46]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+48]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+50]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+52]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+52]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+54]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+54]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+56]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+56]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+58]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+58]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+60]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+60]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+62]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+62]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+64]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+64]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+66]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+66]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+68]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+68]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+70]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+70]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+72]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+72]")}, {}, " *= alpha"),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v7"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v9"), Register::Value::Label("v8"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v11"), Register::Value::Label("v10"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v13"), Register::Value::Label("v12"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v15"), Register::Value::Label("v14"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v17"), Register::Value::Label("v16"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v19"), Register::Value::Label("v18"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v21"), Register::Value::Label("v20"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v23"), Register::Value::Label("v22"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v25"), Register::Value::Label("v24"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v27"), Register::Value::Label("v26"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v29"), Register::Value::Label("v28"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v31"), Register::Value::Label("v30"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v33"), Register::Value::Label("v32"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v35"), Register::Value::Label("v34"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v37"), Register::Value::Label("v36"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v39"), Register::Value::Label("v38"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v44"), Register::Value::Label("v43"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v46"), Register::Value::Label("v45"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v48"), Register::Value::Label("v47"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v50"), Register::Value::Label("v49"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v52"), Register::Value::Label("v51"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v54"), Register::Value::Label("v53"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v56"), Register::Value::Label("v55"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v58"), Register::Value::Label("v57"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v60"), Register::Value::Label("v59"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v62"), Register::Value::Label("v61"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v64"), Register::Value::Label("v63"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v66"), Register::Value::Label("v65"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v68"), Register::Value::Label("v67"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v70"), Register::Value::Label("v69"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v72"), Register::Value::Label("v71"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_nop", {Register::Value::Literal(0)}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction("s_branch", {}, {label_13}, {}, " jump to end"),
};
            // clang-format on
        }

        std::vector<Instruction> body3()
        {
            // clang-format off
return {
Instruction::Label(label_10),
Instruction("s_and_b32", {Register::Value::Label("s54")}, {Register::Value::Literal(127), Register::Value::Label("s[sgprSizeI]")}, {}, " s54 = s[sgprSizeI] % 128"),
Instruction("s_add_u32", {Register::Value::Label("s55")}, {Register::Value::Label("-0x1"), Register::Value::Label("s[sgprNumWorkGroups0]")}, {}, ""),
Instruction("s_cmp_ge_u32", {Register::Value::Label("s[sgprWorkGroup0]")}, {Register::Value::Label("s55")}, {}, " wg0 >= nwg0-1 ?"),
Instruction("s_cselect_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s54"), Register::Value::Literal(0)}, {}, " set rMT0"),
Instruction("s_cmpk_gt_u32", {Register::Value::Label("s54")}, {Register::Value::Label("0x0")}, {}, " rMT0 > 0"),
Instruction("s_cbranch_scc1", {}, {label_12}, {}, " jump if edges required"),
Instruction("s_and_b32", {Register::Value::Label("s54")}, {Register::Value::Literal(63), Register::Value::Label("s[sgprSizeJ]")}, {}, " s54 = s[sgprSizeJ] % 64"),
Instruction("s_add_u32", {Register::Value::Label("s55")}, {Register::Value::Label("-0x1"), Register::Value::Label("s[sgprNumWorkGroups1]")}, {}, ""),
Instruction("s_cmp_ge_u32", {Register::Value::Label("s[sgprWorkGroup1]")}, {Register::Value::Label("s55")}, {}, " wg1 >= nwg1-1"),
Instruction("s_cselect_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s54"), Register::Value::Literal(0)}, {}, " set rMT1"),
Instruction("s_cmpk_gt_u32", {Register::Value::Label("s54")}, {Register::Value::Label("0x0")}, {}, " rMT1 > 0"),
Instruction("s_cbranch_scc1", {}, {label_12}, {}, " jump if edges required"),
Instruction::Label(label_11),
Instruction::Comment(" edge=0, allocate 2 sgpr. perBatchTmpS=2 perBatchMaskS=0 perElementMaskS=0 elementsPerBatch=106 "),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Beta Batch #0 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (0,0,0,0:vw1); (0,1,0,0:vw1); (0,0,1,0:vw1); (0,1,1,0:vw1); (0,0,2,0:vw1); (0,1,2,0:vw1); (0,0,3,0:vw1); (0,1,3,0:vw1); (1,0,0,0:vw1); (1,1,0,0:vw1); (1,0,1,0:vw1); (1,1,1,0:vw1); (1,0,2,0:vw1); (1,1,2,0:vw1); (1,0,3,0:vw1); (1,1,3,0:vw1); (2,0,0,0:vw1); (2,1,0,0:vw1); (2,0,1,0:vw1); (2,1,1,0:vw1); (2,0,2,0:vw1); (2,1,2,0:vw1); (2,0,3,0:vw1); (2,1,3,0:vw1); (3,0,0,0:vw1); (3,1,0,0:vw1); (3,0,1,0:vw1); (3,1,1,0:vw1); (3,0,2,0:vw1); (3,1,2,0:vw1); (3,0,3,0:vw1); (3,1,3,0:vw1) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,0,0) "),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v7")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " optSingleColVgpr scaleToBpe: sharedAddrVgpr <- cinRowPtr + coord0, scaled by BPE. BSHERE:coord0=0, coord0Vgpr=0"),
Instruction("buffer_load_dword", {Register::Value::Label("v8")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v10")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,1,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v12")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,1,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v14")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,2,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v16")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,2,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v18")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,3,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v20")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,3,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v22")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,0,0) "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(20)}, {}, " scale StrideC *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v24")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v26")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,1,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v28")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,1,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v30")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,2,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v32")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,2,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v34")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,3,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v36")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,3,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v38")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,0,0) "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(20)}, {}, " scale StrideC *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v43")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v45")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,1,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v47")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,1,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v49")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,2,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v51")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,2,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v53")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,3,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v55")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,3,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v57")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,0,0) "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(20)}, {}, " scale StrideC *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v59")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v61")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,1,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v63")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,1,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v65")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,2,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v67")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,2,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v69")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,3,0,0) "),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_load_dword", {Register::Value::Label("v71")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,3,1,0) "),
Instruction("buffer_load_dword", {Register::Value::Label("v73")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " optSingleColVgpr scaleToBpe: sharedAddrVgpr <- cinRowPtr + coord0, scaled by BPE. BSHERE:coord0=0, coord0Vgpr=0"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("acc0")}, {}, " copy acc to vreg[0]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("acc16")}, {}, " copy acc to vreg[1]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc1")}, {}, " copy acc to vreg[2]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc17")}, {}, " copy acc to vreg[3]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc2")}, {}, " copy acc to vreg[4]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("acc18")}, {}, " copy acc to vreg[5]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("acc3")}, {}, " copy acc to vreg[6]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc19")}, {}, " copy acc to vreg[7]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc4")}, {}, " copy acc to vreg[8]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc20")}, {}, " copy acc to vreg[9]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc5")}, {}, " copy acc to vreg[10]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc21")}, {}, " copy acc to vreg[11]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc6")}, {}, " copy acc to vreg[12]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc22")}, {}, " copy acc to vreg[13]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc7")}, {}, " copy acc to vreg[14]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc23")}, {}, " copy acc to vreg[15]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("acc8")}, {}, " copy acc to vreg[16]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+46]")}, {Register::Value::Label("acc24")}, {}, " copy acc to vreg[17]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("acc9")}, {}, " copy acc to vreg[18]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc25")}, {}, " copy acc to vreg[19]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+52]")}, {Register::Value::Label("acc10")}, {}, " copy acc to vreg[20]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+54]")}, {Register::Value::Label("acc26")}, {}, " copy acc to vreg[21]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+56]")}, {Register::Value::Label("acc11")}, {}, " copy acc to vreg[22]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+58]")}, {Register::Value::Label("acc27")}, {}, " copy acc to vreg[23]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+60]")}, {Register::Value::Label("acc12")}, {}, " copy acc to vreg[24]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+62]")}, {Register::Value::Label("acc28")}, {}, " copy acc to vreg[25]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+64]")}, {Register::Value::Label("acc13")}, {}, " copy acc to vreg[26]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+66]")}, {Register::Value::Label("acc29")}, {}, " copy acc to vreg[27]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+68]")}, {Register::Value::Label("acc14")}, {}, " copy acc to vreg[28]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+70]")}, {Register::Value::Label("acc30")}, {}, " copy acc to vreg[29]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+72]")}, {Register::Value::Label("acc15")}, {}, " copy acc to vreg[30]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+74]")}, {Register::Value::Label("acc31")}, {}, " copy acc to vreg[31]"),
Instruction("s_nop", {Register::Value::Literal(1)}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 1, 0), (0, 0, 2, 0), (0, 1, 2, 0), (0, 0, 3, 0), (0, 1, 3, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 1, 1, 0), (1, 0, 2, 0), (1, 1, 2, 0), (1, 0, 3, 0), (1, 1, 3, 0), (2, 0, 0, 0), (2, 1, 0, 0), (2, 0, 1, 0), (2, 1, 1, 0), (2, 0, 2, 0), (2, 1, 2, 0), (2, 0, 3, 0), (2, 1, 3, 0), (3, 0, 0, 0), (3, 1, 0, 0), (3, 0, 1, 0), (3, 1, 1, 0), (3, 0, 2, 0), (3, 1, 2, 0), (3, 0, 3, 0), (3, 1, 3, 0)] "),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+9]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+11]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+19]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+21]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+44]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+46]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+46]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+48]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+50]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+52]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+52]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+54]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+54]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+56]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+56]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+58]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+58]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+60]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+60]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+62]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+62]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+64]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+64]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+66]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+66]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+68]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+68]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+70]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+70]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+72]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+72]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+74]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+74]")}, {}, " *= alpha"),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 0 + 0 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("v8"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v9"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 1 + 1 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("v10"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v11"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 2 + 2 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v12"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v13"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 3 + 3 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v14"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v15"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 4 + 4 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v16"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v17"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 5 + 5 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+19]")}, {Register::Value::Label("v18"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v19"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 6 + 6 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+21]")}, {Register::Value::Label("v20"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v21"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 7 + 7 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v22"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v23"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 8 + 8 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v24"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(20)}, {}, " scale StrideD *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v25"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 9 + 9 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v26"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v27"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 10 + 10 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v29"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 11 + 11 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v30"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v31"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 12 + 12 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v32"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v33"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 13 + 13 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v34"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v35"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 14 + 14 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v36"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v37"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 15 + 15 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v38"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v39"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 16 + 16 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("v43"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(20)}, {}, " scale StrideD *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v44"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 17 + 17 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+46]")}, {Register::Value::Label("v45"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v46"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 18 + 18 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+48]")}, {Register::Value::Label("v47"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v48"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 19 + 19 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v49"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v50"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 20 + 20 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+52]")}, {Register::Value::Label("v51"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v52"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 21 + 21 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+54]")}, {Register::Value::Label("v53"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v54"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 22 + 22 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+56]")}, {Register::Value::Label("v55"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v56"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 23 + 23 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+58]")}, {Register::Value::Label("v57"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v58"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 24 + 24 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+60]")}, {Register::Value::Label("v59"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(20)}, {}, " scale StrideD *= numRows(5) * bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v60"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 25 + 25 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+62]")}, {Register::Value::Label("v61"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v62"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 26 + 26 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+64]")}, {Register::Value::Label("v63"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v64"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 27 + 27 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+66]")}, {Register::Value::Label("v65"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v66"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 28 + 28 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+68]")}, {Register::Value::Label("v67"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v68"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 29 + 29 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+70]")}, {Register::Value::Label("v69"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v70"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 30 + 30 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+72]")}, {Register::Value::Label("v71"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("s_lshl_b32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(2)}, {}, " incToNextRow: Scale by BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s54")}, {}, " incToNextRow: gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Literal(0)}, {}, " incToNextRow: gra SRD += inc(upper)"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v72"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(31)")}, {}, {}, " wait C (interleaved) 31 = 32 - 31 + 31 - 1"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+74]")}, {Register::Value::Label("v73"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v74"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:256"}, " store D"),
Instruction("s_nop", {Register::Value::Literal(0)}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction("s_branch", {}, {label_13}, {}, " jump to end"),
};
            // clang-format on
        }

        std::vector<Instruction> body4()
        {
            // clang-format off
return {
Instruction::Label(label_12),
Instruction::Comment(" edge=1, allocate 6 sgpr. perBatchTmpS=4 perBatchMaskS=2 perElementMaskS=0 elementsPerBatch=71 "),
Instruction::Comment(" optSingleColVgpr=0 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Edge_Mask optSrdIncForRow=0 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Beta Edge Batch #0 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (0,0,0,0:vw1); (0,1,0,0:vw1); (0,0,1,0:vw1); (0,1,1,0:vw1); (0,0,2,0:vw1); (0,1,2,0:vw1); (0,0,3,0:vw1); (0,1,3,0:vw1); (1,0,0,0:vw1); (1,1,0,0:vw1); (1,0,1,0:vw1); (1,1,1,0:vw1); (1,0,2,0:vw1); (1,1,2,0:vw1); (1,0,3,0:vw1); (1,1,3,0:vw1); (2,0,0,0:vw1); (2,1,0,0:vw1); (2,0,1,0:vw1); (2,1,1,0:vw1); (2,0,2,0:vw1); (2,1,2,0:vw1); (2,0,3,0:vw1); (2,1,3,0:vw1); (3,0,0,0:vw1); (3,1,0,0:vw1); (3,0,1,0:vw1); (3,1,1,0:vw1); (3,0,2,0:vw1); (3,1,2,0:vw1); (3,0,3,0:vw1); (3,1,3,0:vw1) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,0,0) "),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v6")}, {Register::Value::Label("-1"), Register::Value::Label("v6"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v7")}, {Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v6")}, {Register::Value::Label("-1"), Register::Value::Label("v6"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v9")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v9")}, {Register::Value::Label("-1"), Register::Value::Label("v9"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v10")}, {Register::Value::Label("v9"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v9")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v9")}, {Register::Value::Label("-1"), Register::Value::Label("v9"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,1,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v12")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v12")}, {Register::Value::Label("-1"), Register::Value::Label("v12"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v13")}, {Register::Value::Label("v12"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v12")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v12")}, {Register::Value::Label("-1"), Register::Value::Label("v12"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,1,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v15")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v15")}, {Register::Value::Label("-1"), Register::Value::Label("v15"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v16")}, {Register::Value::Label("v15"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v15")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v15")}, {Register::Value::Label("-1"), Register::Value::Label("v15"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,2,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v18")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v18")}, {Register::Value::Label("-1"), Register::Value::Label("v18"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v19")}, {Register::Value::Label("v18"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v18")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v18")}, {Register::Value::Label("-1"), Register::Value::Label("v18"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,2,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v21")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v21")}, {Register::Value::Label("-1"), Register::Value::Label("v21"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v22")}, {Register::Value::Label("v21"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v21")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v21")}, {Register::Value::Label("-1"), Register::Value::Label("v21"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,3,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v24")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v24")}, {Register::Value::Label("-1"), Register::Value::Label("v24"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v25")}, {Register::Value::Label("v24"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v24")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v24")}, {Register::Value::Label("-1"), Register::Value::Label("v24"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,3,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v27")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v27")}, {Register::Value::Label("-1"), Register::Value::Label("v27"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v28")}, {Register::Value::Label("v27"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v27")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v27")}, {Register::Value::Label("-1"), Register::Value::Label("v27"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(5)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s54")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s54")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v30")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v30")}, {Register::Value::Label("-1"), Register::Value::Label("v30"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v31")}, {Register::Value::Label("v30"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v30")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v30")}, {Register::Value::Label("-1"), Register::Value::Label("v30"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,0,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v33")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v33")}, {Register::Value::Label("-1"), Register::Value::Label("v33"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v34")}, {Register::Value::Label("v33"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v33")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v33")}, {Register::Value::Label("-1"), Register::Value::Label("v33"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,1,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v36")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v36")}, {Register::Value::Label("-1"), Register::Value::Label("v36"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v37")}, {Register::Value::Label("v36"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v36")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v36")}, {Register::Value::Label("-1"), Register::Value::Label("v36"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,1,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v39")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v39")}, {Register::Value::Label("-1"), Register::Value::Label("v39"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v43")}, {Register::Value::Label("v39"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v39")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v39")}, {Register::Value::Label("-1"), Register::Value::Label("v39"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,2,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v45")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v45")}, {Register::Value::Label("-1"), Register::Value::Label("v45"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v46")}, {Register::Value::Label("v45"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v45")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v45")}, {Register::Value::Label("-1"), Register::Value::Label("v45"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,2,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v48")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v48")}, {Register::Value::Label("-1"), Register::Value::Label("v48"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v49")}, {Register::Value::Label("v48"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v48")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v48")}, {Register::Value::Label("-1"), Register::Value::Label("v48"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,3,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v51")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v51")}, {Register::Value::Label("-1"), Register::Value::Label("v51"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v52")}, {Register::Value::Label("v51"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v51")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v51")}, {Register::Value::Label("-1"), Register::Value::Label("v51"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(1,3,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v54")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v54")}, {Register::Value::Label("-1"), Register::Value::Label("v54"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v55")}, {Register::Value::Label("v54"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v54")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v54")}, {Register::Value::Label("-1"), Register::Value::Label("v54"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(5)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s54")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s54")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v57")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v57")}, {Register::Value::Label("-1"), Register::Value::Label("v57"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v58")}, {Register::Value::Label("v57"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v57")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v57")}, {Register::Value::Label("-1"), Register::Value::Label("v57"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,0,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v60")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v60")}, {Register::Value::Label("-1"), Register::Value::Label("v60"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v61")}, {Register::Value::Label("v60"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v60")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v60")}, {Register::Value::Label("-1"), Register::Value::Label("v60"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,1,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v63")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v63")}, {Register::Value::Label("-1"), Register::Value::Label("v63"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v64")}, {Register::Value::Label("v63"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v63")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v63")}, {Register::Value::Label("-1"), Register::Value::Label("v63"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,1,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v66")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v66")}, {Register::Value::Label("-1"), Register::Value::Label("v66"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v67")}, {Register::Value::Label("v66"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v66")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v66")}, {Register::Value::Label("-1"), Register::Value::Label("v66"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,2,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v69")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v69")}, {Register::Value::Label("-1"), Register::Value::Label("v69"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v70")}, {Register::Value::Label("v69"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v69")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v69")}, {Register::Value::Label("-1"), Register::Value::Label("v69"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,2,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v72")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v72")}, {Register::Value::Label("-1"), Register::Value::Label("v72"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v73")}, {Register::Value::Label("v72"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v72")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v72")}, {Register::Value::Label("-1"), Register::Value::Label("v72"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,3,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
};
            // clang-format on
        }

        std::vector<Instruction> body5()
        {
            // clang-format off
return {
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v75")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v75")}, {Register::Value::Label("-1"), Register::Value::Label("v75"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v76")}, {Register::Value::Label("v75"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v75")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v75")}, {Register::Value::Label("-1"), Register::Value::Label("v75"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(2,3,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v78")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v78")}, {Register::Value::Label("-1"), Register::Value::Label("v78"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v79")}, {Register::Value::Label("v78"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v78")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v78")}, {Register::Value::Label("-1"), Register::Value::Label("v78"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(5)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideC1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s54")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("s_mul_i32", {Register::Value::Label("s54")}, {Register::Value::Label("s[sgprStrideD1J]"), Register::Value::Literal(5)}, {}, " scale stride"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s54")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v81")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v81")}, {Register::Value::Label("-1"), Register::Value::Label("v81"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v82")}, {Register::Value::Label("v81"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v81")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v81")}, {Register::Value::Label("-1"), Register::Value::Label("v81"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,0,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v84")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v84")}, {Register::Value::Label("-1"), Register::Value::Label("v84"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v85")}, {Register::Value::Label("v84"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v84")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v84")}, {Register::Value::Label("-1"), Register::Value::Label("v84"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,1,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v87")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v87")}, {Register::Value::Label("-1"), Register::Value::Label("v87"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v88")}, {Register::Value::Label("v87"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v87")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v87")}, {Register::Value::Label("-1"), Register::Value::Label("v87"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,1,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v90")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v90")}, {Register::Value::Label("-1"), Register::Value::Label("v90"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v91")}, {Register::Value::Label("v90"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v90")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v90")}, {Register::Value::Label("-1"), Register::Value::Label("v90"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,2,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v93")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v93")}, {Register::Value::Label("-1"), Register::Value::Label("v93"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v94")}, {Register::Value::Label("v93"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v93")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v93")}, {Register::Value::Label("-1"), Register::Value::Label("v93"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,2,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v96")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v96")}, {Register::Value::Label("-1"), Register::Value::Label("v96"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v97")}, {Register::Value::Label("v96"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v96")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v96")}, {Register::Value::Label("-1"), Register::Value::Label("v96"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,3,0,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v1")}, {m_context->getVCC(), Register::Value::Label("v1"), Register::Value::Literal(1)}, {}, " coord1.1: coord1Vgpr += d1*sg1*VW + vc1"),
Instruction::Comment(" Fix for UseInitialStridesCD, emitAddressSetupCode "),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v2"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " ROWINC- Move cinRowPtr to next row"),
Instruction("_v_add_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v3"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Move coutRowPtr to next row"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v0"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v99")}, {Register::Value::Label("v2"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v99")}, {Register::Value::Label("-1"), Register::Value::Label("v99"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v100")}, {Register::Value::Label("v99"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v99")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v99")}, {Register::Value::Label("-1"), Register::Value::Label("v99"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction::Comment(" (d1,vc1,d0,vc0)=(3,3,1,0) "),
Instruction("_v_add_co_u32", {Register::Value::Label("v4")}, {m_context->getVCC(), Register::Value::Label("v0"), Register::Value::Literal(64)}, {}, " coord0.1: coord0 += d0*sg0*VW + vc0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[54:55]")}, {Register::Value::Label("v4"), Register::Value::Label("s[sgprSizeI]")}, {}, " coord0 < size0"),
Instruction("v_cmp_lt_u32", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprSizeJ]")}, {}, " coord1 < size1"),
Instruction("s_and_b64", {Register::Value::Label("s[58:59]")}, {Register::Value::Label("s[54:55]"), Register::Value::Label("s[58:59]")}, {}, " in0 && in1"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v102")}, {Register::Value::Label("v2"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v102")}, {Register::Value::Label("-1"), Register::Value::Label("v102"), Register::Value::Label("s[58:59]")}, {}, " LDC clip if OOB. offset"),
Instruction("buffer_load_dword", {Register::Value::Label("v103")}, {Register::Value::Label("v102"), Register::Value::Label("s[sgprSrdC:sgprSrdC+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " load C for beta calc"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v102")}, {Register::Value::Label("v3"), Register::Value::Label("v4"), Register::Value::Label("0x2")}, {}, " scaleToBpe: accumulate d0 lower and *= bpe into Cin addr"),
Instruction("v_cndmask_b32", {Register::Value::Label("v102")}, {Register::Value::Label("-1"), Register::Value::Label("v102"), Register::Value::Label("s[58:59]")}, {}, " LDD clip if OOB. offset"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+8]")}, {Register::Value::Label("acc0")}, {}, " copy acc to vreg[0]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("acc16")}, {}, " copy acc to vreg[1]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc1")}, {}, " copy acc to vreg[2]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("acc17")}, {}, " copy acc to vreg[3]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("acc2")}, {}, " copy acc to vreg[4]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("acc18")}, {}, " copy acc to vreg[5]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc3")}, {}, " copy acc to vreg[6]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc19")}, {}, " copy acc to vreg[7]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc4")}, {}, " copy acc to vreg[8]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc20")}, {}, " copy acc to vreg[9]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc5")}, {}, " copy acc to vreg[10]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("acc21")}, {}, " copy acc to vreg[11]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+47]")}, {Register::Value::Label("acc6")}, {}, " copy acc to vreg[12]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("acc22")}, {}, " copy acc to vreg[13]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+53]")}, {Register::Value::Label("acc7")}, {}, " copy acc to vreg[14]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+56]")}, {Register::Value::Label("acc23")}, {}, " copy acc to vreg[15]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+59]")}, {Register::Value::Label("acc8")}, {}, " copy acc to vreg[16]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+62]")}, {Register::Value::Label("acc24")}, {}, " copy acc to vreg[17]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+65]")}, {Register::Value::Label("acc9")}, {}, " copy acc to vreg[18]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+68]")}, {Register::Value::Label("acc25")}, {}, " copy acc to vreg[19]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+71]")}, {Register::Value::Label("acc10")}, {}, " copy acc to vreg[20]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+74]")}, {Register::Value::Label("acc26")}, {}, " copy acc to vreg[21]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+77]")}, {Register::Value::Label("acc11")}, {}, " copy acc to vreg[22]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+80]")}, {Register::Value::Label("acc27")}, {}, " copy acc to vreg[23]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+83]")}, {Register::Value::Label("acc12")}, {}, " copy acc to vreg[24]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+86]")}, {Register::Value::Label("acc28")}, {}, " copy acc to vreg[25]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+89]")}, {Register::Value::Label("acc13")}, {}, " copy acc to vreg[26]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+92]")}, {Register::Value::Label("acc29")}, {}, " copy acc to vreg[27]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+95]")}, {Register::Value::Label("acc14")}, {}, " copy acc to vreg[28]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+98]")}, {Register::Value::Label("acc30")}, {}, " copy acc to vreg[29]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+101]")}, {Register::Value::Label("acc15")}, {}, " copy acc to vreg[30]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+104]")}, {Register::Value::Label("acc31")}, {}, " copy acc to vreg[31]"),
Instruction("s_nop", {Register::Value::Literal(1)}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 1, 0), (0, 0, 2, 0), (0, 1, 2, 0), (0, 0, 3, 0), (0, 1, 3, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 1, 1, 0), (1, 0, 2, 0), (1, 1, 2, 0), (1, 0, 3, 0), (1, 1, 3, 0), (2, 0, 0, 0), (2, 1, 0, 0), (2, 0, 1, 0), (2, 1, 1, 0), (2, 0, 2, 0), (2, 1, 2, 0), (2, 0, 3, 0), (2, 1, 3, 0), (3, 0, 0, 0), (3, 1, 0, 0), (3, 0, 1, 0), (3, 1, 1, 0), (3, 0, 2, 0), (3, 1, 2, 0), (3, 0, 3, 0), (3, 1, 3, 0)] "),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+8]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+8]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+11]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+14]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+17]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+20]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+23]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+26]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+32]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+38]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+44]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+47]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+47]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+50]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+53]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+53]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+56]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+56]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+59]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+59]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+62]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+62]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+65]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+65]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+68]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+68]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+71]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+71]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+74]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+74]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+77]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+77]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+80]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+80]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+83]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+83]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+86]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+86]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+89]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+89]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+92]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+92]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+95]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+95]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+98]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+98]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+101]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+101]")}, {}, " *= alpha"),
Instruction("v_mul_f32", {Register::Value::Label("v[vgprValuC+104]")}, {Register::Value::Label("s[sgprAlpha]"), Register::Value::Label("v[vgprValuC+104]")}, {}, " *= alpha"),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, " wait C"),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+8]")}, {Register::Value::Label("v7"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v8"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("v10"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v11"), Register::Value::Label("v9"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v13"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v14"), Register::Value::Label("v12"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+17]")}, {Register::Value::Label("v16"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v17"), Register::Value::Label("v15"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+20]")}, {Register::Value::Label("v19"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v20"), Register::Value::Label("v18"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+23]")}, {Register::Value::Label("v22"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v23"), Register::Value::Label("v21"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v25"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v26"), Register::Value::Label("v24"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v28"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v29"), Register::Value::Label("v27"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v31"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v32"), Register::Value::Label("v30"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v34"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v35"), Register::Value::Label("v33"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v37"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v38"), Register::Value::Label("v36"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("v43"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v44"), Register::Value::Label("v39"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+47]")}, {Register::Value::Label("v46"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v47"), Register::Value::Label("v45"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+50]")}, {Register::Value::Label("v49"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v50"), Register::Value::Label("v48"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+53]")}, {Register::Value::Label("v52"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v53"), Register::Value::Label("v51"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+56]")}, {Register::Value::Label("v55"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v56"), Register::Value::Label("v54"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+59]")}, {Register::Value::Label("v58"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v59"), Register::Value::Label("v57"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+62]")}, {Register::Value::Label("v61"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v62"), Register::Value::Label("v60"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+65]")}, {Register::Value::Label("v64"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v65"), Register::Value::Label("v63"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+68]")}, {Register::Value::Label("v67"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v68"), Register::Value::Label("v66"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+71]")}, {Register::Value::Label("v70"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v71"), Register::Value::Label("v69"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+74]")}, {Register::Value::Label("v73"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v74"), Register::Value::Label("v72"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+77]")}, {Register::Value::Label("v76"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v77"), Register::Value::Label("v75"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+80]")}, {Register::Value::Label("v79"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v80"), Register::Value::Label("v78"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+83]")}, {Register::Value::Label("v82"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v83"), Register::Value::Label("v81"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+86]")}, {Register::Value::Label("v85"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v86"), Register::Value::Label("v84"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+89]")}, {Register::Value::Label("v88"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v89"), Register::Value::Label("v87"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+92]")}, {Register::Value::Label("v91"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v92"), Register::Value::Label("v90"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+95]")}, {Register::Value::Label("v94"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v95"), Register::Value::Label("v93"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+98]")}, {Register::Value::Label("v97"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v98"), Register::Value::Label("v96"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+101]")}, {Register::Value::Label("v100"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v101"), Register::Value::Label("v99"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("_v_mac_f32", {Register::Value::Label("v[vgprValuC+104]")}, {Register::Value::Label("v103"), Register::Value::Label("s[sgprBeta]")}, {}, " finalSum = sum*alpha + C*beta"),
Instruction("buffer_store_dword", {}, {Register::Value::Label("v104"), Register::Value::Label("v102"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Literal(0)}, {"offen", "offset:0"}, " store D"),
Instruction("s_nop", {Register::Value::Literal(0)}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction("s_branch", {}, {label_13}, {}, " jump to end"),
Instruction::Label(label_13),
Instruction::Label(label_14),
Instruction("s_endpgm", {}, {}, {}, " Kernel End"),
};
            // clang-format on
        }
    };

    Generator<Instruction> SGEMM_Optimized_Program(ContextPtr context)
    {
        GemmGuidePostOptimized gen(context);

        for(auto const& inst : gen.macros())
            co_yield inst;
        for(auto const& inst : gen.preamble())
            co_yield inst;
        for(auto const& inst : gen.body0())
            co_yield inst;
        for(auto const& inst : gen.body1())
            co_yield inst;
        for(auto const& inst : gen.body2())
            co_yield inst;
        for(auto const& inst : gen.body3())
            co_yield inst;
        for(auto const& inst : gen.body4())
            co_yield inst;
        for(auto const& inst : gen.body5())
            co_yield inst;
    }
}
