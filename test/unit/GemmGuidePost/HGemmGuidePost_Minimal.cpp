/*******************************************************************************
 *
 * MIT License
 *
 * Copyright 2024-2025 AMD ROCm(TM) Software
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************************************************************************/

#include <string>

#include <rocRoller/CodeGen/ArgumentLoader.hpp>
#include <rocRoller/CodeGen/Arithmetic/MatrixMultiply.hpp>
#include <rocRoller/CodeGen/BranchGenerator.hpp>
#include <rocRoller/CodeGen/Instruction.hpp>
#include <rocRoller/Context.hpp>
#include <rocRoller/InstructionValues/LabelAllocator.hpp>
#include <rocRoller/InstructionValues/Register.hpp>

#include "GemmGuidePostKernels.hpp"

using namespace rocRoller;

namespace rocRollerTest
{
    struct HGemmGuidePostMinimal
    {
        ContextPtr m_context;
        //Register::ValuePtr label_0;
        Register::ValuePtr label_1;
        Register::ValuePtr label_2;
        Register::ValuePtr label_3;
        Register::ValuePtr label_4;
        Register::ValuePtr label_5;
        Register::ValuePtr label_6;
        Register::ValuePtr label_7;
        Register::ValuePtr label_8;
        Register::ValuePtr label_9;
        Register::ValuePtr label_10;

        HGemmGuidePostMinimal(ContextPtr context)
            : m_context(context)
        {
            label_10 = m_context->labelAllocator()->label("label_0021");
            label_5  = m_context->labelAllocator()->label("label_0013");
            label_3  = m_context->labelAllocator()->label("openLoopL_12");
            label_1  = m_context->labelAllocator()->label("ShadowInitStart_10");
            label_4  = m_context->labelAllocator()->label("LoopBeginL_1");
            label_9  = m_context->labelAllocator()->label("label_GW_End_19");
            label_6  = m_context->labelAllocator()->label("LoopEndL_2");
            label_8  = m_context->labelAllocator()->label("GW_B0_E0_17");
            //label_0 = m_context->labelAllocator()->label("Cijk_Ailk_Bjlk_HHS_H_MT64x128x16_MI32x32x4x2_SN_K1");
            label_2 = m_context->labelAllocator()->label("label_NoBranch_11");
            label_7 = m_context->labelAllocator()->label("Summation_End_14");
        }

        std::vector<Instruction> Program()
        {
            // clang-format off
return {
Instruction::Comment("****************************************"),
Instruction::Comment(" Function Prefix                        "),
Instruction::Comment("****************************************"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Begin Kernel                           "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Component.Signature.SignatureCOV3"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Optimizations and Config:              "),
Instruction::Comment("****************************************"),
Instruction::Comment(" ThreadTile= 32 x 1 "),
Instruction::Comment(" SubGroup= 2 x 128 "),
Instruction::Comment(" VectorWidth=2 "),
Instruction::Comment("GlobalLoadVectorWidthA=4, GlobalLoadVectorWidthB=4"),
Instruction::Comment(" DirectToLdsA=False "),
Instruction::Comment(" DirectToLdsB=False "),
Instruction::Comment(" UseSgprForGRO=1 "),
//Instruction::Label(label_0),
Instruction::Comment("****************************************"),
Instruction::Comment(" Asm syntax workarounds                 "),
Instruction::Comment("****************************************"),
Instruction(".macro _v_add_co_u32 dst:req, cc:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_add_co_u32 \\dst, \\cc, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_add_u32 dst:req, src0:req, src1:req, dpp=", {}, {}, {}, ""),
Instruction("v_add_u32 \\dst, \\src0, \\src1 \\dpp", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _v_add_lshl_u32 dst:req, src0:req, src1:req, shiftCnt:req", {}, {}, {}, ""),
Instruction("v_add_lshl_u32 \\dst, \\src0, \\src1, \\shiftCnt", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" scale global load macros "),
Instruction(".macro _s_load_b32 dst base offset", {}, {}, {}, ""),
Instruction("s_load_dword \\dst \\base \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _s_load_b64 dst base offset", {}, {}, {}, ""),
Instruction("s_load_dwordx2 \\dst \\base \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _s_load_b512 dst base offset", {}, {}, {}, ""),
Instruction("s_load_dwordx16 \\dst \\base \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" ds operation macros "),
Instruction(".macro _ds_load_u16 dst src offset", {}, {}, {}, ""),
Instruction("ds_read_u16 \\dst \\src \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _ds_load_u16_d16_hi dst src offset", {}, {}, {}, ""),
Instruction("ds_read_u16_d16_hi \\dst \\src \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _ds_store_b64 dst src offset", {}, {}, {}, ""),
Instruction("ds_write_b64 \\dst \\src \\offset", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" buffer memory operation macros "),
Instruction(".macro _buffer_load_b64 dst voffset base soffset offen ioffset md0 md1 md2", {}, {}, {}, ""),
Instruction("buffer_load_dwordx2 \\dst \\voffset \\base \\soffset \\offen \\ioffset \\md0 \\md1 \\md2", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction(".macro _buffer_store_b64 src voffset base soffset offen ioffset md0 md1 md2", {}, {}, {}, ""),
Instruction("buffer_store_dwordx2 \\src \\voffset \\base \\soffset \\offen \\ioffset \\md0 \\md1 \\md2", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" buffer memory operation macros "),
Instruction::Comment("****************************************"),
Instruction::Comment(" VGPR Assignments                       "),
Instruction::Comment("****************************************"),
Instruction::Comment(" ValuC range: [0-0), serializedStore enabled "),
Instruction(".set vgprValuC, 0", {}, {}, {}, ""),
Instruction::Comment(" ValuA/B   Xn=PLR buffer idx,  In=InnerUnroll idx "),
Instruction(".set vgprValuA_X0_I0, 0", {}, {}, {}, ""),
Instruction(".set vgprValuA_X1_I0, 2", {}, {}, {}, ""),
Instruction(".set vgprG2LA, 12", {}, {}, {}, ""),
Instruction(".set vgprValuB_X0_I0, 4", {}, {}, {}, ""),
Instruction(".set vgprValuB_X1_I0, 6", {}, {}, {}, ""),
Instruction(".set vgprG2LB, 14", {}, {}, {}, ""),
Instruction(".set vgprLocalWriteAddrA, 8", {}, {}, {}, ""),
Instruction(".set vgprLocalWriteAddrB, 9", {}, {}, {}, ""),
Instruction(".set vgprGlobalReadOffsetA, 10", {}, {}, {}, ""),
Instruction(".set vgprGlobalReadOffsetB, 11", {}, {}, {}, ""),
Instruction(".set vgprLocalReadAddrA, 18", {}, {}, {}, ""),
Instruction(".set vgprLocalReadAddrB, 19", {}, {}, {}, ""),
Instruction(".set vgprSerial, 20", {}, {}, {}, ""),
Instruction::Comment(" Num VGPR=96 "),
Instruction::Comment(" Num AccVGPR=32 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" SGPR Assignments                       "),
Instruction::Comment("****************************************"),
Instruction(".set sgprKernArgAddress, 0", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup0, 2", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup1, 3", {}, {}, {}, ""),
Instruction(".set sgprWorkGroup2, 4", {}, {}, {}, ""),
Instruction(".set sgprLoopCounterL, 5", {}, {}, {}, ""),
Instruction(".set sgprOrigLoopCounter, 6", {}, {}, {}, ""),
Instruction(".set sgprSrdA, 8", {}, {}, {}, ""),
Instruction(".set sgprSrdB, 12", {}, {}, {}, ""),
Instruction(".set sgprSrdD, 16", {}, {}, {}, ""),
Instruction(".set sgprSrdC, 20", {}, {}, {}, ""),
Instruction(".set sgprTensor2dSizeA, 24", {}, {}, {}, ""),
Instruction(".set sgprTensor2dSizeB, 26", {}, {}, {}, ""),
Instruction(".set sgprAddressD, 28", {}, {}, {}, ""),
Instruction(".set sgprAddressC, 30", {}, {}, {}, ""),
Instruction(".set sgprAddressA, 32", {}, {}, {}, ""),
Instruction(".set sgprAddressB, 34", {}, {}, {}, ""),
Instruction(".set sgprStridesD, 37", {}, {}, {}, ""),
Instruction(".set sgprStridesC, 39", {}, {}, {}, ""),
Instruction(".set sgprStridesA, 41", {}, {}, {}, ""),
Instruction(".set sgprStridesB, 43", {}, {}, {}, ""),
Instruction(".set sgprSizesSum, 48", {}, {}, {}, ""),
Instruction(".set sgprOffsetD, 55", {}, {}, {}, ""),
Instruction(".set sgprOffsetC, 56", {}, {}, {}, ""),
Instruction(".set sgprOffsetA, 57", {}, {}, {}, ""),
Instruction(".set sgprOffsetB, 58", {}, {}, {}, ""),
Instruction(".set sgprShadowLimitA, 56", {}, {}, {}, ""),
Instruction(".set sgprShadowLimitB, 58", {}, {}, {}, ""),
Instruction(".set sgprGlobalReadIncsA, 7", {}, {}, {}, ""),
Instruction(".set sgprGlobalReadIncsB, 49", {}, {}, {}, ""),
Instruction(".set sgprScalarGlobalReadOffsetB, 55", {}, {}, {}, ""),
Instruction::Comment(" max SGPR=65 "),
Instruction::Comment(" Size Assignments "),
Instruction::Comment(" Stride Assignments "),
Instruction(".set sgprStrideD1J, sgprStridesD+0", {}, {}, {}, ""),
Instruction(".set sgprStrideDK, sgprStridesD+1", {}, {}, {}, ""),
Instruction(".set sgprStrideC1J, sgprStridesC+0", {}, {}, {}, ""),
Instruction(".set sgprStrideCK, sgprStridesC+1", {}, {}, {}, ""),
Instruction(".set sgprStrideAL, sgprStridesA+0", {}, {}, {}, ""),
Instruction(".set sgprStrideAK, sgprStridesA+1", {}, {}, {}, ""),
Instruction(".set sgprStrideBL, sgprStridesB+0", {}, {}, {}, ""),
Instruction(".set sgprStrideBK, sgprStridesB+1", {}, {}, {}, ""),
Instruction(".set MT1, 128", {}, {}, {}, ""),
Instruction(".set DepthU, 16", {}, {}, {}, ""),
Instruction(".set BpeA, 2", {}, {}, {}, ""),
Instruction(".set BpeB, 2", {}, {}, {}, ""),
Instruction::Comment(" Number of elements to shift-left SRD "),
Instruction::Comment(" 2GB limit - set offsets to -1 to exceed this and clamp "),
Instruction(".set BufferLimit, 0xffffffff", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" Bits 127:96 of SRD.                    "),
Instruction::Comment(" hex: 0x00020000                        "),
Instruction::Comment(" dst_sel_x (3b): 0                      "),
Instruction::Comment(" dst_sel_y (3b): 0                      "),
Instruction::Comment(" dst_sel_z (3b): 0                      "),
Instruction::Comment(" dst_sel_w (3b): 0                      "),
Instruction::Comment(" num_format (3b): 0                     "),
Instruction::Comment(" data_format (4b): 4                    "),
Instruction::Comment(" user_vm_enable (1b): 0                 "),
Instruction::Comment(" user_vm_mode (1b): 0                   "),
Instruction::Comment(" index_stride (2b): 0                   "),
Instruction::Comment(" add_tid_enable (1b): 0                 "),
Instruction::Comment(" _unusedA (3b): 0                       "),
Instruction::Comment(" nv (1b): 0                             "),
Instruction::Comment(" _unusedB (2b): 0                       "),
Instruction::Comment(" type (2b): 0                           "),
Instruction::Comment("****************************************"),
Instruction(".set Srd127_96, 0x00020000", {}, {}, {}, ""),
Instruction::Comment(" Global Offset A "),
Instruction(".macro GLOBAL_OFFSET_A vgprAddr:req vgprOffset0I:req vgprOffsetL:req vgprTmp:req", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vgprTmp+0], s[sgprStrideAL], v[\\vgprOffsetL] // mul d1 lower", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vgprAddr+0], vcc, v[\\vgprOffset0I], v[\\vgprTmp+0] // accumulate K lower", {}, {}, {}, ""),
Instruction("_v_add_u32 v[\\vgprAddr+0], 0x4, v[\\vgprAddr+0]     // add prepad for pointer shift", {}, {}, {}, ""),
Instruction("v_lshlrev_b32 v[\\vgprAddr+0], 0x1, v[\\vgprAddr+0]  // offset *= bytes/element", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment(" Global Offset B "),
Instruction(".macro GLOBAL_OFFSET_B vgprAddr:req vgprOffset1J:req vgprOffsetL:req vgprTmp:req", {}, {}, {}, ""),
Instruction("v_mul_lo_u32 v[\\vgprTmp+0], s[sgprStrideBL], v[\\vgprOffsetL] // mul d1 lower", {}, {}, {}, ""),
Instruction("_v_add_co_u32 v[\\vgprAddr+0], vcc, v[\\vgprOffset1J], v[\\vgprTmp+0] // accumulate K lower", {}, {}, {}, ""),
Instruction("_v_add_u32 v[\\vgprAddr+0], 0x4, v[\\vgprAddr+0]     // add prepad for pointer shift", {}, {}, {}, ""),
Instruction("v_lshlrev_b32 v[\\vgprAddr+0], 0x1, v[\\vgprAddr+0]  // offset *= bytes/element", {}, {}, {}, ""),
Instruction(".endm", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" Allocate Resources                     "),
Instruction::Comment("****************************************"),
Instruction("s_mov_b32", {Register::Value::Label("m0")}, {Register::Value::Label("0x3800")}, {}, " LDS clamp at 14336 bytes"),
Instruction("v_mov_b32", {Register::Value::Label("v[vgprSerial]")}, {Register::Value::Label("v0")}, {}, " thread serial id"),
Instruction::Comment(" Load Kernel Args "),
Instruction("_s_load_b512", {Register::Value::Label("s[24:39]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x8")}, {}, ""),
Instruction("_s_load_b512", {Register::Value::Label("s[40:55]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x48")}, {}, ""),
Instruction("_s_load_b64", {Register::Value::Label("s[56:57]")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x88")}, {}, ""),
Instruction("_s_load_b32", {Register::Value::Label("s58")}, {Register::Value::Label("s[sgprKernArgAddress:sgprKernArgAddress+1]"), Register::Value::Label("0x90")}, {}, ""),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " wait for 148 bytes of kern args"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetD]")}, {Register::Value::Label("s[sgprOffsetD]"), Register::Value::Label("0x1")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressD+0]")}, {Register::Value::Label("s[sgprAddressD+0]"), Register::Value::Label("s[sgprOffsetD]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressD+1]")}, {Register::Value::Label("s[sgprAddressD+1]"), Register::Value::Label("0")}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetC]")}, {Register::Value::Label("s[sgprOffsetC]"), Register::Value::Label("0x1")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressC+0]")}, {Register::Value::Label("s[sgprAddressC+0]"), Register::Value::Label("s[sgprOffsetC]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressC+1]")}, {Register::Value::Label("s[sgprAddressC+1]"), Register::Value::Label("0")}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetA]")}, {Register::Value::Label("s[sgprOffsetA]"), Register::Value::Label("0x1")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Label("s[sgprOffsetA]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Label("0")}, {}, " add offset to buffer address"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprOffsetB]")}, {Register::Value::Label("s[sgprOffsetB]"), Register::Value::Label("0x1")}, {}, " elements offset to bytes offset"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprAddressB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Label("s[sgprOffsetB]")}, {}, " add offset to buffer address"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprAddressB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Label("0")}, {}, " add offset to buffer address"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprAddressA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Label("8")}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprAddressA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Label("0")}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprAddressB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Label("8")}, {}, " pre-pad to make room for possible pointer shift"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprAddressB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Label("0")}, {}, " pre-pad to make room for possible pointer shift"),
Instruction(".set OffsetD, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetC, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetA, UNDEF", {}, {}, {}, ""),
Instruction(".set OffsetB, UNDEF", {}, {}, {}, ""),
Instruction::Comment("****************************************"),
Instruction::Comment(" Local Read Addresses                   "),
Instruction::Comment("****************************************"),
Instruction::Comment(" local read addresses: tile assignments a/b "),
Instruction::Comment("lr0I"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " 0. thread id in wave: wtid = tid % wavelength(64)"),
Instruction("v_and_b32", {Register::Value::Label("v1")}, {Register::Value::Label("31"), Register::Value::Label("v2")}, {}, " 1. N offset: nIdx = wtid % MI_N(32)"),
Instruction::Comment(" 1. N offset: nOffset = nIdx * nStride(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("5"), Register::Value::Label("v2")}, {}, " 2. block offset: bnIdx = wtid / dividedForBlkId(32)"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("1"), Register::Value::Label("v0")}, {}, " 2. block offset: bnIdx = bnIdx % num1DBlocks(2)"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x5"), Register::Value::Label("v0")}, {}, " 2. block offset: bnOffset = bnIdx * strideBlock(32)"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v0"), Register::Value::Label("v1")}, {}, " 3. add N and block offset: bnOffset = block and N offset"),
Instruction::Comment(" 3. apply VectorWidth: bnOffset = bnOffset * vw(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v2")}, {Register::Value::Label("6"), Register::Value::Label("v2")}, {}, " 4. K offset: kIdx = wtid / (MIN(32) * MIBB(2))"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v2")}, {Register::Value::Label("0x8"), Register::Value::Label("v2")}, {}, " 4. K offset: lrKOffset = kIdx * mStride(256)"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v2"), Register::Value::Label("v1")}, {}, " 5. offset in wave: lrOffset = bnOffset + lrKOffset"),
Instruction::Comment("lr1J"),
Instruction("v_and_b32", {Register::Value::Label("v3")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " 0. thread id in wave: wtid = tid % wavelength(64)"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Label("31"), Register::Value::Label("v3")}, {}, " 1. N offset: nIdx = wtid % MI_N(32)"),
Instruction::Comment(" 1. N offset: nOffset = nIdx * nStride(1) (multiplier is 1, do nothing)"),
Instruction::Comment(" 2. block offset: bnIdx = bnIdx % num1DBlocks(1) is 0. do nothing"),
Instruction::Comment(" 3. apply VectorWidth: bnOffset = bnOffset * vw(1) (multiplier is 1, do nothing)"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v3")}, {Register::Value::Label("6"), Register::Value::Label("v3")}, {}, " 4. K offset: kIdx = wtid / (MIN(32) * MIBB(2))"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v3")}, {Register::Value::Label("0x9"), Register::Value::Label("v3")}, {}, " 4. K offset: lrKOffset = kIdx * mStride(512)"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v3"), Register::Value::Label("v2")}, {}, " 5. offset in wave: lrOffset = bnOffset + lrKOffset"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("6"), Register::Value::Label("v[vgprSerial]")}, {}, " 6. wave offset in N dimen: wtid = tid / dividedForWaveId(64)"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("3"), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wtid0 = wtid / num1DWaves(4)"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x5"), Register::Value::Label("v0")}, {}, " 6. wave offset in M dimen: wOffset = wtid0 * W0Stride(32)"),
Instruction("_v_add_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v0"), Register::Value::Label("v2")}, {}, " 7. final local read offset: flrOffset = lrOffset + WOffset"),
Instruction::Comment(" local read addresses: final offsets a "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("8"), Register::Value::Label("v[vgprSerial]")}, {}, " LSU offset: sgid = Serial / subGroup(256)"),
Instruction("s_mov_b32", {Register::Value::Label("s60")}, {Register::Value::Label("64")}, {}, " LSU offset: stride = MT0(64) + PAD0(0)"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s60"), Register::Value::Label("v0")}, {}, " LSU offset: lsuoffset = sgid*(MT0+PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {Register::Value::Label("v0"), Register::Value::Label("v1"), Register::Value::Label("0x1")}, {}, " Final Offset: offset = (lro0*VW+lsuoffset)*bpe"),
Instruction::Comment(" local read addresses: final offsets b "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("8"), Register::Value::Label("v[vgprSerial]")}, {}, " LSU offset: sgid = Serial / subGroup(256)"),
Instruction("s_mov_b32", {Register::Value::Label("s60")}, {Register::Value::Label("128")}, {}, " LSU offset: stride = MT1(128) + PAD1(0)"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s60"), Register::Value::Label("v0")}, {}, " LSU offset: lsuoffset = sgid*(MT1+PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {Register::Value::Label("v0"), Register::Value::Label("v2"), Register::Value::Label("0x1")}, {}, " Final Offset: offset = (lro1*VW+lsuoffset)*bpe"),
Instruction::Comment(" local read addresses: declare addresses a "),
Instruction::Comment(" N/A "),
Instruction::Comment(" local read addresses: declare addresses b "),
Instruction("_v_add_co_u32", {Register::Value::Label("v[vgprLocalReadAddrB+0]")}, {m_context->getVCC(), Register::Value::Label("0x800"), Register::Value::Label("v[vgprLocalReadAddrB+0]")}, {}, "  += LdsOffsetB (lower)"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Begin setupNewTile, isPap=False           "),
Instruction::Comment("****************************************"),
Instruction::Comment(" global read addresses: work-group "),
Instruction::Comment(" graWorkGroup mapping "),
Instruction::Comment(" global read addresses: tile offset assignment a "),
Instruction::Comment(" LVCA = 16 "),
Instruction::Comment(" v0 = (local)groA-tile = serial%LVCA (note (wgA*MTA) will be added to SRD) "),
Instruction::Comment(" v1 = groA-unroll = serial/LVCA "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v1")}, {Register::Value::Label("4"), Register::Value::Label("v[vgprSerial]")}, {}, " v1 = v[vgprSerial] / 16"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("15"), Register::Value::Label("v[vgprSerial]")}, {}, " v0 = v[vgprSerial] % 16"),
Instruction::Comment(" gro-tile *= glvw "),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x2"), Register::Value::Label("v0")}, {}, " v0 = v0 * 4"),
Instruction::Comment(" global read addresses: tile offset assignment b "),
Instruction::Comment(" LVCB = 32 "),
Instruction::Comment(" v2 = (local)groB-tile = serial%LVCB (note (wgB*MTB) will be added to SRD) "),
Instruction::Comment(" v3 = groB-unroll = serial/LVCB "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v3")}, {Register::Value::Label("5"), Register::Value::Label("v[vgprSerial]")}, {}, " v3 = v[vgprSerial] / 32"),
Instruction("v_and_b32", {Register::Value::Label("v2")}, {Register::Value::Label("31"), Register::Value::Label("v[vgprSerial]")}, {}, " v2 = v[vgprSerial] % 32"),
Instruction::Comment(" gro-tile *= glvw "),
Instruction("v_lshlrev_b32", {Register::Value::Label("v2")}, {Register::Value::Label("0x2"), Register::Value::Label("v2")}, {}, " v2 = v2 * 4"),
Instruction::Comment(" global read addresses: unroll assignment a "),
Instruction::Comment(" v1 "),
Instruction::Comment(" global read addresses: unroll assignment b "),
Instruction::Comment(" v3 "),
Instruction::Comment(" global read addresses: other free assignments "),
Instruction::Comment(" s[sgprWorkGroup2] "),
Instruction::Comment(" global read addresses: tile offsets a "),
Instruction::Comment(" global read addresses: tile offsets b "),
Instruction::Comment(" global read addresses: unroll offsets a "),
Instruction::Comment(" global read addresses: unroll offsets b "),
Instruction::Comment(" global read addresses: final offsets a "),
Instruction("GLOBAL_OFFSET_A", {Register::Value::Label("vgprGlobalReadOffsetA+0")}, {Register::Value::Label("0"), Register::Value::Label("1"), Register::Value::Label("4")}, {}, " gROA_0_0_0_0"),
Instruction::Comment(" global read addresses: final offsets b "),
Instruction("GLOBAL_OFFSET_B", {Register::Value::Label("vgprGlobalReadOffsetB+0")}, {Register::Value::Label("2"), Register::Value::Label("3"), Register::Value::Label("4")}, {}, " gROB_0_0_0_0"),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprScalarGlobalReadOffsetB+0]")}, {Register::Value::Label("s[sgprStrideBL]"), Register::Value::Label("8")}, {}, " compute offset diff (scaled unrollDim)"),
Instruction("s_lshl_b32", {Register::Value::Label("s[sgprScalarGlobalReadOffsetB+0]")}, {Register::Value::Label("s[sgprScalarGlobalReadOffsetB+0]"), Register::Value::Label("0x1")}, {}, " scalar offset *= bytes/element"),
Instruction::Comment(" global read addresses: addresses a "),
Instruction::Comment(" max read offset = size[n] * stride[n-1] "),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprWorkGroup0]"), Register::Value::Label("64")}, {}, " WorkGroup[01] * MT"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprWorkGroup0]"), Register::Value::Label("64")}, {}, " WorkGroup[01] * MT"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprTensor2dSizeA]"), Register::Value::Label("s62")}, {}, " sub tileStart"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprTensor2dSizeA+1]"), Register::Value::Label("s63")}, {}, " sub tileStart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[sgprShadowLimitA:sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA:sgprShadowLimitA+1]"), Register::Value::Label("0x1")}, {}, " Set limit to use bytes"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("8")}, {}, " extend limit for pre-pad"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Label("0")}, {}, " extend limit for pre-pad"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cselect_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("BufferLimit")}, {}, " Move shadow to real if we are within 2^32"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprStrideAK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprStrideAK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_add_u32", {Register::Value::Label("s62")}, {Register::Value::Label("s62"), Register::Value::Label("s60")}, {}, " accum wg term to tilestart"),
Instruction("s_addc_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s63"), Register::Value::Label("s61")}, {}, " accum wg term to tilestart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[62:63]")}, {Register::Value::Label("s[62:63]"), Register::Value::Label("0x1")}, {}, " tileStart *= BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprAddressA+0]"), Register::Value::Label("s62")}, {}, " SRD base = Address+ tileStart0"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprAddressA+1]"), Register::Value::Label("s63")}, {}, " SRD base = Address+ tileStart1"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdA+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in SRD"),
Instruction::Comment(" global read addresses: addresses b "),
Instruction::Comment(" max read offset = size[n] * stride[n-1] "),
Instruction("s_mul_hi_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("128")}, {}, " WorkGroup[01] * MT"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("s[sgprWorkGroup1]"), Register::Value::Label("128")}, {}, " WorkGroup[01] * MT"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprTensor2dSizeB]"), Register::Value::Label("s62")}, {}, " sub tileStart"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprTensor2dSizeB+1]"), Register::Value::Label("s63")}, {}, " sub tileStart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[sgprShadowLimitB:sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB:sgprShadowLimitB+1]"), Register::Value::Label("0x1")}, {}, " Set limit to use bytes"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("8")}, {}, " extend limit for pre-pad"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Label("0")}, {}, " extend limit for pre-pad"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cselect_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("BufferLimit")}, {}, " Move shadow to real if we are within 2^32"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprStrideBK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprStrideBK]"), Register::Value::Label("s[sgprWorkGroup2]")}, {}, " Stride*WG"),
Instruction("s_add_u32", {Register::Value::Label("s62")}, {Register::Value::Label("s62"), Register::Value::Label("s60")}, {}, " accum wg term to tilestart"),
Instruction("s_addc_u32", {Register::Value::Label("s63")}, {Register::Value::Label("s63"), Register::Value::Label("s61")}, {}, " accum wg term to tilestart"),
Instruction("s_lshl_b64", {Register::Value::Label("s[62:63]")}, {Register::Value::Label("s[62:63]"), Register::Value::Label("0x1")}, {}, " tileStart *= BPE"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprAddressB+0]"), Register::Value::Label("s62")}, {}, " SRD base = Address+ tileStart0"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprAddressB+1]"), Register::Value::Label("s63")}, {}, " SRD base = Address+ tileStart1"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdB+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in SRD"),
Instruction::Comment(" global read addresses: increments a "),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {Register::Value::Label("DepthU*BpeA"), Register::Value::Label("s[sgprStrideAL]")}, {}, " incrA unrollIdx)"),
Instruction::Comment(" global read addresses: increments b "),
Instruction("s_mul_i32", {Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {Register::Value::Label("DepthU*BpeB"), Register::Value::Label("s[sgprStrideBL]")}, {}, " incrB unrollIdx)"),
Instruction::Comment("****************************************"),
Instruction::Comment(" Local Write Addresses                  "),
Instruction::Comment("****************************************"),
Instruction::Comment(" lwaTileAssignmentA = v0 "),
Instruction::Comment(" lwaTileAssignmentB = v2 "),
Instruction::Comment(" lwaUnrollAssignmentA = v1 "),
Instruction::Comment(" lwaUnrollAssignmentB = v3 "),
Instruction::Comment(" local write addresses: first offset a "),
Instruction("v_mul_u32_u24", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("0x40"), Register::Value::Label("v1")}, {}, " lwAL**(MTA + PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v0"), Register::Value::Label("v[vgprLocalWriteAddrA]"), Register::Value::Label("0x1")}, {}, " lwFOA = (lwAA + lwAL*(MT0I+PAD))*bpe"),
Instruction::Comment(" local write addresses: first offset b "),
Instruction("v_mul_u32_u24", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("0x80"), Register::Value::Label("v3")}, {}, " lwBL**(MTB + PAD)"),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v2"), Register::Value::Label("v[vgprLocalWriteAddrB]"), Register::Value::Label("0x1")}, {}, " lwFOB = (lwBB + lwBL*(MT1J+PAD))*bpe"),
Instruction("_v_add_co_u32", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {m_context->getVCC(), Register::Value::Label("0x800"), Register::Value::Label("v[vgprLocalWriteAddrB]")}, {}, " lwFOB = lwB1J + lwBL*MT1J + LDS_OFFSET_B=1024*2"),
Instruction::Comment(" declare loop num iterations "),
Instruction("s_lshr_b32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("s[sgprSizesSum+0]"), Register::Value::Label("4")}, {}, " s[sgprLoopCounterL] = s[sgprSizesSum+0] / 16"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprOrigLoopCounter]")}, {Register::Value::Label("s[sgprLoopCounterL]")}, {}, " copy loop counter"),
Instruction::Comment(" local read addresses: init pointers a "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" local read addresses: init pointers b "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" prefetch: global -> local "),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0")}, {}, " at last iteration?"),
Instruction("s_cbranch_scc1", {}, {label_1}, {}, " skip to ShadowInitStart iter b/c numIter==0"),
Instruction("_buffer_load_b64", {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("_buffer_load_b64", {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("_buffer_load_b64", {Register::Value::Label("v[vgprG2LB+2:vgprG2LB+2+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("s[sgprScalarGlobalReadOffsetB+0]"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_1_0"),
Instruction::Comment(" global read inc A loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprSrdA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprSrdA+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" global read inc B loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprSrdB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprSrdB+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment("****************************************"),
Instruction::Comment(" End setupNewTile, isPap=False             "),
Instruction::Comment("****************************************"),
Instruction::Label(label_1),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprAddressD+0]")}, {}, " init SRD base address (lower)"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprAddressD+1]")}, {}, " init SRD base address (upper) + other fields"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+2]")}, {Register::Value::Label("0x80000000")}, {}, ""),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdD+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in post-loop SRD"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprAddressC+0]")}, {}, " init SRD base address (lower)"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprAddressC+1]")}, {}, " init SRD base address (upper) + other fields"),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+2]")}, {Register::Value::Label("0x80000000")}, {}, ""),
Instruction("s_mov_b32", {Register::Value::Label("s[sgprSrdC+3]")}, {Register::Value::Label("Srd127_96")}, {}, " Set bits 127_96 in post-loop SRD"),
Instruction("s_mul_i32", {Register::Value::Label("s62")}, {Register::Value::Label("MT1"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " <- wg1*MT1"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s62"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " CScale s62 by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s62"), Register::Value::Label("s[sgprStrideC1J]")}, {}, " CScale s62 by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("1")}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprAddressC+0]"), Register::Value::Label("s60")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprAddressC+1]"), Register::Value::Label("s61")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s62"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Scale s62 by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s62"), Register::Value::Label("s[sgprStrideD1J]")}, {}, " Scale s62 by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("1")}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprAddressD+0]"), Register::Value::Label("s60")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprAddressD+1]"), Register::Value::Label("s61")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideCK]")}, {}, " CScale s[sgprWorkGroup2] by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideCK]")}, {}, " CScale s[sgprWorkGroup2] by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("1")}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdC+0]")}, {Register::Value::Label("s[sgprSrdC+0]"), Register::Value::Label("s60")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdC+1]")}, {Register::Value::Label("s[sgprSrdC+1]"), Register::Value::Label("s61")}, {}, " add hi to SRD"),
Instruction("s_mul_hi_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideDK]")}, {}, " Scale s[sgprWorkGroup2] by Stride"),
Instruction("s_mul_i32", {Register::Value::Label("s60")}, {Register::Value::Label("s[sgprWorkGroup2]"), Register::Value::Label("s[sgprStrideDK]")}, {}, " Scale s[sgprWorkGroup2] by Stride"),
Instruction("s_lshl_b64", {Register::Value::Label("s[60:61]")}, {Register::Value::Label("s[60:61]"), Register::Value::Label("1")}, {}, " scale by bpe"),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdD+0]")}, {Register::Value::Label("s[sgprSrdD+0]"), Register::Value::Label("s60")}, {}, " add lo to SRD"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdD+1]")}, {Register::Value::Label("s[sgprSrdD+1]"), Register::Value::Label("s61")}, {}, " add hi to SRD"),
Instruction::Comment(" initC: remove C-tile 0-0 from pool "),
Instruction::Comment(" initC: remove AB-tile 0-8 from pool "),
Instruction("v_accvgpr_write", {Register::Value::Label("acc0")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc1")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc2")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc3")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc4")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc5")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc6")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc7")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc8")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc9")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc10")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc11")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc12")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc13")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc14")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc15")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc16")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc17")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc18")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc19")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc20")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc21")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc22")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc23")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc24")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc25")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc26")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc27")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc28")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc29")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc30")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("v_accvgpr_write", {Register::Value::Label("acc31")}, {Register::Value::Label("0x0")}, {}, " initC"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0")}, {}, " at last iteration?"),
Instruction::Comment(" after InitC, skip to end of prefetch last iter if numIter==0 "),
Instruction("s_cbranch_scc0", {}, {label_2}, {}, " Only branch on scc1"),
Instruction("s_getpc_B64", {Register::Value::Label("s[60:61]")}, {}, {}, " addr of next instr"),
Instruction("s_add_i32", {Register::Value::Label("s62")}, {label_6, Register::Value::Label("0x4")}, {}, " target branch offset"),
Instruction("s_add_u32", {Register::Value::Label("s60")}, {Register::Value::Label("s60"), Register::Value::Label("s62")}, {}, " add target branch offset"),
Instruction("s_addc_u32", {Register::Value::Label("s61")}, {Register::Value::Label("s61"), Register::Value::Label("0")}, {}, " add high and carry"),
Instruction("s_setpc_b64", {Register::Value::Label("s[60:61]")}, {}, {}, " branch to LoopEndL_2"),
Instruction::Label(label_2),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, " lgkmcnt=-1 vmcnt=08wait for global read"),
Instruction::Comment(" local write a "),
Instruction("_ds_store_b64", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+1] offset:0")}, {}, " lwoA_0_0_0_0 = (0*LSCA) + (0*LSPA)(*MT0I+PAD) = 0"),
Instruction::Comment(" local write b "),
Instruction("_ds_store_b64", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+1] offset:0")}, {}, " lwoB_0_0_0_0 = (0*LSCB) + (0*LSPB)(*MT1J+PAD) = 0"),
Instruction("_ds_store_b64", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+2:vgprG2LB+2+1] offset:2048")}, {}, " lwoB_0_0_1_0 = (0*LSCB) + (1*LSPB)(*MT1J+PAD) = 2048"),
Instruction::Comment(" local write swap a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {Register::Value::Label("0x2000"), Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local write swap b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {Register::Value::Label("0x2000"), Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {}, " swap Red Blk"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-10prefetch wait for local write"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0) & vmcnt(0)")}, {}, {}, " force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction::Comment(" local read prefetch a "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v22")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read prefetch b "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=128 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v23")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=128 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=128 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=128 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read inc a "),
Instruction::Comment(" N/A, lro->256 "),
Instruction::Comment(" self.localReadDoCntA 1 self.localReadDoCntB 1 "),
Instruction::Comment(" local read inc b "),
Instruction::Comment(" N/A, lro->512 "),
Instruction::Comment(" self.localReadDoCntA 1 self.localReadDoCntB 1 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop(s) - Begin               "),
Instruction::Comment("****************************************"),
Instruction::Label(label_3),
Instruction("s_cmp_le_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x0")}, {}, " LoopCounterL < EndCounter"),
Instruction("s_cbranch_scc1", {}, {label_6}, {}, " do not enter LoopL"),
Instruction::Label(label_4),
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop 1/1 - Begin              "),
Instruction::Comment("****************************************"),
Instruction::Label(label_5),
Instruction::Comment(" Begin Each Unroll: Check VGPR.checkin for INT8 LW "),
Instruction("s_cmp_eq_i32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("1")}, {}, " is this the last iteration"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("0")}, {}, " Set limit to 0 for last iteration"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("0")}, {}, " Set limit to 0 for last iteration"),
Instruction::Comment(" iter 0 "),
Instruction("_buffer_load_b64", {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetA+0]"), Register::Value::Label("s[sgprSrdA:sgprSrdA+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("_buffer_load_b64", {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("0"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_0_0"),
Instruction("_buffer_load_b64", {Register::Value::Label("v[vgprG2LB+2:vgprG2LB+2+1]")}, {Register::Value::Label("v[vgprGlobalReadOffsetB+0]"), Register::Value::Label("s[sgprSrdB:sgprSrdB+3]"), Register::Value::Label("s[sgprScalarGlobalReadOffsetB+0]"), Register::Value::Label("offen offset:0")}, {}, " G -> Reg 0_0_1_0"),
Instruction::Comment(" global read inc A loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdA+0]")}, {Register::Value::Label("s[sgprSrdA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdA+1]")}, {Register::Value::Label("s[sgprSrdA+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitA+0]")}, {Register::Value::Label("s[sgprShadowLimitA+0]"), Register::Value::Label("s[sgprGlobalReadIncsA+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("s[sgprShadowLimitA+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitA+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdA+2]")}, {Register::Value::Label("s[sgprShadowLimitA+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" global read inc B loopL "),
Instruction("s_add_u32", {Register::Value::Label("s[sgprSrdB+0]")}, {Register::Value::Label("s[sgprSrdB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " gra SRD += inc(lower)"),
Instruction("s_addc_u32", {Register::Value::Label("s[sgprSrdB+1]")}, {Register::Value::Label("s[sgprSrdB+1]"), Register::Value::Label("0")}, {}, " gra SRD += inc(upper)"),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprShadowLimitB+0]")}, {Register::Value::Label("s[sgprShadowLimitB+0]"), Register::Value::Label("s[sgprGlobalReadIncsB+0]")}, {}, " limit -= inc)"),
Instruction("s_subb_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("s[sgprShadowLimitB+1]"), Register::Value::Label("0")}, {}, " limit -= inc)"),
Instruction("s_cmp_eq_u32", {Register::Value::Label("s[sgprShadowLimitB+1]")}, {Register::Value::Label("0")}, {}, " are we within 2^32?"),
Instruction("s_cmov_b32", {Register::Value::Label("s[sgprSrdB+2]")}, {Register::Value::Label("s[sgprShadowLimitB+0]")}, {}, " Move shadow to real if we are within 2^32"),
Instruction::Comment(" local read a "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:512")}, {}, " L -> Reg lro=256 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:640")}, {}, " L -> Reg lro=256 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:768")}, {}, " L -> Reg lro=256 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v26")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:896")}, {}, " L -> Reg lro=256 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" local read b "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1024")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=128 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v27")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1280")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=128 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1536")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=128 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:1792")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=128 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->512 "),
Instruction::Comment(" self.localReadDoCntA 2 self.localReadDoCntB 2 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->1024 "),
Instruction::Comment(" self.localReadDoCntA 2 self.localReadDoCntB 2 "),
Instruction::Comment(" sched write - iter 0 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(2)")}, {}, {}, " lgkmcnt=-1 vmcnt=2wait for global read before writing to local"),
Instruction("_ds_store_b64", {Register::Value::Label("v[vgprLocalWriteAddrA]")}, {Register::Value::Label("v[vgprG2LA+0:vgprG2LA+0+1] offset:0")}, {}, " lwoA_0_0_0_0 = (0*LSCA) + (0*LSPA)(*MT0I+PAD) = 0"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(9)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=9 newLW=1 newLR=8"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0]"), Register::Value::Label("v21")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+1]"), Register::Value::Label("v22")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0]"), Register::Value::Label("v23")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+1]"), Register::Value::Label("v24")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, ""),
Instruction("v_mfma_f32_32x32x4f16", {Register::Value::Label("a[0+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[0:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=-1 numReadsIterA=1 skipReadsIterA=1 readsPerIterA=4 "),
Instruction::Comment(" dataAtIterB=-1 numReadsIterB=1 skipReadsIterB=1 readsPerIterB=4 "),
Instruction::Comment(" iter 1 "),
Instruction::Comment(" local read a "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1024")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1152")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1280")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v22")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1408")}, {}, " L -> Reg lro=512 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read b "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:2048")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=128 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v23")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:2304")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=128 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:2560")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=128 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:2816")}, {}, " L -> Reg lro=1024 swapByteOffset=0 ti=128 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->768 "),
Instruction::Comment(" self.localReadDoCntA 3 self.localReadDoCntB 3 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->1536 "),
Instruction::Comment(" self.localReadDoCntA 3 self.localReadDoCntB 3 "),
Instruction::Comment(" sched write - iter 1 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(1)")}, {}, {}, " lgkmcnt=-1 vmcnt=1wait for global read before writing to local"),
Instruction("_ds_store_b64", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+0:vgprG2LB+0+1] offset:0")}, {}, " lwoB_0_0_0_0 = (0*LSCB) + (0*LSPB)(*MT1J+PAD) = 0"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(10)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=10 newLW=2 newLR=8"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0]"), Register::Value::Label("v25")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprValuA_X1_I0+1]"), Register::Value::Label("v26")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprValuB_X1_I0+0]"), Register::Value::Label("v27")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprValuB_X1_I0+1]"), Register::Value::Label("v28")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, ""),
Instruction("v_mfma_f32_32x32x4f16", {Register::Value::Label("a[0+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[0:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=0 numReadsIterA=2 skipReadsIterA=1 readsPerIterA=4 "),
Instruction::Comment(" dataAtIterB=0 numReadsIterB=2 skipReadsIterB=1 readsPerIterB=4 "),
Instruction::Comment(" iter 2 (reset local read pointers iteration)  (swap and reset local write pointers iteration)  (swap local read pointers iteration)  "),
Instruction::Comment(" local read a "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1536")}, {}, " L -> Reg lro=768 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1664")}, {}, " L -> Reg lro=768 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1792")}, {}, " L -> Reg lro=768 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v26")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:1920")}, {}, " L -> Reg lro=768 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" local read b "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:3072")}, {}, " L -> Reg lro=1536 swapByteOffset=0 ti=128 vIdx=0 rIdx=0 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v27")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:3328")}, {}, " L -> Reg lro=1536 swapByteOffset=0 ti=128 vIdx=0 rIdx=1 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:3584")}, {}, " L -> Reg lro=1536 swapByteOffset=0 ti=128 vIdx=0 rIdx=2 oIdx=0 buffer=1 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:3840")}, {}, " L -> Reg lro=1536 swapByteOffset=0 ti=128 vIdx=0 rIdx=3 oIdx=0 buffer=1 iui=0"),
Instruction::Comment(" sched write - iter 2 writesPerItem=1 "),
Instruction("s_waitcnt", {Register::Value::Label("vmcnt(0)")}, {}, {}, " lgkmcnt=-1 vmcnt=0wait for global read before writing to local"),
Instruction("_ds_store_b64", {Register::Value::Label("v[vgprLocalWriteAddrB]")}, {Register::Value::Label("v[vgprG2LB+2:vgprG2LB+2+1] offset:2048")}, {}, " lwoB_0_0_1_0 = (0*LSCB) + (1*LSPB)(*MT1J+PAD) = 2048"),
Instruction::Comment(" local write swap offsets a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {Register::Value::Label("0x2000"), Register::Value::Label("v[vgprLocalWriteAddrA+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local write swap offsets b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {Register::Value::Label("0x2000"), Register::Value::Label("v[vgprLocalWriteAddrB+0]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read swap offsets a "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalReadAddrA]")}, {Register::Value::Label("0x2000"), Register::Value::Label("v[vgprLocalReadAddrA]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read swap offsets b "),
Instruction("v_xor_b32", {Register::Value::Label("v[vgprLocalReadAddrB]")}, {Register::Value::Label("0x2000"), Register::Value::Label("v[vgprLocalReadAddrB]")}, {}, " swap Red Blk"),
Instruction::Comment(" local read init pointers a "),
Instruction::Comment(" localReadInitPointers "),
Instruction::Comment(" local read init pointers b "),
Instruction::Comment(" localReadInitPointers "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(10)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=10 newLW=2 newLR=8"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0]"), Register::Value::Label("v21")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprValuA_X0_I0+1]"), Register::Value::Label("v22")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprValuB_X0_I0+0]"), Register::Value::Label("v23")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprValuB_X0_I0+1]"), Register::Value::Label("v24")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, ""),
Instruction("v_mfma_f32_32x32x4f16", {Register::Value::Label("a[0+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X0_I0+0+0+0:vgprValuA_X0_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X0_I0+0+0+0:vgprValuB_X0_I0+0+0+0+1]"), Register::Value::Label("a[0:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=0 "),
Instruction::Comment(" dataAtIterA=1 numReadsIterA=3 skipReadsIterA=1 readsPerIterA=4 "),
Instruction::Comment(" dataAtIterB=1 numReadsIterB=3 skipReadsIterB=1 readsPerIterB=4 "),
Instruction::Comment(" iter 3 "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0)")}, {}, {}, " lgkmcnt=0 vmcnt=-13wait for local write"),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0) & vmcnt(0)")}, {}, {}, " force waitcnt0"),
Instruction("s_barrier", {}, {}, {}, ""),
Instruction::Comment(" local read a "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v21")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:128")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuA_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v22")}, {Register::Value::Label("v[vgprLocalReadAddrA] offset:384")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=64 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read b "),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+0]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:0")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=128 vIdx=0 rIdx=0 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v23")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:256")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=128 vIdx=0 rIdx=1 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16", {Register::Value::Label("v[vgprValuB_X0_I0+1]")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:512")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=128 vIdx=0 rIdx=2 oIdx=0 buffer=0 iui=0"),
Instruction("_ds_load_u16_d16_hi", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprLocalReadAddrB] offset:768")}, {}, " L -> Reg lro=0 swapByteOffset=0 ti=128 vIdx=0 rIdx=3 oIdx=0 buffer=0 iui=0"),
Instruction::Comment(" local read increment a "),
Instruction::Comment(" N/A, lro->256 "),
Instruction::Comment(" self.localReadDoCntA 5 self.localReadDoCntB 5 "),
Instruction::Comment(" local read increment b "),
Instruction::Comment(" N/A, lro->512 "),
Instruction::Comment(" self.localReadDoCntA 5 self.localReadDoCntB 5 "),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(9)")}, {}, {}, " lgkmcnt=0 vmcnt=-1wait for prior local read local write old=0, new=9 newLW=1 newLR=8"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0]"), Register::Value::Label("v25")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuA_X1_I0+1]")}, {Register::Value::Label("v[vgprValuA_X1_I0+1]"), Register::Value::Label("v26")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+0]")}, {Register::Value::Label("v[vgprValuB_X1_I0+0]"), Register::Value::Label("v27")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("v_or_b32", {Register::Value::Label("v[vgprValuB_X1_I0+1]")}, {Register::Value::Label("v[vgprValuB_X1_I0+1]"), Register::Value::Label("v28")}, {}, " pack two half Vgpr to one Vgpr"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, ""),
Instruction("v_mfma_f32_32x32x4f16", {Register::Value::Label("a[0+0:31+0]")}, {Register::Value::Label("v[vgprValuA_X1_I0+0+0+0:vgprValuA_X1_I0+0+0+0+1]"), Register::Value::Label("v[vgprValuB_X1_I0+0+0+0:vgprValuB_X1_I0+0+0+0+1]"), Register::Value::Label("a[0:31]")}, {}, ""),
Instruction::Comment(" numPrefetchIter=1 "),
Instruction::Comment(" dataAtIterA=2 numReadsIterA=3 skipReadsIterA=1 readsPerIterA=4 "),
Instruction::Comment(" dataAtIterB=2 numReadsIterB=3 skipReadsIterB=1 readsPerIterB=4 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Unrolled Loop - End                    "),
Instruction::Comment("****************************************"),
Instruction::Comment(" closeLoop loopL finalLoop=1 tailLoop=0 "),
Instruction("s_sub_u32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("s[sgprLoopCounterL]"), Register::Value::Label("1")}, {}, " dec counterL"),
Instruction("s_cmp_eq_i32", {Register::Value::Label("s[sgprLoopCounterL]")}, {Register::Value::Label("0x0")}, {}, " counterL==0"),
Instruction("s_cbranch_scc0", {}, {label_4}, {}, " restart LoopL"),
Instruction::Label(label_6),
Instruction::Comment(" Before NLL: Check VGPR.checkin for INT8 LW "),
Instruction::Label(label_7),
Instruction::Comment(" endSummation: add vgpr [0...18) to pool "),
Instruction(".set ScalarGlobalReadOffsetB, UNDEF", {}, {}, {}, ""),
Instruction(".set ShadowLimitA, UNDEF", {}, {}, {}, ""),
Instruction(".set ShadowLimitB, UNDEF", {}, {}, {}, ""),
Instruction("s_waitcnt", {Register::Value::Label("lgkmcnt(0) & vmcnt(0)")}, {}, {}, " wait for all summation activity"),
Instruction::Comment(" Mapping of Acc register -> C Vgpr register "),
Instruction::Comment(" not-LocalSplitU: global write indices "),
Instruction::Comment(" computeStoreVgprs "),
Instruction("v_lshrrev_b32", {Register::Value::Label("v4")}, {Register::Value::Label("6"), Register::Value::Label("v[vgprSerial]")}, {}, " v4 = v[vgprSerial] / 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v1")}, {Register::Value::Label("0"), Register::Value::Label("v4")}, {}, " v1 = v4 / 1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v1")}, {Register::Value::Label("0x20"), Register::Value::Label("v1")}, {}, " wave coordination offset 1"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Label("31"), Register::Value::Label("v[vgprSerial]")}, {}, " v5 = v[vgprSerial] % 32"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("v5"), Register::Value::Label("v1")}, {}, " coordination 1 = wave_id1 + tid1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v2")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprStrideC1J]")}, {}, "  offset 1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v3")}, {Register::Value::Label("v1"), Register::Value::Label("s[sgprStrideD1J]")}, {}, "  offset 1"),
Instruction("v_and_b32", {Register::Value::Label("v5")}, {Register::Value::Label("0"), Register::Value::Label("v4")}, {}, " v5 = v4 % 1"),
Instruction("v_mul_lo_u32", {Register::Value::Label("v5")}, {Register::Value::Label("0x40"), Register::Value::Label("v5")}, {}, " wave coordination offset 0"),
Instruction("v_and_b32", {Register::Value::Label("v0")}, {Register::Value::Label("63"), Register::Value::Label("v[vgprSerial]")}, {}, " v0 = v[vgprSerial] % 64"),
Instruction("v_lshrrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("5"), Register::Value::Label("v0")}, {}, " v0 = v0 / 32"),
Instruction("v_lshlrev_b32", {Register::Value::Label("v0")}, {Register::Value::Label("0x2"), Register::Value::Label("v0")}, {}, " thread0 * continuous_output"),
Instruction("_v_add_u32", {Register::Value::Label("v0")}, {Register::Value::Label("v5"), Register::Value::Label("v0")}, {}, " coordination 0 = wave_id0 + tid0"),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("64"), Register::Value::Label("s[sgprWorkGroup0]")}, {}, " wgp0 * MT0"),
Instruction("_v_add_u32", {Register::Value::Label("v0")}, {Register::Value::Label("s52"), Register::Value::Label("v0")}, {}, " coord 0 = (tid0/MI_m)*4 + waveG0*MIB_m + MT0*SG0"),
Instruction("s_mul_i32", {Register::Value::Label("s52")}, {Register::Value::Label("128"), Register::Value::Label("s[sgprWorkGroup1]")}, {}, " wgp1 * MT1"),
Instruction("_v_add_u32", {Register::Value::Label("v1")}, {Register::Value::Label("s52"), Register::Value::Label("v1")}, {}, " coord 1 = (tid0%MI_m) + waveG1*MIB_n + MT1*SG1"),
Instruction::Comment(" not-LocalSplitU: global write "),
Instruction::Label(label_8),
Instruction::Comment(" edge=0, allocate 2 sgpr. perBatchTmpS=2 perBatchMaskS=0 perElementMaskS=0 elementsPerBatch=20 "),
Instruction::Comment(" optSingleColVgpr=1 optSharedColVgpr=0 optSGPRUsage=BufferLoad_Mask optSrdIncForRow=1 "),
Instruction::Comment("****************************************"),
Instruction::Comment(" Global Write Batch #0 (d1,d0,vc1,vc0) = "),
Instruction::Comment("    (0,0,0,0:vw4); (0,1,0,0:vw4); (0,2,0,0:vw4); (0,3,0,0:vw4); (0,4,0,0:vw4); (0,5,0,0:vw4); (0,6,0,0:vw4); (0,7,0,0:vw4) "),
Instruction::Comment("****************************************"),
Instruction::Comment(" calc coords, apply mask, and issue loads (if necessary) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,0,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,1,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,2,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,3,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,4,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,5,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,6,0) "),
Instruction::Comment(" (d1,vc1,d0,vc0)=(0,0,7,0) "),
Instruction("_v_add_lshl_u32", {Register::Value::Label("v6")}, {Register::Value::Label("v3"), Register::Value::Label("v0"), Register::Value::Label("0x1")}, {}, " optSingleColVgpr scaleToBpe: sharedAddrVgpr <- cinRowPtr + coord0, scaled by BPE. BSHERE:coord0=0, coord0Vgpr=0"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+8]")}, {Register::Value::Label("acc0")}, {}, " copy acc to vreg[0]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("acc1")}, {}, " copy acc to vreg[1]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+10]")}, {Register::Value::Label("acc2")}, {}, " copy acc to vreg[2]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("acc3")}, {}, " copy acc to vreg[3]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("acc4")}, {}, " copy acc to vreg[4]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("acc5")}, {}, " copy acc to vreg[5]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("acc6")}, {}, " copy acc to vreg[6]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("acc7")}, {}, " copy acc to vreg[7]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("acc8")}, {}, " copy acc to vreg[8]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("acc9")}, {}, " copy acc to vreg[9]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("acc10")}, {}, " copy acc to vreg[10]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("acc11")}, {}, " copy acc to vreg[11]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("acc12")}, {}, " copy acc to vreg[12]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("acc13")}, {}, " copy acc to vreg[13]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("acc14")}, {}, " copy acc to vreg[14]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("acc15")}, {}, " copy acc to vreg[15]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("acc16")}, {}, " copy acc to vreg[16]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("acc17")}, {}, " copy acc to vreg[17]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("acc18")}, {}, " copy acc to vreg[18]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("acc19")}, {}, " copy acc to vreg[19]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("acc20")}, {}, " copy acc to vreg[20]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("acc21")}, {}, " copy acc to vreg[21]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("acc22")}, {}, " copy acc to vreg[22]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("acc23")}, {}, " copy acc to vreg[23]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+40]")}, {Register::Value::Label("acc24")}, {}, " copy acc to vreg[24]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+41]")}, {Register::Value::Label("acc25")}, {}, " copy acc to vreg[25]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+42]")}, {Register::Value::Label("acc26")}, {}, " copy acc to vreg[26]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+43]")}, {Register::Value::Label("acc27")}, {}, " copy acc to vreg[27]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("acc28")}, {}, " copy acc to vreg[28]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+45]")}, {Register::Value::Label("acc29")}, {}, " copy acc to vreg[29]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+46]")}, {Register::Value::Label("acc30")}, {}, " copy acc to vreg[30]"),
Instruction("v_accvgpr_read_b32", {Register::Value::Label("v[vgprValuC+47]")}, {Register::Value::Label("acc31")}, {}, " copy acc to vreg[31]"),
Instruction("s_nop", {Register::Value::Label("1")}, {}, {}, " 2 wait states required before reading vgpr"),
Instruction::Comment(" rC *= alpha batchElements=[(0, 0, 0, 0), (0, 1, 0, 0), (0, 2, 0, 0), (0, 3, 0, 0), (0, 4, 0, 0), (0, 5, 0, 0), (0, 6, 0, 0), (0, 7, 0, 0)] "),
Instruction::Comment(" apply mask, calc new C and issue writes "),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+8]")}, {Register::Value::Label("v[vgprValuC+8]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+9]")}, {Register::Value::Label("v[vgprValuC+9]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v8")}, {Register::Value::Label("v[vgprValuC+8]"), Register::Value::Label("v[vgprValuC+9]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+10]")}, {Register::Value::Label("v[vgprValuC+10]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+11]")}, {Register::Value::Label("v[vgprValuC+11]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v9")}, {Register::Value::Label("v[vgprValuC+10]"), Register::Value::Label("v[vgprValuC+11]")}, {}, " Pack with neighbor"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[8:9]"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:0"}, " store D"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+12]")}, {Register::Value::Label("v[vgprValuC+12]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+13]")}, {Register::Value::Label("v[vgprValuC+13]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v12")}, {Register::Value::Label("v[vgprValuC+12]"), Register::Value::Label("v[vgprValuC+13]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+14]")}, {Register::Value::Label("v[vgprValuC+14]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+15]")}, {Register::Value::Label("v[vgprValuC+15]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v13")}, {Register::Value::Label("v[vgprValuC+14]"), Register::Value::Label("v[vgprValuC+15]")}, {}, " Pack with neighbor"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[12:13]"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:16"}, " store D"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+24]")}, {Register::Value::Label("v[vgprValuC+24]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+25]")}, {Register::Value::Label("v[vgprValuC+25]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v24")}, {Register::Value::Label("v[vgprValuC+24]"), Register::Value::Label("v[vgprValuC+25]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+26]")}, {Register::Value::Label("v[vgprValuC+26]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+27]")}, {Register::Value::Label("v[vgprValuC+27]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v25")}, {Register::Value::Label("v[vgprValuC+26]"), Register::Value::Label("v[vgprValuC+27]")}, {}, " Pack with neighbor"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[24:25]"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:32"}, " store D"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+28]")}, {Register::Value::Label("v[vgprValuC+28]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+29]")}, {Register::Value::Label("v[vgprValuC+29]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v28")}, {Register::Value::Label("v[vgprValuC+28]"), Register::Value::Label("v[vgprValuC+29]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+30]")}, {Register::Value::Label("v[vgprValuC+30]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+31]")}, {Register::Value::Label("v[vgprValuC+31]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v29")}, {Register::Value::Label("v[vgprValuC+30]"), Register::Value::Label("v[vgprValuC+31]")}, {}, " Pack with neighbor"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[28:29]"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:48"}, " store D"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+32]")}, {Register::Value::Label("v[vgprValuC+32]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+33]")}, {Register::Value::Label("v[vgprValuC+33]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v32")}, {Register::Value::Label("v[vgprValuC+32]"), Register::Value::Label("v[vgprValuC+33]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+34]")}, {Register::Value::Label("v[vgprValuC+34]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+35]")}, {Register::Value::Label("v[vgprValuC+35]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v33")}, {Register::Value::Label("v[vgprValuC+34]"), Register::Value::Label("v[vgprValuC+35]")}, {}, " Pack with neighbor"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[32:33]"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:64"}, " store D"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+36]")}, {Register::Value::Label("v[vgprValuC+36]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+37]")}, {Register::Value::Label("v[vgprValuC+37]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v36")}, {Register::Value::Label("v[vgprValuC+36]"), Register::Value::Label("v[vgprValuC+37]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+38]")}, {Register::Value::Label("v[vgprValuC+38]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+39]")}, {Register::Value::Label("v[vgprValuC+39]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v37")}, {Register::Value::Label("v[vgprValuC+38]"), Register::Value::Label("v[vgprValuC+39]")}, {}, " Pack with neighbor"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[36:37]"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:80"}, " store D"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+40]")}, {Register::Value::Label("v[vgprValuC+40]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+41]")}, {Register::Value::Label("v[vgprValuC+41]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v40")}, {Register::Value::Label("v[vgprValuC+40]"), Register::Value::Label("v[vgprValuC+41]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+42]")}, {Register::Value::Label("v[vgprValuC+42]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+43]")}, {Register::Value::Label("v[vgprValuC+43]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v41")}, {Register::Value::Label("v[vgprValuC+42]"), Register::Value::Label("v[vgprValuC+43]")}, {}, " Pack with neighbor"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[40:41]"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:96"}, " store D"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+44]")}, {Register::Value::Label("v[vgprValuC+44]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+45]")}, {Register::Value::Label("v[vgprValuC+45]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v44")}, {Register::Value::Label("v[vgprValuC+44]"), Register::Value::Label("v[vgprValuC+45]")}, {}, " Pack with neighbor"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+46]")}, {Register::Value::Label("v[vgprValuC+46]")}, {}, " convert C to fp16"),
Instruction("v_cvt_f16_f32", {Register::Value::Label("v[vgprValuC+47]")}, {Register::Value::Label("v[vgprValuC+47]")}, {}, " convert C to fp16"),
Instruction("v_pack_b32_f16", {Register::Value::Label("v45")}, {Register::Value::Label("v[vgprValuC+46]"), Register::Value::Label("v[vgprValuC+47]")}, {}, " Pack with neighbor"),
Instruction("_buffer_store_b64", {}, {Register::Value::Label("v[44:45]"), Register::Value::Label("v6"), Register::Value::Label("s[sgprSrdD:sgprSrdD+3]"), Register::Value::Label("0")}, {"offen", "offset:112"}, " store D"),
Instruction("s_nop", {Register::Value::Label("0")}, {}, {}, " 1 wait state required when next inst writes vgprs held by previous dwordx4 store inst"),
Instruction("s_branch", {}, {label_9}, {}, " jump to end"),
Instruction::Label(label_9),
Instruction::Label(label_10),
};
            // clang-format on
        }
    };

    Generator<Instruction> HGEMM_Minimal_Program(ContextPtr context)
    {
        HGemmGuidePostMinimal gen(context);

        for(auto const& inst : gen.Program())
            co_yield inst;
    }
}
