#!/usr/bin/env bash

# Expects rocRoller tests to have been built with `-DCODE_COVERAGE=ON -DBUILD_SHARED_LIBS=OFF`

help() {
    echo "Usage: $0 [option...]" >&2
    echo
    echo "NOTE: This script assumes that rocRoller has been built with the following CMake arguments:"
    echo "      -DCODE_COVERAGE=ON -DBUILD_SHARED_LIBS=OFF"
    echo
    echo "options:"
    echo "b     Absolute path to build directory"
    echo "g     GPU Identifier (for output file names)"
    echo "h     Print this help message"
    echo
}

while getopts g:b:h flag; do
    case "${flag}" in
    g) gpu=${OPTARG} ;;
    b) build_path=${OPTARG} ;; # Absolute path required
    h)
        help
        exit
        ;;
    \?)
        help
        exit
        ;;
    esac
done

# Require build_path
if [ -z "$build_path" ]; then
    echo 'Missing -b' >&2
    echo
    help
    exit 1
fi

# build_path must be an absolute path to work with ctest
if [ "$build_path" == "${build_path#/}" ]; then
    echo 'Absolute path required for -b'
    echo '(HINT: Try "-b `pwd`" if invoking from your build directory)'
    echo
    help
    exit 1
fi

script_path=$(dirname "$(realpath $0)")
code_cov_path=${build_path}
profdata_file=${code_cov_path}/rocRollerTests.profdata
ignore_patterns="(.*googletest-src.*)|(.*/catch2-src/.*)|(.*/catch2-build/.*)|(.*/yaml-cpp-src/.*)|(.*hip/include.*)|(.*/include/llvm/.*)|(.*/spdlog/.*)|(.*/msgpack-src/.*)|(.*/build/.*)|(.*/extern/.*)|(.*/test/.*[Tt]ests?.cpp)"

set -x

mkdir -p ${code_cov_path}

#Remove the prof file from running the generator.
rm -rf ${build_path}/*.profraw
rm -rf ${code_cov_path}/*.profraw

# Add the node install to our PATH.
source ${script_path}/../utils/graupel/setup-node

# The `%m` creates a different prof file for each object file. So one for
# rocroller.so and one for rocRollerTests.
# Also had to switch to using ctest so seg faults can be handled gracefully.

echo Using $(nproc) threads for code coverage tests.
OMP_NUM_THREADS=8 LLVM_PROFILE_FILE=${code_cov_path}/rocRollerTests_%m.profraw ctest \
    -j $(nproc) \
    --test-dir ${build_path} \
    --output-on-failure

# this combines them back together.
/opt/rocm/lib/llvm/bin/llvm-profdata merge \
    --sparse \
    ${code_cov_path}/*.profraw \
    -o ${profdata_file}

# For some reason, with the -object flag, we can't just specify the source
# directory, so we have to filter out the files we don't want.
/opt/rocm/lib/llvm/bin/llvm-cov report \
    --instr-profile=${profdata_file} \
    --object ${build_path}/bin/rocRollerTests \
    --object ${build_path}/bin/rocRollerTests_catch \
    --object ${build_path}/bin/ArchGenTests \
    --ignore-filename-regex=${ignore_patterns} >${code_cov_path}/code_cov_${gpu}.report
cat ${code_cov_path}/code_cov_${gpu}.report

/opt/rocm/lib/llvm/bin/llvm-cov show \
    --format=html \
    --Xdemangler=/opt/rocm/llvm/bin/llvm-cxxfilt \
    --instr-profile=${profdata_file} \
    --object ${build_path}/bin/rocRollerTests \
    --object ${build_path}/bin/rocRollerTests_catch \
    --object ${build_path}/bin/ArchGenTests \
    --ignore-filename-regex=${ignore_patterns} \
    --output-dir=${code_cov_path}/code_cov_${gpu}_html

/opt/rocm/lib/llvm/bin/llvm-cov show \
    --format=text \
    --Xdemangler=/opt/rocm/llvm/bin/llvm-cxxfilt \
    --instr-profile=${profdata_file} \
    --object ${build_path}/bin/rocRollerTests \
    --object ${build_path}/bin/rocRollerTests_catch \
    --object ${build_path}/bin/ArchGenTests \
    --ignore-filename-regex=${ignore_patterns} \
    --output-dir=${code_cov_path}/code_cov_${gpu}_text

mv ${code_cov_path}/code_cov_${gpu}_text/coverage/*/*/*/*/*/*/lib \
    ${code_cov_path}/code_cov_${gpu}_text/lib
rm -rf ${code_cov_path}/code_cov_${gpu}_text/coverage

# zip the text report for archiving.
cwd=$(pwd)
pushd ${code_cov_path}
zip -r ${cwd}/code_cov_${gpu}.zip ./code_cov_${gpu}_text
popd
